[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {
            "value": "\n```python\nimport flask_restful\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Api",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {
            "value": "\n```python\nimport flask_restful\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "JWT",
        "importPath": "flask_jwt",
        "description": "flask_jwt",
        "isExtraImport": true,
        "detail": "flask_jwt",
        "documentation": {
            "value": "\n```python\nimport flask_jwt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt",
        "description": "flask_jwt",
        "isExtraImport": true,
        "detail": "flask_jwt",
        "documentation": {
            "value": "\n```python\nimport flask_jwt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "current_identity",
        "importPath": "flask_jwt",
        "description": "flask_jwt",
        "isExtraImport": true,
        "detail": "flask_jwt",
        "documentation": {
            "value": "\n```python\nimport flask_jwt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "safe_str_cmp",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {
            "value": "\n```python\nimport werkzeug.security\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urandom",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {
            "value": "\n```python\nimport site\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_collections_abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MutableMapping",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Set",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sequence",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {
            "value": "\n```python\nimport _collections_abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {
            "value": "\n```python\nimport operator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {
            "value": "\n```python\nimport operator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "eq",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {
            "value": "\n```python\nimport operator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iskeyword",
        "importPath": "keyword",
        "description": "keyword",
        "isExtraImport": true,
        "detail": "keyword",
        "documentation": {
            "value": "\n```python\nimport keyword\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {
            "value": "\n```python\nimport heapq\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "proxy",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getweakrefcount",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getweakrefs",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "proxy",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CallableProxyType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProxyType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ReferenceType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_remove_dead_weakref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {
            "value": "\n```python\nimport _weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "starmap",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "starmap",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {
            "value": "\n```python\nimport itertools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "recursive_repr",
        "importPath": "reprlib",
        "description": "reprlib",
        "isExtraImport": true,
        "detail": "reprlib",
        "documentation": {
            "value": "\n```python\nimport reprlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "recursive_repr",
        "importPath": "reprlib",
        "description": "reprlib",
        "isExtraImport": true,
        "detail": "reprlib",
        "documentation": {
            "value": "\n```python\nimport reprlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getopt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getopt",
        "description": "getopt",
        "detail": "getopt",
        "documentation": {
            "value": "\n```python\nimport getopt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {
            "value": "\n```python\nimport sysconfig\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {
            "value": "\n```python\nimport warnings\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {
            "value": "\n```python\nimport warnings\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "opcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "opcode",
        "description": "opcode",
        "detail": "opcode",
        "documentation": {
            "value": "\n```python\nimport opcode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dist",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {
            "value": "\n```python\nimport distutils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {
            "value": "\n```python\nimport distutils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mbcs_encode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mbcs_decode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "oem_encode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "oem_decode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lookup",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_UTF8",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {
            "value": "\n```python\nimport codecs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {
            "value": "\n```python\nimport base64\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_tw,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_tw.",
        "description": "_codecs_tw.",
        "detail": "_codecs_tw.",
        "documentation": {
            "value": "\n```python\nimport _codecs_tw.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_multibytecodec",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_multibytecodec",
        "description": "_multibytecodec",
        "detail": "_multibytecodec",
        "documentation": {
            "value": "\n```python\nimport _multibytecodec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_hk,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_hk.",
        "description": "_codecs_hk.",
        "detail": "_codecs_hk.",
        "documentation": {
            "value": "\n```python\nimport _codecs_hk.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bz2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bz2",
        "description": "bz2",
        "detail": "bz2",
        "documentation": {
            "value": "\n```python\nimport bz2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_jp,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_jp.",
        "description": "_codecs_jp.",
        "detail": "_codecs_jp.",
        "documentation": {
            "value": "\n```python\nimport _codecs_jp.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_kr,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_kr.",
        "description": "_codecs_kr.",
        "detail": "_codecs_kr.",
        "documentation": {
            "value": "\n```python\nimport _codecs_kr.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_cn,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_cn.",
        "description": "_codecs_cn.",
        "detail": "_codecs_cn.",
        "documentation": {
            "value": "\n```python\nimport _codecs_cn.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {
            "value": "\n```python\nimport binascii\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "stringprep,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stringprep.",
        "description": "stringprep.",
        "detail": "stringprep.",
        "documentation": {
            "value": "\n```python\nimport stringprep.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ucd_3_2_0",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {
            "value": "\n```python\nimport unicodedata\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_codecs_iso2022,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_iso2022.",
        "description": "_codecs_iso2022.",
        "detail": "_codecs_iso2022.",
        "documentation": {
            "value": "\n```python\nimport _codecs_iso2022.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quopri",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "quopri",
        "description": "quopri",
        "detail": "quopri",
        "documentation": {
            "value": "\n```python\nimport quopri\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {
            "value": "\n```python\nimport io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codecs,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs.",
        "description": "codecs.",
        "detail": "codecs.",
        "documentation": {
            "value": "\n```python\nimport codecs.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {
            "value": "\n```python\nimport zlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_imp",
        "description": "_imp",
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lock_held",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "acquire_lock",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "release_lock",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_frozen_object",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_frozen_package",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "init_frozen",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_builtin",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_frozen",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_fix_co_filename",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {
            "value": "\n```python\nimport _imp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {
            "value": "\n```python\nimport types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {
            "value": "\n```python\nimport types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MappingProxyType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {
            "value": "\n```python\nimport types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DynamicClassAttribute",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {
            "value": "\n```python\nimport types\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {
            "value": "\n```python\nimport abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {
            "value": "\n```python\nimport abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {
            "value": "\n```python\nimport abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_cache_token",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {
            "value": "\n```python\nimport abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {
            "value": "\n```python\nimport re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {
            "value": "\n```python\nimport csv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "email",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email",
        "description": "email",
        "detail": "email",
        "documentation": {
            "value": "\n```python\nimport email\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {
            "value": "\n```python\nimport pathlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {
            "value": "\n```python\nimport pathlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {
            "value": "\n```python\nimport zipfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {
            "value": "\n```python\nimport functools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {
            "value": "\n```python\nimport collections\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {
            "value": "\n```python\nimport collections\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {
            "value": "\n```python\nimport configparser\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {
            "value": "\n```python\nimport contextlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {
            "value": "\n```python\nimport contextlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {
            "value": "\n```python\nimport contextlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {
            "value": "\n```python\nimport contextlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {
            "value": "\n```python\nimport importlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {
            "value": "\n```python\nimport importlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {
            "value": "\n```python\nimport importlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "machinery",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {
            "value": "\n```python\nimport importlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "util",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {
            "value": "\n```python\nimport importlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MetaPathFinder",
        "importPath": "importlib.abc",
        "description": "importlib.abc",
        "isExtraImport": true,
        "detail": "importlib.abc",
        "documentation": {
            "value": "\n```python\nimport importlib.abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ResourceLoader",
        "importPath": "importlib.abc",
        "description": "importlib.abc",
        "isExtraImport": true,
        "detail": "importlib.abc",
        "documentation": {
            "value": "\n```python\nimport importlib.abc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {
            "value": "\n```python\nimport tempfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {
            "value": "\n```python\nimport typing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BinaryIO",
        "importPath": "typing.io",
        "description": "typing.io",
        "isExtraImport": true,
        "detail": "typing.io",
        "documentation": {
            "value": "\n```python\nimport typing.io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TextIO",
        "importPath": "typing.io",
        "description": "typing.io",
        "isExtraImport": true,
        "detail": "typing.io",
        "documentation": {
            "value": "\n```python\nimport typing.io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ZipImportError",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {
            "value": "\n```python\nimport zipimport\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_locale",
        "description": "_locale",
        "detail": "_locale",
        "documentation": {
            "value": "\n```python\nimport _locale\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {
            "value": "\n```python\nimport struct\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {
            "value": "\n```python\nimport builtins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {
            "value": "\n```python\nimport builtins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abs",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {
            "value": "\n```python\nimport builtins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {
            "value": "\n```python\nimport builtins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {
            "value": "\n```python\nimport builtins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {
            "value": "\n```python\nimport weakref\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copyreg",
        "description": "copyreg",
        "detail": "copyreg",
        "documentation": {
            "value": "\n```python\nimport copyreg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dispatch_table",
        "importPath": "copyreg",
        "description": "copyreg",
        "isExtraImport": true,
        "detail": "copyreg",
        "documentation": {
            "value": "\n```python\nimport copyreg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {
            "value": "\n```python\nimport posixpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_thread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_thread",
        "description": "_thread",
        "detail": "_thread",
        "documentation": {
            "value": "\n```python\nimport _thread\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RLock",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {
            "value": "\n```python\nimport _thread\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_ident",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {
            "value": "\n```python\nimport _thread\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {
            "value": "\n```python\nimport stat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_compare_digest",
        "importPath": "_operator",
        "description": "_operator",
        "isExtraImport": true,
        "detail": "_operator",
        "documentation": {
            "value": "\n```python\nimport _operator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {
            "value": "\n```python\nimport hashlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ERR_MSG",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nimport importlib._bootstrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_exec",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nimport importlib._bootstrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_load",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nimport importlib._bootstrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_builtin_from_name",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nimport importlib._bootstrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourcelessFileLoader",
        "importPath": "importlib._bootstrap_external",
        "description": "importlib._bootstrap_external",
        "isExtraImport": true,
        "detail": "importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nimport importlib._bootstrap_external\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {
            "value": "\n```python\nimport tokenize\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_io",
        "description": "_io",
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEFAULT_BUFFER_SIZE",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BlockingIOError",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UnsupportedOperation",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open_code",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FileIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BytesIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedReader",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedWriter",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedRWPair",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedRandom",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalNewlineDecoder",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TextIOWrapper",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {
            "value": "\n```python\nimport _io\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encodings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "encodings",
        "description": "encodings",
        "detail": "encodings",
        "documentation": {
            "value": "\n```python\nimport encodings\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encodings.aliases",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "encodings.aliases",
        "description": "encodings.aliases",
        "detail": "encodings.aliases",
        "documentation": {
            "value": "\n```python\nimport encodings.aliases\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "genericpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "genericpath",
        "description": "genericpath",
        "detail": "genericpath",
        "documentation": {
            "value": "\n```python\nimport genericpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "genericpath",
        "description": "genericpath",
        "isExtraImport": true,
        "detail": "genericpath",
        "documentation": {
            "value": "\n```python\nimport genericpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "genericpath",
        "description": "genericpath",
        "isExtraImport": true,
        "detail": "genericpath",
        "documentation": {
            "value": "\n```python\nimport genericpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "curdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pardir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pathsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "defpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "altsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "devnull",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exp",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "e",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "acos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bisect",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {
            "value": "\n```python\nimport bisect\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_random",
        "description": "_random",
        "detail": "_random",
        "documentation": {
            "value": "\n```python\nimport _random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sre_compile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_compile",
        "description": "sre_compile",
        "detail": "sre_compile",
        "documentation": {
            "value": "\n```python\nimport sre_compile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sre_parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_parse",
        "description": "sre_parse",
        "detail": "sre_parse",
        "documentation": {
            "value": "\n```python\nimport sre_parse\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {
            "value": "\n```python\nimport atexit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__main__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__main__",
        "description": "__main__",
        "detail": "__main__",
        "documentation": {
            "value": "\n```python\nimport __main__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {
            "value": "\n```python\nimport fnmatch\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {
            "value": "\n```python\nimport errno\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_sre",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_sre",
        "description": "_sre",
        "detail": "_sre",
        "documentation": {
            "value": "\n```python\nimport _sre\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXREPEAT",
        "importPath": "_sre",
        "description": "_sre",
        "isExtraImport": true,
        "detail": "_sre",
        "documentation": {
            "value": "\n```python\nimport _sre\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXGROUPS",
        "importPath": "_sre",
        "description": "_sre",
        "isExtraImport": true,
        "detail": "_sre",
        "documentation": {
            "value": "\n```python\nimport _sre\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {
            "value": "\n```python\nimport sre_constants\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {
            "value": "\n```python\nimport sre_constants\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {
            "value": "\n```python\nimport _struct\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_clearcache",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {
            "value": "\n```python\nimport _struct\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__doc__",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {
            "value": "\n```python\nimport _struct\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {
            "value": "\n```python\nimport shutil\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {
            "value": "\n```python\nimport copy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "token",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "token",
        "description": "token",
        "detail": "token",
        "documentation": {
            "value": "\n```python\nimport token\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "*",
        "importPath": "token",
        "description": "token",
        "isExtraImport": true,
        "detail": "token",
        "documentation": {
            "value": "\n```python\nimport token\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EXACT_TOKEN_TYPES",
        "importPath": "token",
        "description": "token",
        "isExtraImport": true,
        "detail": "token",
        "documentation": {
            "value": "\n```python\nimport token\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeakSet",
        "importPath": "_weakrefset",
        "description": "_weakrefset",
        "isExtraImport": true,
        "detail": "_weakrefset",
        "documentation": {
            "value": "\n```python\nimport _weakrefset\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_IterationGuard",
        "importPath": "_weakrefset",
        "description": "_weakrefset",
        "isExtraImport": true,
        "detail": "_weakrefset",
        "documentation": {
            "value": "\n```python\nimport _weakrefset\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "class Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400\n        data = request.get_json()\n        item = {\"name\":name, \"price\":data[\"price\"]}",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import Item\n```\n\n```python\n\n\n```\n\n```python\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400\n        data = request.get_json()\n        item = {\"name\":name, \"price\":data[\"price\"]}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ItemList",
        "kind": 6,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "class ItemList(Resource):\n    def get(self):\n        return {\"items\":items}\nclass User(object):\n    def __init__(self,_id, username, password):\n        self._id = id\n        self.username = username\n        self.password = password\n    def __str__(self):\n        return \"User(id='%s')\" % self._id",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import ItemList\n```\n\n```python\n\n\n```\n\n```python\nclass ItemList(Resource):\n    def get(self):\n        return {\"items\":items}\nclass User(object):\n    def __init__(self,_id, username, password):\n        self._id = id\n        self.username = username\n        self.password = password\n    def __str__(self):\n        return \"User(id='%s')\" % self._id\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "class User(object):\n    def __init__(self,_id, username, password):\n        self._id = id\n        self.username = username\n        self.password = password\n    def __str__(self):\n        return \"User(id='%s')\" % self._id\nusers = [\n    User(1,\"bob\",\"asdf\")\n]",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import User\n```\n\n```python\n\n\n```\n\n```python\nclass User(object):\n    def __init__(self,_id, username, password):\n        self._id = id\n        self.username = username\n        self.password = password\n    def __str__(self):\n        return \"User(id='%s')\" % self._id\nusers = [\n    User(1,\"bob\",\"asdf\")\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "authenticate",
        "kind": 2,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "def authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')\n@jwt_required()",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import authenticate\n```\n\n```python\n\n\n```\n\n```python\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')\n@jwt_required()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "identity",
        "kind": 2,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "def identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')\n@jwt_required()\ndef protected():\n    return '%s' % current_identity\njwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import identity\n```\n\n```python\n\n\n```\n\n```python\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')\n@jwt_required()\ndef protected():\n    return '%s' % current_identity\njwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "protected",
        "kind": 2,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "def protected():\n    return '%s' % current_identity\njwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")\napp.run(port=5000,debug=True)",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import protected\n```\n\n```python\n\n\n```\n\n```python\ndef protected():\n    return '%s' % current_identity\njwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")\napp.run(port=5000,debug=True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SECRET_KEY'] = 'super-secret'\napi = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import app\n```\n\n```python\n\n\n```\n\n```python\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'super-secret'\napi = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "app.config['SECRET_KEY'] = 'super-secret'\napi = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import app.config['SECRET_KEY']\n```\n\n```python\n\n\n```\n\n```python\napp.config['SECRET_KEY'] = 'super-secret'\napi = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "api = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import api\n```\n\n```python\n\n\n```\n\n```python\napi = Api(app)\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "items = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400\n        data = request.get_json()",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import items\n```\n\n```python\n\n\n```\n\n```python\nitems = []\nclass Item(Resource):\n    @jwt_required\n    def get(self, name):\n        item = next(filter(lambda x:x[\"name\"] == name, items), None)\n        return {\"item\":item}, 200 if item else 404 #200 if item is not None else 404\n    def post(self,name):\n        if next(filter(lambda x:x[\"name\"] == name,items),None):\n            return {\"message\":\"An item with name '{}' already existed\".format(name)},400\n        data = request.get_json()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "users = [\n    User(1,\"bob\",\"asdf\")\n]\nusername_mapping = {u.username:u for u in users}\nuserid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import users\n```\n\n```python\n\n\n```\n\n```python\nusers = [\n    User(1,\"bob\",\"asdf\")\n]\nusername_mapping = {u.username:u for u in users}\nuserid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "username_mapping",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "username_mapping = {u.username:u for u in users}\nuserid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import username_mapping\n```\n\n```python\n\n\n```\n\n```python\nusername_mapping = {u.username:u for u in users}\nuserid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "userid_mapping",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "userid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import userid_mapping\n```\n\n```python\n\n\n```\n\n```python\nuserid_mapping = {u._id:u for u in users}\ndef authenticate(username, password):\n    print(username_mapping)\n    user = userid_mapping.get(username,None)\n    if user and safe_str_cmp(user.password('utf-8'),password.encode('utf-8')):\n        return user\ndef identity(payload):\n    user_id = payload['identity']\n    return userid_mapping.get(user_id, None)\n@app.route('/protected')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "code.app",
        "description": "code.app",
        "peekOfCode": "jwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")\napp.run(port=5000,debug=True)",
        "detail": "code.app",
        "documentation": {
            "value": "\n```python\nfrom code.app import jwt\n```\n\n```python\n\n\n```\n\n```python\njwt = JWT(app,authenticate, identity)\napi.add_resource(Item, \"/item/<string:name>\")\napi.add_resource(ItemList,\"/items\")\napp.run(port=5000,debug=True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(os.path.abspath(__file__))\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nbase = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import bin_dir\n```\n\n```python\n\n\n```\n\n```python\nbin_dir = os.path.dirname(os.path.abspath(__file__))\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nbase = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nbase = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import os.environ[\"PATH\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nbase = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import base\n```\n\n```python\n\n\n```\n\n```python\nbase = os.path.dirname(bin_dir)\n# virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import os.environ[\"VIRTUAL_ENV\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"VIRTUAL_ENV\"] = base\n# add the virtual environments site-package to the host python import mechanism\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "IS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"\n    if IS_WIN:\n        site_packages = os.path.join(base, \"Lib\", \"site-packages\")",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import IS_PYPY\n```\n\n```python\n\n\n```\n\n```python\nIS_PYPY = hasattr(sys, \"pypy_version_info\")\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"\n    if IS_WIN:\n        site_packages = os.path.join(base, \"Lib\", \"site-packages\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IS_JYTHON",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "IS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"\n    if IS_WIN:\n        site_packages = os.path.join(base, \"Lib\", \"site-packages\")\n    else:",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import IS_JYTHON\n```\n\n```python\n\n\n```\n\n```python\nIS_JYTHON = sys.platform.startswith(\"java\")\nif IS_JYTHON:\n    site_packages = os.path.join(base, \"Lib\", \"site-packages\")\nelif IS_PYPY:\n    site_packages = os.path.join(base, \"site-packages\")\nelse:\n    IS_WIN = sys.platform == \"win32\"\n    if IS_WIN:\n        site_packages = os.path.join(base, \"Lib\", \"site-packages\")\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prev",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev = set(sys.path)\nsite.addsitedir(site_packages)\nsys.real_prefix = sys.prefix\nsys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import prev\n```\n\n```python\n\n\n```\n\n```python\nprev = set(sys.path)\nsite.addsitedir(site_packages)\nsys.real_prefix = sys.prefix\nsys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.real_prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.real_prefix = sys.prefix\nsys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.prefix = base\n# Move the added items to the front of the path, in place\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "new",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "new = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import new\n```\n\n```python\n\n\n```\n\n```python\nnew = list(sys.path)\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.path[:]\n```\n\n```python\n\n\n```\n\n```python\nsys.path[:] = [i for i in new if i not in prev] + [i for i in new if i in prev]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_OrderedDictKeysView",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class _OrderedDictKeysView(_collections_abc.KeysView):\n    def __reversed__(self):\n        yield from reversed(self._mapping)\nclass _OrderedDictItemsView(_collections_abc.ItemsView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield (key, self._mapping[key])\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import _OrderedDictKeysView\n```\n\n```python\n\n\n```\n\n```python\nclass _OrderedDictKeysView(_collections_abc.KeysView):\n    def __reversed__(self):\n        yield from reversed(self._mapping)\nclass _OrderedDictItemsView(_collections_abc.ItemsView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield (key, self._mapping[key])\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_OrderedDictItemsView",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class _OrderedDictItemsView(_collections_abc.ItemsView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield (key, self._mapping[key])\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield self._mapping[key]\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import _OrderedDictItemsView\n```\n\n```python\n\n\n```\n\n```python\nclass _OrderedDictItemsView(_collections_abc.ItemsView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield (key, self._mapping[key])\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield self._mapping[key]\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_OrderedDictValuesView",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield self._mapping[key]\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import _OrderedDictValuesView\n```\n\n```python\n\n\n```\n\n```python\nclass _OrderedDictValuesView(_collections_abc.ValuesView):\n    def __reversed__(self):\n        for key in reversed(self._mapping):\n            yield self._mapping[key]\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Link",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import _Link\n```\n\n```python\n\n\n```\n\n```python\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedDict",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # The sentinel is in self.__hardroot with a weakref proxy in self.__root.",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import OrderedDict\n```\n\n```python\n\n\n```\n\n```python\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as regular dictionaries.\n    # The internal self.__map dict maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # The sentinel is in self.__hardroot with a weakref proxy in self.__root.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Counter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class Counter(dict):\n    '''Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import Counter\n```\n\n```python\n\n\n```\n\n```python\nclass Counter(dict):\n    '''Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ChainMap",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class ChainMap(_collections_abc.MutableMapping):\n    ''' A ChainMap groups multiple dicts (or other mappings) together\n    to create a single, updateable view.\n    The underlying mappings are stored in a list.  That list is public and can\n    be accessed or updated using the *maps* attribute.  There is no other\n    state.\n    Lookups search the underlying mappings successively until a key is found.\n    In contrast, writes, updates, and deletions only operate on the first\n    mapping.\n    '''",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import ChainMap\n```\n\n```python\n\n\n```\n\n```python\nclass ChainMap(_collections_abc.MutableMapping):\n    ''' A ChainMap groups multiple dicts (or other mappings) together\n    to create a single, updateable view.\n    The underlying mappings are stored in a list.  That list is public and can\n    be accessed or updated using the *maps* attribute.  There is no other\n    state.\n    Lookups search the underlying mappings successively until a key is found.\n    In contrast, writes, updates, and deletions only operate on the first\n    mapping.\n    '''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserDict",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class UserDict(_collections_abc.MutableMapping):\n    # Start by filling-out the abstract methods\n    def __init__(*args, **kwargs):\n        if not args:\n            raise TypeError(\"descriptor '__init__' of 'UserDict' object \"\n                            \"needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        if args:",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import UserDict\n```\n\n```python\n\n\n```\n\n```python\nclass UserDict(_collections_abc.MutableMapping):\n    # Start by filling-out the abstract methods\n    def __init__(*args, **kwargs):\n        if not args:\n            raise TypeError(\"descriptor '__init__' of 'UserDict' object \"\n                            \"needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        if args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserList",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class UserList(_collections_abc.MutableSequence):\n    \"\"\"A more or less complete user-defined wrapper around list objects.\"\"\"\n    def __init__(self, initlist=None):\n        self.data = []\n        if initlist is not None:\n            # XXX should this accept an arbitrary sequence?\n            if type(initlist) == type(self.data):\n                self.data[:] = initlist\n            elif isinstance(initlist, UserList):\n                self.data[:] = initlist.data[:]",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import UserList\n```\n\n```python\n\n\n```\n\n```python\nclass UserList(_collections_abc.MutableSequence):\n    \"\"\"A more or less complete user-defined wrapper around list objects.\"\"\"\n    def __init__(self, initlist=None):\n        self.data = []\n        if initlist is not None:\n            # XXX should this accept an arbitrary sequence?\n            if type(initlist) == type(self.data):\n                self.data[:] = initlist\n            elif isinstance(initlist, UserList):\n                self.data[:] = initlist.data[:]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserString",
        "kind": 6,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "class UserString(_collections_abc.Sequence):\n    def __init__(self, seq):\n        if isinstance(seq, str):\n            self.data = seq\n        elif isinstance(seq, UserString):\n            self.data = seq.data[:]\n        else:\n            self.data = str(seq)\n    def __str__(self): return str(self.data)\n    def __repr__(self): return repr(self.data)",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import UserString\n```\n\n```python\n\n\n```\n\n```python\nclass UserString(_collections_abc.Sequence):\n    def __init__(self, seq):\n        if isinstance(seq, str):\n            self.data = seq\n        elif isinstance(seq, UserString):\n            self.data = seq.data[:]\n        else:\n            self.data = str(seq)\n    def __str__(self): return str(self.data)\n    def __repr__(self): return repr(self.data)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "namedtuple",
        "kind": 2,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "def namedtuple(typename, field_names, *, rename=False, defaults=None, module=None):\n    \"\"\"Returns a new subclass of tuple with named fields.\n    >>> Point = namedtuple('Point', ['x', 'y'])\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import namedtuple\n```\n\n```python\n\n\n```\n\n```python\ndef namedtuple(typename, field_names, *, rename=False, defaults=None, module=None):\n    \"\"\"Returns a new subclass of tuple with named fields.\n    >>> Point = namedtuple('Point', ['x', 'y'])\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.collections.__init__",
        "description": "venv.lib.python3.8.collections.__init__",
        "peekOfCode": "__all__ = ['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList',\n            'UserString', 'Counter', 'OrderedDict', 'ChainMap']\nimport _collections_abc\nfrom operator import itemgetter as _itemgetter, eq as _eq\nfrom keyword import iskeyword as _iskeyword\nimport sys as _sys\nimport heapq as _heapq\nfrom _weakref import proxy as _proxy\nfrom itertools import repeat as _repeat, chain as _chain, starmap as _starmap\nfrom reprlib import recursive_repr as _recursive_repr",
        "detail": "venv.lib.python3.8.collections.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.collections.__init__ import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList',\n            'UserString', 'Counter', 'OrderedDict', 'ChainMap']\nimport _collections_abc\nfrom operator import itemgetter as _itemgetter, eq as _eq\nfrom keyword import iskeyword as _iskeyword\nimport sys as _sys\nimport heapq as _heapq\nfrom _weakref import proxy as _proxy\nfrom itertools import repeat as _repeat, chain as _chain, starmap as _starmap\nfrom reprlib import recursive_repr as _recursive_repr\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exit_with_usage",
        "kind": 2,
        "importPath": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "description": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "peekOfCode": "def exit_with_usage(code=1):\n    print(\"Usage: {0} [{1}]\".format(\n        sys.argv[0], '|'.join('--'+opt for opt in valid_opts)), file=sys.stderr)\n    sys.exit(code)\ntry:\n    opts, args = getopt.getopt(sys.argv[1:], '', valid_opts)\nexcept getopt.error:\n    exit_with_usage()\nif not opts:\n    exit_with_usage()",
        "detail": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.config-3.8-darwin.python-config import exit_with_usage\n```\n\n```python\n\n\n```\n\n```python\ndef exit_with_usage(code=1):\n    print(\"Usage: {0} [{1}]\".format(\n        sys.argv[0], '|'.join('--'+opt for opt in valid_opts)), file=sys.stderr)\n    sys.exit(code)\ntry:\n    opts, args = getopt.getopt(sys.argv[1:], '', valid_opts)\nexcept getopt.error:\n    exit_with_usage()\nif not opts:\n    exit_with_usage()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "valid_opts",
        "kind": 5,
        "importPath": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "description": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "peekOfCode": "valid_opts = ['prefix', 'exec-prefix', 'includes', 'libs', 'cflags',\n              'ldflags', 'extension-suffix', 'help', 'abiflags', 'configdir',\n              'embed']\ndef exit_with_usage(code=1):\n    print(\"Usage: {0} [{1}]\".format(\n        sys.argv[0], '|'.join('--'+opt for opt in valid_opts)), file=sys.stderr)\n    sys.exit(code)\ntry:\n    opts, args = getopt.getopt(sys.argv[1:], '', valid_opts)\nexcept getopt.error:",
        "detail": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.config-3.8-darwin.python-config import valid_opts\n```\n\n```python\n\n\n```\n\n```python\nvalid_opts = ['prefix', 'exec-prefix', 'includes', 'libs', 'cflags',\n              'ldflags', 'extension-suffix', 'help', 'abiflags', 'configdir',\n              'embed']\ndef exit_with_usage(code=1):\n    print(\"Usage: {0} [{1}]\".format(\n        sys.argv[0], '|'.join('--'+opt for opt in valid_opts)), file=sys.stderr)\n    sys.exit(code)\ntry:\n    opts, args = getopt.getopt(sys.argv[1:], '', valid_opts)\nexcept getopt.error:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pyver",
        "kind": 5,
        "importPath": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "description": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "peekOfCode": "pyver = sysconfig.get_config_var('VERSION')\ngetvar = sysconfig.get_config_var\nopt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))",
        "detail": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.config-3.8-darwin.python-config import pyver\n```\n\n```python\n\n\n```\n\n```python\npyver = sysconfig.get_config_var('VERSION')\ngetvar = sysconfig.get_config_var\nopt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getvar",
        "kind": 5,
        "importPath": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "description": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "peekOfCode": "getvar = sysconfig.get_config_var\nopt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))\n    elif opt in ('--includes', '--cflags'):",
        "detail": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.config-3.8-darwin.python-config import getvar\n```\n\n```python\n\n\n```\n\n```python\ngetvar = sysconfig.get_config_var\nopt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))\n    elif opt in ('--includes', '--cflags'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "opt_flags",
        "kind": 5,
        "importPath": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "description": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "peekOfCode": "opt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))\n    elif opt in ('--includes', '--cflags'):\n        flags = ['-I' + sysconfig.get_path('include'),",
        "detail": "venv.lib.python3.8.config-3.8-darwin.python-config",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.config-3.8-darwin.python-config import opt_flags\n```\n\n```python\n\n\n```\n\n```python\nopt_flags = [flag for (flag, val) in opts]\nif '--help' in opt_flags:\n    exit_with_usage(code=0)\nfor opt in opt_flags:\n    if opt == '--prefix':\n        print(sysconfig.get_config_var('prefix'))\n    elif opt == '--exec-prefix':\n        print(sysconfig.get_config_var('exec_prefix'))\n    elif opt in ('--includes', '--cflags'):\n        flags = ['-I' + sysconfig.get_path('include'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "find_config_files",
        "kind": 2,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "def find_config_files(self):\n    found = old_find_config_files(self)\n    if os.name == \"posix\":\n        user_filename = \".pydistutils.cfg\"\n    else:\n        user_filename = \"pydistutils.cfg\"\n    user_filename = os.path.join(sys.prefix, user_filename)\n    if os.path.isfile(user_filename):\n        for item in list(found):\n            if item.endswith(\"pydistutils.cfg\"):",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import find_config_files\n```\n\n```python\n\n\n```\n\n```python\ndef find_config_files(self):\n    found = old_find_config_files(self)\n    if os.name == \"posix\":\n        user_filename = \".pydistutils.cfg\"\n    else:\n        user_filename = \"pydistutils.cfg\"\n    user_filename = os.path.join(sys.prefix, user_filename)\n    if os.path.isfile(user_filename):\n        for item in list(found):\n            if item.endswith(\"pydistutils.cfg\"):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_python_inc",
        "kind": 2,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "def sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_python_inc\n```\n\n```python\n\n\n```\n\n```python\ndef sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_python_lib",
        "kind": 2,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "def sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_python_lib\n```\n\n```python\n\n\n```\n\n```python\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_config_vars",
        "kind": 2,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "def sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list\n    return real_vars\nsysconfig_get_config_vars.__doc__ = old_get_config_vars.__doc__",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_config_vars\n```\n\n```python\n\n\n```\n\n```python\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list\n    return real_vars\nsysconfig_get_config_vars.__doc__ = old_get_config_vars.__doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dirname",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "dirname = os.path.dirname\ndistutils_path = os.path.join(os.path.dirname(opcode.__file__), \"distutils\")\nif os.path.normpath(distutils_path) == os.path.dirname(os.path.normpath(__file__)):\n    warnings.warn(\"The virtualenv distutils package at %s appears to be in the same location as the system distutils?\")\nelse:\n    __path__.insert(0, distutils_path)  # noqa: F821\n    if sys.version_info < (3, 4):\n        import imp\n        real_distutils = imp.load_module(\"_virtualenv_distutils\", None, distutils_path, (\"\", \"\", imp.PKG_DIRECTORY))\n    else:",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import dirname\n```\n\n```python\n\n\n```\n\n```python\ndirname = os.path.dirname\ndistutils_path = os.path.join(os.path.dirname(opcode.__file__), \"distutils\")\nif os.path.normpath(distutils_path) == os.path.dirname(os.path.normpath(__file__)):\n    warnings.warn(\"The virtualenv distutils package at %s appears to be in the same location as the system distutils?\")\nelse:\n    __path__.insert(0, distutils_path)  # noqa: F821\n    if sys.version_info < (3, 4):\n        import imp\n        real_distutils = imp.load_module(\"_virtualenv_distutils\", None, distutils_path, (\"\", \"\", imp.PKG_DIRECTORY))\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "distutils_path",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "distutils_path = os.path.join(os.path.dirname(opcode.__file__), \"distutils\")\nif os.path.normpath(distutils_path) == os.path.dirname(os.path.normpath(__file__)):\n    warnings.warn(\"The virtualenv distutils package at %s appears to be in the same location as the system distutils?\")\nelse:\n    __path__.insert(0, distutils_path)  # noqa: F821\n    if sys.version_info < (3, 4):\n        import imp\n        real_distutils = imp.load_module(\"_virtualenv_distutils\", None, distutils_path, (\"\", \"\", imp.PKG_DIRECTORY))\n    else:\n        import importlib.machinery",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import distutils_path\n```\n\n```python\n\n\n```\n\n```python\ndistutils_path = os.path.join(os.path.dirname(opcode.__file__), \"distutils\")\nif os.path.normpath(distutils_path) == os.path.dirname(os.path.normpath(__file__)):\n    warnings.warn(\"The virtualenv distutils package at %s appears to be in the same location as the system distutils?\")\nelse:\n    __path__.insert(0, distutils_path)  # noqa: F821\n    if sys.version_info < (3, 4):\n        import imp\n        real_distutils = imp.load_module(\"_virtualenv_distutils\", None, distutils_path, (\"\", \"\", imp.PKG_DIRECTORY))\n    else:\n        import importlib.machinery\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "old_find_config_files",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "old_find_config_files = dist.Distribution.find_config_files\ndef find_config_files(self):\n    found = old_find_config_files(self)\n    if os.name == \"posix\":\n        user_filename = \".pydistutils.cfg\"\n    else:\n        user_filename = \"pydistutils.cfg\"\n    user_filename = os.path.join(sys.prefix, user_filename)\n    if os.path.isfile(user_filename):\n        for item in list(found):",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import old_find_config_files\n```\n\n```python\n\n\n```\n\n```python\nold_find_config_files = dist.Distribution.find_config_files\ndef find_config_files(self):\n    found = old_find_config_files(self)\n    if os.name == \"posix\":\n        user_filename = \".pydistutils.cfg\"\n    else:\n        user_filename = \"pydistutils.cfg\"\n    user_filename = os.path.join(sys.prefix, user_filename)\n    if os.path.isfile(user_filename):\n        for item in list(found):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dist.Distribution.find_config_files",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "dist.Distribution.find_config_files = find_config_files\n# distutils.sysconfig patches:\nold_get_python_inc = sysconfig.get_python_inc\ndef sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import dist.Distribution.find_config_files\n```\n\n```python\n\n\n```\n\n```python\ndist.Distribution.find_config_files = find_config_files\n# distutils.sysconfig patches:\nold_get_python_inc = sysconfig.get_python_inc\ndef sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "old_get_python_inc",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "old_get_python_inc = sysconfig.get_python_inc\ndef sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import old_get_python_inc\n```\n\n```python\n\n\n```\n\n```python\nold_get_python_inc = sysconfig.get_python_inc\ndef sysconfig_get_python_inc(plat_specific=0, prefix=None):\n    if prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_inc(plat_specific, prefix)\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_python_inc.__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_python_inc.__doc__\n```\n\n```python\n\n\n```\n\n```python\nsysconfig_get_python_inc.__doc__ = old_get_python_inc.__doc__\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig.get_python_inc",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig.get_python_inc\n```\n\n```python\n\n\n```\n\n```python\nsysconfig.get_python_inc = sysconfig_get_python_inc\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "old_get_python_lib",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "old_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import old_get_python_lib\n```\n\n```python\n\n\n```\n\n```python\nold_get_python_lib = sysconfig.get_python_lib\ndef sysconfig_get_python_lib(plat_specific=0, standard_lib=0, prefix=None):\n    if standard_lib and prefix is None:\n        prefix = sys.real_prefix\n    return old_get_python_lib(plat_specific, standard_lib, prefix)\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_python_lib.__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_python_lib.__doc__\n```\n\n```python\n\n\n```\n\n```python\nsysconfig_get_python_lib.__doc__ = old_get_python_lib.__doc__\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig.get_python_lib",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig.get_python_lib\n```\n\n```python\n\n\n```\n\n```python\nsysconfig.get_python_lib = sysconfig_get_python_lib\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "old_get_config_vars",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "old_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list\n    return real_vars",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import old_get_config_vars\n```\n\n```python\n\n\n```\n\n```python\nold_get_config_vars = sysconfig.get_config_vars\ndef sysconfig_get_config_vars(*args):\n    real_vars = old_get_config_vars(*args)\n    if sys.platform == \"win32\":\n        lib_dir = os.path.join(sys.real_prefix, \"libs\")\n        if isinstance(real_vars, dict) and \"LIBDIR\" not in real_vars:\n            real_vars[\"LIBDIR\"] = lib_dir  # asked for all\n        elif isinstance(real_vars, list) and \"LIBDIR\" in args:\n            real_vars = real_vars + [lib_dir]  # asked for list\n    return real_vars\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig_get_config_vars.__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig_get_config_vars.__doc__ = old_get_config_vars.__doc__\nsysconfig.get_config_vars = sysconfig_get_config_vars",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig_get_config_vars.__doc__\n```\n\n```python\n\n\n```\n\n```python\nsysconfig_get_config_vars.__doc__ = old_get_config_vars.__doc__\nsysconfig.get_config_vars = sysconfig_get_config_vars\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sysconfig.get_config_vars",
        "kind": 5,
        "importPath": "venv.lib.python3.8.distutils.__init__",
        "description": "venv.lib.python3.8.distutils.__init__",
        "peekOfCode": "sysconfig.get_config_vars = sysconfig_get_config_vars",
        "detail": "venv.lib.python3.8.distutils.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.distutils.__init__ import sysconfig.get_config_vars\n```\n\n```python\n\n\n```\n\n```python\nsysconfig.get_config_vars = sysconfig_get_config_vars\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CodecRegistryError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "class CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.\n    \"\"\"",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import CodecRegistryError\n```\n\n```python\n\n\n```\n\n```python\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normalize_encoding",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "def normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.\n    \"\"\"\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, \"ascii\")",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import normalize_encoding\n```\n\n```python\n\n\n```\n\n```python\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.\n    \"\"\"\n    if isinstance(encoding, bytes):\n        encoding = str(encoding, \"ascii\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "search_function",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "def search_function(encoding):\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import search_function\n```\n\n```python\n\n\n```\n\n```python\ndef search_function(encoding):\n    # Cache lookup\n    entry = _cache.get(encoding, _unknown)\n    if entry is not _unknown:\n        return entry\n    # Import the module:\n    #\n    # First try to find an alias for the normalized encoding\n    # name and lookup the module using the aliased name, then try to\n    # lookup the module using the standard import scheme, i.e. first\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_cache",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "_cache = {}\n_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import _cache\n```\n\n```python\n\n\n```\n\n```python\n_cache = {}\n_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_unknown",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import _unknown\n```\n\n```python\n\n\n```\n\n```python\n_unknown = '--unknown--'\n_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_import_tail",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import _import_tail\n```\n\n```python\n\n\n```\n\n```python\n_import_tail = ['*']\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_aliases",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.__init__",
        "description": "venv.lib.python3.8.encodings.__init__",
        "peekOfCode": "_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.",
        "detail": "venv.lib.python3.8.encodings.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.__init__ import _aliases\n```\n\n```python\n\n\n```\n\n```python\n_aliases = aliases.aliases\nclass CodecRegistryError(LookupError, SystemError):\n    pass\ndef normalize_encoding(encoding):\n    \"\"\" Normalize an encoding name.\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n        Note that encoding names should be ASCII only.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "aliases",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.aliases",
        "description": "venv.lib.python3.8.encodings.aliases",
        "peekOfCode": "aliases = {\n    # Please keep this list sorted alphabetically by value !\n    # ascii codec\n    '646'                : 'ascii',\n    'ansi_x3.4_1968'     : 'ascii',\n    'ansi_x3_4_1968'     : 'ascii', # some email headers use this non-standard name\n    'ansi_x3.4_1986'     : 'ascii',\n    'cp367'              : 'ascii',\n    'csascii'            : 'ascii',\n    'ibm367'             : 'ascii',",
        "detail": "venv.lib.python3.8.encodings.aliases",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.aliases import aliases\n```\n\n```python\n\n\n```\n\n```python\naliases = {\n    # Please keep this list sorted alphabetically by value !\n    # ascii codec\n    '646'                : 'ascii',\n    'ansi_x3.4_1968'     : 'ascii',\n    'ansi_x3_4_1968'     : 'ascii', # some email headers use this non-standard name\n    'ansi_x3.4_1986'     : 'ascii',\n    'cp367'              : 'ascii',\n    'csascii'            : 'ascii',\n    'ibm367'             : 'ascii',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamConverter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "class StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import StreamConverter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.ascii",
        "description": "venv.lib.python3.8.encodings.ascii",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.ascii",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ascii import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base64_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "def base64_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.encodebytes(input), len(input))\ndef base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import base64_encode\n```\n\n```python\n\n\n```\n\n```python\ndef base64_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.encodebytes(input), len(input))\ndef base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base64_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "def base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import base64_decode\n```\n\n```python\n\n\n```\n\n```python\ndef base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.base64_codec",
        "description": "venv.lib.python3.8.encodings.base64_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.base64_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.base64_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.big5",
        "description": "venv.lib.python3.8.encodings.big5",
        "peekOfCode": "codec = _codecs_tw.getcodec('big5')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.big5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_tw.getcodec('big5')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.big5hkscs",
        "description": "venv.lib.python3.8.encodings.big5hkscs",
        "peekOfCode": "codec = _codecs_hk.getcodec('big5hkscs')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.big5hkscs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.big5hkscs import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_hk.getcodec('big5hkscs')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = bz2.BZ2Decompressor()\n    def decode(self, input, final=False):\n        try:\n            return self.decompressobj.decompress(input)\n        except EOFError:\n            return ''",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = bz2.BZ2Decompressor()\n    def decode(self, input, final=False):\n        try:\n            return self.decompressobj.decompress(input)\n        except EOFError:\n            return ''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bz2_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "def bz2_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.compress(input), len(input))\ndef bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import bz2_encode\n```\n\n```python\n\n\n```\n\n```python\ndef bz2_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.compress(input), len(input))\ndef bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bz2_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "def bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import bz2_decode\n```\n\n```python\n\n\n```\n\n```python\ndef bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.bz2_codec",
        "description": "venv.lib.python3.8.encodings.bz2_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.bz2_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.bz2_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.charmap_encode\n    decode = codecs.charmap_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.charmap_encode\n    decode = codecs.charmap_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, self.mapping)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, self.mapping)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, self.mapping)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, self.mapping)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping\n    def encode(self,input,errors='strict'):\n        return Codec.encode(input,errors,self.mapping)\nclass StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping\n    def encode(self,input,errors='strict'):\n        return Codec.encode(input,errors,self.mapping)\nclass StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping\n    def decode(self,input,errors='strict'):\n        return Codec.decode(input,errors,self.mapping)\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='charmap',",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping\n    def decode(self,input,errors='strict'):\n        return Codec.decode(input,errors,self.mapping)\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='charmap',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.charmap",
        "description": "venv.lib.python3.8.encodings.charmap",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='charmap',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.charmap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.charmap import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='charmap',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp037",
        "description": "venv.lib.python3.8.encodings.cp037",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "venv.lib.python3.8.encodings.cp037",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp037 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1006",
        "description": "venv.lib.python3.8.encodings.cp1006",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1006",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1006 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1026",
        "description": "venv.lib.python3.8.encodings.cp1026",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "venv.lib.python3.8.encodings.cp1026",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1026 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1125",
        "description": "venv.lib.python3.8.encodings.cp1125",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1125",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1125 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1140",
        "description": "venv.lib.python3.8.encodings.cp1140",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "venv.lib.python3.8.encodings.cp1140",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1140 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1250",
        "description": "venv.lib.python3.8.encodings.cp1250",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1250",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1250 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1251",
        "description": "venv.lib.python3.8.encodings.cp1251",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1251",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1251 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1252",
        "description": "venv.lib.python3.8.encodings.cp1252",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1252",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1252 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1253",
        "description": "venv.lib.python3.8.encodings.cp1253",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1253",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1253 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1254",
        "description": "venv.lib.python3.8.encodings.cp1254",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1254",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1254 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1255",
        "description": "venv.lib.python3.8.encodings.cp1255",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1255",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1255 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1256",
        "description": "venv.lib.python3.8.encodings.cp1256",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1256",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1256 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1257",
        "description": "venv.lib.python3.8.encodings.cp1257",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1257",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1257 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp1258",
        "description": "venv.lib.python3.8.encodings.cp1258",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp1258",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp1258 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp273",
        "description": "venv.lib.python3.8.encodings.cp273",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> NULL (NUL)\n    '\\x01'      #  0x01 -> START OF HEADING (SOH)\n    '\\x02'      #  0x02 -> START OF TEXT (STX)\n    '\\x03'      #  0x03 -> END OF TEXT (ETX)\n    '\\x9c'      #  0x04 -> STRING TERMINATOR (ST)\n    '\\t'        #  0x05 -> CHARACTER TABULATION (HT)\n    '\\x86'      #  0x06 -> START OF SELECTED AREA (SSA)\n    '\\x7f'      #  0x07 -> DELETE (DEL)\n    '\\x97'      #  0x08 -> END OF GUARDED AREA (EPA)",
        "detail": "venv.lib.python3.8.encodings.cp273",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp273 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'      #  0x00 -> NULL (NUL)\n    '\\x01'      #  0x01 -> START OF HEADING (SOH)\n    '\\x02'      #  0x02 -> START OF TEXT (STX)\n    '\\x03'      #  0x03 -> END OF TEXT (ETX)\n    '\\x9c'      #  0x04 -> STRING TERMINATOR (ST)\n    '\\t'        #  0x05 -> CHARACTER TABULATION (HT)\n    '\\x86'      #  0x06 -> START OF SELECTED AREA (SSA)\n    '\\x7f'      #  0x07 -> DELETE (DEL)\n    '\\x97'      #  0x08 -> END OF GUARDED AREA (EPA)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp424",
        "description": "venv.lib.python3.8.encodings.cp424",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> SELECT\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> REQUIRED NEW LINE\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> GRAPHIC ESCAPE",
        "detail": "venv.lib.python3.8.encodings.cp424",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp424 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> SELECT\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> REQUIRED NEW LINE\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> GRAPHIC ESCAPE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp437",
        "description": "venv.lib.python3.8.encodings.cp437",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp437",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp437 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp500",
        "description": "venv.lib.python3.8.encodings.cp500",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "venv.lib.python3.8.encodings.cp500",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp500 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp720",
        "description": "venv.lib.python3.8.encodings.cp720",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> CONTROL CHARACTER\n    '\\x01'      #  0x01 -> CONTROL CHARACTER\n    '\\x02'      #  0x02 -> CONTROL CHARACTER\n    '\\x03'      #  0x03 -> CONTROL CHARACTER\n    '\\x04'      #  0x04 -> CONTROL CHARACTER\n    '\\x05'      #  0x05 -> CONTROL CHARACTER\n    '\\x06'      #  0x06 -> CONTROL CHARACTER\n    '\\x07'      #  0x07 -> CONTROL CHARACTER\n    '\\x08'      #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.cp720",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp720 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'      #  0x00 -> CONTROL CHARACTER\n    '\\x01'      #  0x01 -> CONTROL CHARACTER\n    '\\x02'      #  0x02 -> CONTROL CHARACTER\n    '\\x03'      #  0x03 -> CONTROL CHARACTER\n    '\\x04'      #  0x04 -> CONTROL CHARACTER\n    '\\x05'      #  0x05 -> CONTROL CHARACTER\n    '\\x06'      #  0x06 -> CONTROL CHARACTER\n    '\\x07'      #  0x07 -> CONTROL CHARACTER\n    '\\x08'      #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0391,     #  GREEK CAPITAL LETTER ALPHA\n    0x0081: 0x0392,     #  GREEK CAPITAL LETTER BETA\n    0x0082: 0x0393,     #  GREEK CAPITAL LETTER GAMMA\n    0x0083: 0x0394,     #  GREEK CAPITAL LETTER DELTA\n    0x0084: 0x0395,     #  GREEK CAPITAL LETTER EPSILON\n    0x0085: 0x0396,     #  GREEK CAPITAL LETTER ZETA\n    0x0086: 0x0397,     #  GREEK CAPITAL LETTER ETA\n    0x0087: 0x0398,     #  GREEK CAPITAL LETTER THETA",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0391,     #  GREEK CAPITAL LETTER ALPHA\n    0x0081: 0x0392,     #  GREEK CAPITAL LETTER BETA\n    0x0082: 0x0393,     #  GREEK CAPITAL LETTER GAMMA\n    0x0083: 0x0394,     #  GREEK CAPITAL LETTER DELTA\n    0x0084: 0x0395,     #  GREEK CAPITAL LETTER EPSILON\n    0x0085: 0x0396,     #  GREEK CAPITAL LETTER ZETA\n    0x0086: 0x0397,     #  GREEK CAPITAL LETTER ETA\n    0x0087: 0x0398,     #  GREEK CAPITAL LETTER THETA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp737",
        "description": "venv.lib.python3.8.encodings.cp737",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp737",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp737 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0106,     #  LATIN CAPITAL LETTER C WITH ACUTE\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x0101,     #  LATIN SMALL LETTER A WITH MACRON\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x0123,     #  LATIN SMALL LETTER G WITH CEDILLA\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0106,     #  LATIN CAPITAL LETTER C WITH ACUTE\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x0101,     #  LATIN SMALL LETTER A WITH MACRON\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x0123,     #  LATIN SMALL LETTER G WITH CEDILLA\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp775",
        "description": "venv.lib.python3.8.encodings.cp775",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp775",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp775 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp850",
        "description": "venv.lib.python3.8.encodings.cp850",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp850",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp850 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x016f,     #  LATIN SMALL LETTER U WITH RING ABOVE\n    0x0086: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x016f,     #  LATIN SMALL LETTER U WITH RING ABOVE\n    0x0086: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp852",
        "description": "venv.lib.python3.8.encodings.cp852",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp852",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp852 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0452,     #  CYRILLIC SMALL LETTER DJE\n    0x0081: 0x0402,     #  CYRILLIC CAPITAL LETTER DJE\n    0x0082: 0x0453,     #  CYRILLIC SMALL LETTER GJE\n    0x0083: 0x0403,     #  CYRILLIC CAPITAL LETTER GJE\n    0x0084: 0x0451,     #  CYRILLIC SMALL LETTER IO\n    0x0085: 0x0401,     #  CYRILLIC CAPITAL LETTER IO\n    0x0086: 0x0454,     #  CYRILLIC SMALL LETTER UKRAINIAN IE\n    0x0087: 0x0404,     #  CYRILLIC CAPITAL LETTER UKRAINIAN IE",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0452,     #  CYRILLIC SMALL LETTER DJE\n    0x0081: 0x0402,     #  CYRILLIC CAPITAL LETTER DJE\n    0x0082: 0x0453,     #  CYRILLIC SMALL LETTER GJE\n    0x0083: 0x0403,     #  CYRILLIC CAPITAL LETTER GJE\n    0x0084: 0x0451,     #  CYRILLIC SMALL LETTER IO\n    0x0085: 0x0401,     #  CYRILLIC CAPITAL LETTER IO\n    0x0086: 0x0454,     #  CYRILLIC SMALL LETTER UKRAINIAN IE\n    0x0087: 0x0404,     #  CYRILLIC CAPITAL LETTER UKRAINIAN IE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp855",
        "description": "venv.lib.python3.8.encodings.cp855",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp855",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp855 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp856",
        "description": "venv.lib.python3.8.encodings.cp856",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp856",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp856 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp857",
        "description": "venv.lib.python3.8.encodings.cp857",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp857",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp857 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp858",
        "description": "venv.lib.python3.8.encodings.cp858",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp858",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp858 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e3,     #  LATIN SMALL LETTER A WITH TILDE\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00c1,     #  LATIN CAPITAL LETTER A WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e3,     #  LATIN SMALL LETTER A WITH TILDE\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00c1,     #  LATIN CAPITAL LETTER A WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp860",
        "description": "venv.lib.python3.8.encodings.cp860",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp860",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp860 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp861",
        "description": "venv.lib.python3.8.encodings.cp861",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp861",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp861 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x05d0,     #  HEBREW LETTER ALEF\n    0x0081: 0x05d1,     #  HEBREW LETTER BET\n    0x0082: 0x05d2,     #  HEBREW LETTER GIMEL\n    0x0083: 0x05d3,     #  HEBREW LETTER DALET\n    0x0084: 0x05d4,     #  HEBREW LETTER HE\n    0x0085: 0x05d5,     #  HEBREW LETTER VAV\n    0x0086: 0x05d6,     #  HEBREW LETTER ZAYIN\n    0x0087: 0x05d7,     #  HEBREW LETTER HET",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x05d0,     #  HEBREW LETTER ALEF\n    0x0081: 0x05d1,     #  HEBREW LETTER BET\n    0x0082: 0x05d2,     #  HEBREW LETTER GIMEL\n    0x0083: 0x05d3,     #  HEBREW LETTER DALET\n    0x0084: 0x05d4,     #  HEBREW LETTER HE\n    0x0085: 0x05d5,     #  HEBREW LETTER VAV\n    0x0086: 0x05d6,     #  HEBREW LETTER ZAYIN\n    0x0087: 0x05d7,     #  HEBREW LETTER HET\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp862",
        "description": "venv.lib.python3.8.encodings.cp862",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp862",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp862 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00c2,     #  LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00b6,     #  PILCROW SIGN\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00c2,     #  LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00b6,     #  PILCROW SIGN\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp863",
        "description": "venv.lib.python3.8.encodings.cp863",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp863",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp863 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0025: 0x066a,     #  ARABIC PERCENT SIGN\n    0x0080: 0x00b0,     #  DEGREE SIGN\n    0x0081: 0x00b7,     #  MIDDLE DOT\n    0x0082: 0x2219,     #  BULLET OPERATOR\n    0x0083: 0x221a,     #  SQUARE ROOT\n    0x0084: 0x2592,     #  MEDIUM SHADE\n    0x0085: 0x2500,     #  FORMS LIGHT HORIZONTAL\n    0x0086: 0x2502,     #  FORMS LIGHT VERTICAL",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0025: 0x066a,     #  ARABIC PERCENT SIGN\n    0x0080: 0x00b0,     #  DEGREE SIGN\n    0x0081: 0x00b7,     #  MIDDLE DOT\n    0x0082: 0x2219,     #  BULLET OPERATOR\n    0x0083: 0x221a,     #  SQUARE ROOT\n    0x0084: 0x2592,     #  MEDIUM SHADE\n    0x0085: 0x2500,     #  FORMS LIGHT HORIZONTAL\n    0x0086: 0x2502,     #  FORMS LIGHT VERTICAL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp864",
        "description": "venv.lib.python3.8.encodings.cp864",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp864",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp864 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp865",
        "description": "venv.lib.python3.8.encodings.cp865",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp865",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp865 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp866",
        "description": "venv.lib.python3.8.encodings.cp866",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp866",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp866 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: None,       #  UNDEFINED\n    0x0081: None,       #  UNDEFINED\n    0x0082: None,       #  UNDEFINED\n    0x0083: None,       #  UNDEFINED\n    0x0084: None,       #  UNDEFINED\n    0x0085: None,       #  UNDEFINED\n    0x0086: 0x0386,     #  GREEK CAPITAL LETTER ALPHA WITH TONOS\n    0x0087: None,       #  UNDEFINED",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: None,       #  UNDEFINED\n    0x0081: None,       #  UNDEFINED\n    0x0082: None,       #  UNDEFINED\n    0x0083: None,       #  UNDEFINED\n    0x0084: None,       #  UNDEFINED\n    0x0085: None,       #  UNDEFINED\n    0x0086: 0x0386,     #  GREEK CAPITAL LETTER ALPHA WITH TONOS\n    0x0087: None,       #  UNDEFINED\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp869",
        "description": "venv.lib.python3.8.encodings.cp869",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp869",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp869 import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp874",
        "description": "venv.lib.python3.8.encodings.cp874",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.cp874",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp874 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp875",
        "description": "venv.lib.python3.8.encodings.cp875",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "venv.lib.python3.8.encodings.cp875",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp875 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp932",
        "description": "venv.lib.python3.8.encodings.cp932",
        "peekOfCode": "codec = _codecs_jp.getcodec('cp932')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp932",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp932 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('cp932')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp949",
        "description": "venv.lib.python3.8.encodings.cp949",
        "peekOfCode": "codec = _codecs_kr.getcodec('cp949')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp949",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp949 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_kr.getcodec('cp949')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.cp950",
        "description": "venv.lib.python3.8.encodings.cp950",
        "peekOfCode": "codec = _codecs_tw.getcodec('cp950')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.cp950",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.cp950 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_tw.getcodec('cp950')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.euc_jis_2004",
        "description": "venv.lib.python3.8.encodings.euc_jis_2004",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jis_2004 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('euc_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.euc_jisx0213",
        "description": "venv.lib.python3.8.encodings.euc_jisx0213",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jisx0213 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('euc_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.euc_jp",
        "description": "venv.lib.python3.8.encodings.euc_jp",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_jp import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('euc_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.euc_kr",
        "description": "venv.lib.python3.8.encodings.euc_kr",
        "peekOfCode": "codec = _codecs_kr.getcodec('euc_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.euc_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.euc_kr import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_kr.getcodec('euc_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.gb18030",
        "description": "venv.lib.python3.8.encodings.gb18030",
        "peekOfCode": "codec = _codecs_cn.getcodec('gb18030')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gb18030",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb18030 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_cn.getcodec('gb18030')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.gb2312",
        "description": "venv.lib.python3.8.encodings.gb2312",
        "peekOfCode": "codec = _codecs_cn.getcodec('gb2312')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gb2312",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gb2312 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_cn.getcodec('gb2312')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.gbk",
        "description": "venv.lib.python3.8.encodings.gbk",
        "peekOfCode": "codec = _codecs_cn.getcodec('gbk')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.gbk",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.gbk import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_cn.getcodec('gbk')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "hex_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "def hex_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.b2a_hex(input), len(input))\ndef hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import hex_encode\n```\n\n```python\n\n\n```\n\n```python\ndef hex_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.b2a_hex(input), len(input))\ndef hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "hex_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "def hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import hex_decode\n```\n\n```python\n\n\n```\n\n```python\ndef hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.hex_codec",
        "description": "venv.lib.python3.8.encodings.hex_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.hex_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hex_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.hp_roman8",
        "description": "venv.lib.python3.8.encodings.hp_roman8",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.hp_roman8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hp_roman8 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.hz",
        "description": "venv.lib.python3.8.encodings.hz",
        "peekOfCode": "codec = _codecs_cn.getcodec('hz')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.hz",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.hz import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_cn.getcodec('hz')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return b'', 0\n        try:\n            result = input.encode('ascii')\n        except UnicodeEncodeError:",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return b'', 0\n        try:\n            result = input.encode('ascii')\n        except UnicodeEncodeError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "class IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, input, errors, final):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return (b'', 0)\n        labels = dots.split(input)\n        trailing_dot = b''\n        if labels:",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, input, errors, final):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return (b'', 0)\n        labels = dots.split(input)\n        trailing_dot = b''\n        if labels:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, input, errors, final):\n        if errors != 'strict':\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        if not input:\n            return (\"\", 0)\n        # IDNA allows decoding to operate on Unicode strings, too.\n        if isinstance(input, str):\n            labels = dots.split(input)\n        else:",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, input, errors, final):\n        if errors != 'strict':\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        if not input:\n            return (\"\", 0)\n        # IDNA allows decoding to operate on Unicode strings, too.\n        if isinstance(input, str):\n            labels = dots.split(input)\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nameprep",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "def nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))\n    label = \"\".join(newlabel)\n    # Normalize",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import nameprep\n```\n\n```python\n\n\n```\n\n```python\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))\n    label = \"\".join(newlabel)\n    # Normalize\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ToASCII",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "def ToASCII(label):\n    try:\n        # Step 1: try ASCII\n        label = label.encode(\"ascii\")\n    except UnicodeError:\n        pass\n    else:\n        # Skip to step 3: UseSTD3ASCIIRules is false, so\n        # Skip to step 8.\n        if 0 < len(label) < 64:",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import ToASCII\n```\n\n```python\n\n\n```\n\n```python\ndef ToASCII(label):\n    try:\n        # Step 1: try ASCII\n        label = label.encode(\"ascii\")\n    except UnicodeError:\n        pass\n    else:\n        # Skip to step 3: UseSTD3ASCIIRules is false, so\n        # Skip to step 8.\n        if 0 < len(label) < 64:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ToUnicode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "def ToUnicode(label):\n    # Step 1: Check for ASCII\n    if isinstance(label, bytes):\n        pure_ascii = True\n    else:\n        try:\n            label = label.encode(\"ascii\")\n            pure_ascii = True\n        except UnicodeError:\n            pure_ascii = False",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import ToUnicode\n```\n\n```python\n\n\n```\n\n```python\ndef ToUnicode(label):\n    # Step 1: Check for ASCII\n    if isinstance(label, bytes):\n        pure_ascii = True\n    else:\n        try:\n            label = label.encode(\"ascii\")\n            pure_ascii = True\n        except UnicodeError:\n            pure_ascii = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dots",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "dots = re.compile(\"[\\u002E\\u3002\\uFF0E\\uFF61]\")\n# IDNA section 5\nace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import dots\n```\n\n```python\n\n\n```\n\n```python\ndots = re.compile(\"[\\u002E\\u3002\\uFF0E\\uFF61]\")\n# IDNA section 5\nace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ace_prefix",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "ace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import ace_prefix\n```\n\n```python\n\n\n```\n\n```python\nace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sace_prefix",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.idna",
        "description": "venv.lib.python3.8.encodings.idna",
        "peekOfCode": "sace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))",
        "detail": "venv.lib.python3.8.encodings.idna",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.idna import sace_prefix\n```\n\n```python\n\n\n```\n\n```python\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp",
        "description": "venv.lib.python3.8.encodings.iso2022_jp",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_1')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_1 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp_1')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_2')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp_2')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_2004 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_3')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_3 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp_3')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "description": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_ext')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_jp_ext",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_jp_ext import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_jp_ext')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso2022_kr",
        "description": "venv.lib.python3.8.encodings.iso2022_kr",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.iso2022_kr",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso2022_kr import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_iso2022.getcodec('iso2022_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_1",
        "description": "venv.lib.python3.8.encodings.iso8859_1",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_1 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_10",
        "description": "venv.lib.python3.8.encodings.iso8859_10",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_10",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_10 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_11",
        "description": "venv.lib.python3.8.encodings.iso8859_11",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_11",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_11 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_13",
        "description": "venv.lib.python3.8.encodings.iso8859_13",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_13 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_14",
        "description": "venv.lib.python3.8.encodings.iso8859_14",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_14",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_14 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_15",
        "description": "venv.lib.python3.8.encodings.iso8859_15",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_15",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_15 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_16",
        "description": "venv.lib.python3.8.encodings.iso8859_16",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_16 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_2",
        "description": "venv.lib.python3.8.encodings.iso8859_2",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_2 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_3",
        "description": "venv.lib.python3.8.encodings.iso8859_3",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_3",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_3 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_4",
        "description": "venv.lib.python3.8.encodings.iso8859_4",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_4",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_4 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_5",
        "description": "venv.lib.python3.8.encodings.iso8859_5",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_5",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_5 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_6",
        "description": "venv.lib.python3.8.encodings.iso8859_6",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_6",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_6 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_7",
        "description": "venv.lib.python3.8.encodings.iso8859_7",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_7 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_8",
        "description": "venv.lib.python3.8.encodings.iso8859_8",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_8 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.iso8859_9",
        "description": "venv.lib.python3.8.encodings.iso8859_9",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.iso8859_9",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.iso8859_9 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.johab",
        "description": "venv.lib.python3.8.encodings.johab",
        "peekOfCode": "codec = _codecs_kr.getcodec('johab')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.johab",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.johab import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_kr.getcodec('johab')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.koi8_r",
        "description": "venv.lib.python3.8.encodings.koi8_r",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.koi8_r",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_r import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.koi8_t",
        "description": "venv.lib.python3.8.encodings.koi8_t",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.koi8_t",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_t import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.koi8_u",
        "description": "venv.lib.python3.8.encodings.koi8_u",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.koi8_u",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.koi8_u import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return codecs.charmap_encode(input, errors, encoding_table)\n    def decode(self, input, errors='strict'):\n        return codecs.charmap_decode(input, errors, decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return codecs.charmap_encode(input, errors, encoding_table)\n    def decode(self, input, errors='strict'):\n        return codecs.charmap_decode(input, errors, decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> NULL\n    '\\x01'      #  0x01 -> START OF HEADING\n    '\\x02'      #  0x02 -> START OF TEXT\n    '\\x03'      #  0x03 -> END OF TEXT\n    '\\x04'      #  0x04 -> END OF TRANSMISSION\n    '\\x05'      #  0x05 -> ENQUIRY\n    '\\x06'      #  0x06 -> ACKNOWLEDGE\n    '\\x07'      #  0x07 -> BELL\n    '\\x08'      #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'      #  0x00 -> NULL\n    '\\x01'      #  0x01 -> START OF HEADING\n    '\\x02'      #  0x02 -> START OF TEXT\n    '\\x03'      #  0x03 -> END OF TEXT\n    '\\x04'      #  0x04 -> END OF TRANSMISSION\n    '\\x05'      #  0x05 -> ENQUIRY\n    '\\x06'      #  0x06 -> ACKNOWLEDGE\n    '\\x07'      #  0x07 -> BELL\n    '\\x08'      #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.kz1048",
        "description": "venv.lib.python3.8.encodings.kz1048",
        "peekOfCode": "encoding_table = codecs.charmap_build(decoding_table)",
        "detail": "venv.lib.python3.8.encodings.kz1048",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.kz1048 import encoding_table\n```\n\n```python\n\n\n```\n\n```python\nencoding_table = codecs.charmap_build(decoding_table)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamConverter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "class StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import StreamConverter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.latin_1",
        "description": "venv.lib.python3.8.encodings.latin_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.latin_1",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.latin_1 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c4,     #  LATIN CAPITAL LETTER A WITH DIAERESIS\n    0x0081: 0x00a0,     #  NO-BREAK SPACE, right-left\n    0x0082: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0083: 0x00c9,     #  LATIN CAPITAL LETTER E WITH ACUTE\n    0x0084: 0x00d1,     #  LATIN CAPITAL LETTER N WITH TILDE\n    0x0085: 0x00d6,     #  LATIN CAPITAL LETTER O WITH DIAERESIS\n    0x0086: 0x00dc,     #  LATIN CAPITAL LETTER U WITH DIAERESIS\n    0x0087: 0x00e1,     #  LATIN SMALL LETTER A WITH ACUTE",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import decoding_map\n```\n\n```python\n\n\n```\n\n```python\ndecoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c4,     #  LATIN CAPITAL LETTER A WITH DIAERESIS\n    0x0081: 0x00a0,     #  NO-BREAK SPACE, right-left\n    0x0082: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0083: 0x00c9,     #  LATIN CAPITAL LETTER E WITH ACUTE\n    0x0084: 0x00d1,     #  LATIN CAPITAL LETTER N WITH TILDE\n    0x0085: 0x00d6,     #  LATIN CAPITAL LETTER O WITH DIAERESIS\n    0x0086: 0x00dc,     #  LATIN CAPITAL LETTER U WITH DIAERESIS\n    0x0087: 0x00e1,     #  LATIN SMALL LETTER A WITH ACUTE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> CONTROL CHARACTER\n    '\\x01'     #  0x0001 -> CONTROL CHARACTER\n    '\\x02'     #  0x0002 -> CONTROL CHARACTER\n    '\\x03'     #  0x0003 -> CONTROL CHARACTER\n    '\\x04'     #  0x0004 -> CONTROL CHARACTER\n    '\\x05'     #  0x0005 -> CONTROL CHARACTER\n    '\\x06'     #  0x0006 -> CONTROL CHARACTER\n    '\\x07'     #  0x0007 -> CONTROL CHARACTER\n    '\\x08'     #  0x0008 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x0000 -> CONTROL CHARACTER\n    '\\x01'     #  0x0001 -> CONTROL CHARACTER\n    '\\x02'     #  0x0002 -> CONTROL CHARACTER\n    '\\x03'     #  0x0003 -> CONTROL CHARACTER\n    '\\x04'     #  0x0004 -> CONTROL CHARACTER\n    '\\x05'     #  0x0005 -> CONTROL CHARACTER\n    '\\x06'     #  0x0006 -> CONTROL CHARACTER\n    '\\x07'     #  0x0007 -> CONTROL CHARACTER\n    '\\x08'     #  0x0008 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_arabic",
        "description": "venv.lib.python3.8.encodings.mac_arabic",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  CONTROL CHARACTER\n    0x0001: 0x0001,     #  CONTROL CHARACTER\n    0x0002: 0x0002,     #  CONTROL CHARACTER\n    0x0003: 0x0003,     #  CONTROL CHARACTER\n    0x0004: 0x0004,     #  CONTROL CHARACTER\n    0x0005: 0x0005,     #  CONTROL CHARACTER\n    0x0006: 0x0006,     #  CONTROL CHARACTER\n    0x0007: 0x0007,     #  CONTROL CHARACTER\n    0x0008: 0x0008,     #  CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_arabic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_arabic import encoding_map\n```\n\n```python\n\n\n```\n\n```python\nencoding_map = {\n    0x0000: 0x0000,     #  CONTROL CHARACTER\n    0x0001: 0x0001,     #  CONTROL CHARACTER\n    0x0002: 0x0002,     #  CONTROL CHARACTER\n    0x0003: 0x0003,     #  CONTROL CHARACTER\n    0x0004: 0x0004,     #  CONTROL CHARACTER\n    0x0005: 0x0005,     #  CONTROL CHARACTER\n    0x0006: 0x0006,     #  CONTROL CHARACTER\n    0x0007: 0x0007,     #  CONTROL CHARACTER\n    0x0008: 0x0008,     #  CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_centeuro",
        "description": "venv.lib.python3.8.encodings.mac_centeuro",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_centeuro",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_centeuro import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_croatian",
        "description": "venv.lib.python3.8.encodings.mac_croatian",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_croatian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_croatian import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_cyrillic",
        "description": "venv.lib.python3.8.encodings.mac_cyrillic",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_cyrillic",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_cyrillic import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_farsi",
        "description": "venv.lib.python3.8.encodings.mac_farsi",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_farsi",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_farsi import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_greek",
        "description": "venv.lib.python3.8.encodings.mac_greek",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_greek",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_greek import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_iceland",
        "description": "venv.lib.python3.8.encodings.mac_iceland",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_iceland",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_iceland import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_latin2",
        "description": "venv.lib.python3.8.encodings.mac_latin2",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.mac_latin2",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_latin2 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_roman",
        "description": "venv.lib.python3.8.encodings.mac_roman",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_roman",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_roman import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_romanian",
        "description": "venv.lib.python3.8.encodings.mac_romanian",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_romanian",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_romanian import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mac_turkish",
        "description": "venv.lib.python3.8.encodings.mac_turkish",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "venv.lib.python3.8.encodings.mac_turkish",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mac_turkish import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "def decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.mbcs",
        "description": "venv.lib.python3.8.encodings.mbcs",
        "peekOfCode": "encode = mbcs_encode\ndef decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode",
        "detail": "venv.lib.python3.8.encodings.mbcs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.mbcs import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = mbcs_encode\ndef decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "def decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.oem",
        "description": "venv.lib.python3.8.encodings.oem",
        "peekOfCode": "encode = oem_encode\ndef decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode",
        "detail": "venv.lib.python3.8.encodings.oem",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.oem import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = oem_encode\ndef decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.palmos",
        "description": "venv.lib.python3.8.encodings.palmos",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.palmos",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.palmos import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.ptcp154",
        "description": "venv.lib.python3.8.encodings.ptcp154",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.ptcp154",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.ptcp154 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        res = punycode_encode(input)\n        return res, len(input)\n    def decode(self, input, errors='strict'):\n        if errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        res = punycode_decode(input, errors)\n        return res, len(input)\nclass IncrementalEncoder(codecs.IncrementalEncoder):",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        res = punycode_encode(input)\n        return res, len(input)\n    def decode(self, input, errors='strict'):\n        if errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        res = punycode_decode(input, errors)\n        return res, len(input)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return punycode_encode(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return punycode_encode(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "segregate",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def segregate(str):\n    \"\"\"3.1 Basic code point segregation\"\"\"\n    base = bytearray()\n    extended = set()\n    for c in str:\n        if ord(c) < 128:\n            base.append(ord(c))\n        else:\n            extended.add(c)\n    extended = sorted(extended)",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import segregate\n```\n\n```python\n\n\n```\n\n```python\ndef segregate(str):\n    \"\"\"3.1 Basic code point segregation\"\"\"\n    base = bytearray()\n    extended = set()\n    for c in str:\n        if ord(c) < 128:\n            base.append(ord(c))\n        else:\n            extended.add(c)\n    extended = sorted(extended)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "selective_len",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def selective_len(str, max):\n    \"\"\"Return the length of str, considering only characters below max.\"\"\"\n    res = 0\n    for c in str:\n        if ord(c) < max:\n            res += 1\n    return res\ndef selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import selective_len\n```\n\n```python\n\n\n```\n\n```python\ndef selective_len(str, max):\n    \"\"\"Return the length of str, considering only characters below max.\"\"\"\n    res = 0\n    for c in str:\n        if ord(c) < max:\n            res += 1\n    return res\ndef selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "selective_find",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n    only ordinals up to and including char, and pos is the position in\n    the full string. index/pos is the starting position in the full\n    string.\"\"\"\n    l = len(str)\n    while 1:\n        pos += 1\n        if pos == l:",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import selective_find\n```\n\n```python\n\n\n```\n\n```python\ndef selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n    only ordinals up to and including char, and pos is the position in\n    the full string. index/pos is the starting position in the full\n    string.\"\"\"\n    l = len(str)\n    while 1:\n        pos += 1\n        if pos == l:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "insertion_unsort",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def insertion_unsort(str, extended):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    oldchar = 0x80\n    result = []\n    oldindex = -1\n    for c in extended:\n        index = pos = -1\n        char = ord(c)\n        curlen = selective_len(str, char)\n        delta = (curlen+1) * (char - oldchar)",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import insertion_unsort\n```\n\n```python\n\n\n```\n\n```python\ndef insertion_unsort(str, extended):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    oldchar = 0x80\n    result = []\n    oldindex = -1\n    for c in extended:\n        index = pos = -1\n        char = ord(c)\n        curlen = selective_len(str, char)\n        delta = (curlen+1) * (char - oldchar)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "T",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def T(j, bias):\n    # Punycode parameters: tmin = 1, tmax = 26, base = 36\n    res = 36 * (j + 1) - bias\n    if res < 1: return 1\n    if res > 26: return 26\n    return res\ndigits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import T\n```\n\n```python\n\n\n```\n\n```python\ndef T(j, bias):\n    # Punycode parameters: tmin = 1, tmax = 26, base = 36\n    res = 36 * (j + 1) - bias\n    if res < 1: return 1\n    if res > 26: return 26\n    return res\ndigits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generate_generalized_integer",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)\n        result.append(digits[t + ((N - t) % (36 - t))])",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import generate_generalized_integer\n```\n\n```python\n\n\n```\n\n```python\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)\n        result.append(digits[t + ((N - t) % (36 - t))])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "adapt",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def adapt(delta, first, numchars):\n    if first:\n        delta //= 700\n    else:\n        delta //= 2\n    delta += delta // numchars\n    # ((base - tmin) * tmax) // 2 == 455\n    divisions = 0\n    while delta > 455:\n        delta = delta // 35 # base - tmin",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import adapt\n```\n\n```python\n\n\n```\n\n```python\ndef adapt(delta, first, numchars):\n    if first:\n        delta //= 700\n    else:\n        delta //= 2\n    delta += delta // numchars\n    # ((base - tmin) * tmax) // 2 == 455\n    divisions = 0\n    while delta > 455:\n        delta = delta // 35 # base - tmin\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generate_integers",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def generate_integers(baselen, deltas):\n    \"\"\"3.4 Bias adaptation\"\"\"\n    # Punycode parameters: initial bias = 72, damp = 700, skew = 38\n    result = bytearray()\n    bias = 72\n    for points, delta in enumerate(deltas):\n        s = generate_generalized_integer(delta, bias)\n        result.extend(s)\n        bias = adapt(delta, points==0, baselen+points+1)\n    return bytes(result)",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import generate_integers\n```\n\n```python\n\n\n```\n\n```python\ndef generate_integers(baselen, deltas):\n    \"\"\"3.4 Bias adaptation\"\"\"\n    # Punycode parameters: initial bias = 72, damp = 700, skew = 38\n    result = bytearray()\n    bias = 72\n    for points, delta in enumerate(deltas):\n        s = generate_generalized_integer(delta, bias)\n        result.extend(s)\n        bias = adapt(delta, points==0, baselen+points+1)\n    return bytes(result)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "punycode_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def punycode_encode(text):\n    base, extended = segregate(text)\n    deltas = insertion_unsort(text, extended)\n    extended = generate_integers(len(base), deltas)\n    if base:\n        return base + b\"-\" + extended\n    return extended\n##################### Decoding #####################################\ndef decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import punycode_encode\n```\n\n```python\n\n\n```\n\n```python\ndef punycode_encode(text):\n    base, extended = segregate(text)\n    deltas = insertion_unsort(text, extended)\n    extended = generate_integers(len(base), deltas)\n    if base:\n        return base + b\"-\" + extended\n    return extended\n##################### Decoding #####################################\ndef decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode_generalized_number",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = 0\n    w = 1\n    j = 0\n    while 1:\n        try:\n            char = ord(extended[extpos])\n        except IndexError:\n            if errors == \"strict\":",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import decode_generalized_number\n```\n\n```python\n\n\n```\n\n```python\ndef decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = 0\n    w = 1\n    j = 0\n    while 1:\n        try:\n            char = ord(extended[extpos])\n        except IndexError:\n            if errors == \"strict\":\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def insertion_sort(base, extended, errors):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    char = 0x80\n    pos = -1\n    bias = 72\n    extpos = 0\n    while extpos < len(extended):\n        newpos, delta = decode_generalized_number(extended, extpos,\n                                                  bias, errors)\n        if delta is None:",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import insertion_sort\n```\n\n```python\n\n\n```\n\n```python\ndef insertion_sort(base, extended, errors):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    char = 0x80\n    pos = -1\n    bias = 72\n    extpos = 0\n    while extpos < len(extended):\n        newpos, delta = decode_generalized_number(extended, extpos,\n                                                  bias, errors)\n        if delta is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "punycode_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def punycode_decode(text, errors):\n    if isinstance(text, str):\n        text = text.encode(\"ascii\")\n    if isinstance(text, memoryview):\n        text = bytes(text)\n    pos = text.rfind(b\"-\")\n    if pos == -1:\n        base = \"\"\n        extended = str(text, \"ascii\").upper()\n    else:",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import punycode_decode\n```\n\n```python\n\n\n```\n\n```python\ndef punycode_decode(text, errors):\n    if isinstance(text, str):\n        text = text.encode(\"ascii\")\n    if isinstance(text, memoryview):\n        text = bytes(text)\n    pos = text.rfind(b\"-\")\n    if pos == -1:\n        base = \"\"\n        extended = str(text, \"ascii\").upper()\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "digits",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.punycode",
        "description": "venv.lib.python3.8.encodings.punycode",
        "peekOfCode": "digits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)",
        "detail": "venv.lib.python3.8.encodings.punycode",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.punycode import digits\n```\n\n```python\n\n\n```\n\n```python\ndigits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return quopri_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return quopri_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quopri_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "def quopri_encode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.encode(f, g, quotetabs=True)\n    return (g.getvalue(), len(input))\ndef quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import quopri_encode\n```\n\n```python\n\n\n```\n\n```python\ndef quopri_encode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.encode(f, g, quotetabs=True)\n    return (g.getvalue(), len(input))\ndef quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quopri_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "def quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.decode(f, g)\n    return (g.getvalue(), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import quopri_decode\n```\n\n```python\n\n\n```\n\n```python\ndef quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.decode(f, g)\n    return (g.getvalue(), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.quopri_codec",
        "description": "venv.lib.python3.8.encodings.quopri_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.quopri_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.quopri_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.raw_unicode_escape_encode\n    decode = codecs.raw_unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.raw_unicode_escape_encode\n    decode = codecs.raw_unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "description": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.raw_unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.raw_unicode_escape import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\n    def decode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\n    def decode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rot13",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "def rot13(infile, outfile):\n    outfile.write(codecs.encode(infile.read(), 'rot-13'))\nif __name__ == '__main__':\n    import sys\n    rot13(sys.stdin, sys.stdout)",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import rot13\n```\n\n```python\n\n\n```\n\n```python\ndef rot13(infile, outfile):\n    outfile.write(codecs.encode(infile.read(), 'rot-13'))\nif __name__ == '__main__':\n    import sys\n    rot13(sys.stdin, sys.stdout)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rot13_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.rot_13",
        "description": "venv.lib.python3.8.encodings.rot_13",
        "peekOfCode": "rot13_map = codecs.make_identity_dict(range(256))\nrot13_map.update({\n   0x0041: 0x004e,\n   0x0042: 0x004f,\n   0x0043: 0x0050,\n   0x0044: 0x0051,\n   0x0045: 0x0052,\n   0x0046: 0x0053,\n   0x0047: 0x0054,\n   0x0048: 0x0055,",
        "detail": "venv.lib.python3.8.encodings.rot_13",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.rot_13 import rot13_map\n```\n\n```python\n\n\n```\n\n```python\nrot13_map = codecs.make_identity_dict(range(256))\nrot13_map.update({\n   0x0041: 0x004e,\n   0x0042: 0x004f,\n   0x0043: 0x0050,\n   0x0044: 0x0051,\n   0x0045: 0x0052,\n   0x0046: 0x0053,\n   0x0047: 0x0054,\n   0x0048: 0x0055,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.shift_jis",
        "description": "venv.lib.python3.8.encodings.shift_jis",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jis')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jis",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('shift_jis')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.shift_jis_2004",
        "description": "venv.lib.python3.8.encodings.shift_jis_2004",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jis_2004",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jis_2004 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('shift_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.shift_jisx0213",
        "description": "venv.lib.python3.8.encodings.shift_jisx0213",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "venv.lib.python3.8.encodings.shift_jisx0213",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.shift_jisx0213 import codec\n```\n\n```python\n\n\n```\n\n```python\ncodec = _codecs_jp.getcodec('shift_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.tis_620",
        "description": "venv.lib.python3.8.encodings.tis_620",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "venv.lib.python3.8.encodings.tis_620",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.tis_620 import decoding_table\n```\n\n```python\n\n\n```\n\n```python\ndecoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\n    def decode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\n    def decode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.undefined",
        "description": "venv.lib.python3.8.encodings.undefined",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.undefined",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.undefined import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.unicode_escape_encode\n    decode = codecs.unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.unicode_escape_encode\n    decode = codecs.unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.unicode_escape",
        "description": "venv.lib.python3.8.encodings.unicode_escape",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "venv.lib.python3.8.encodings.unicode_escape",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.unicode_escape import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_16_le_encode\n            else:",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_16_le_encode\n            else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_16_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_16_le_decode",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_16_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_16_le_decode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        codecs.StreamWriter.__init__(self, stream, errors)\n        self.encoder = None\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, errors)",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        codecs.StreamWriter.__init__(self, stream, errors)\n        self.encoder = None\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, errors)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_16_ex_decode(input, errors, 0, False)",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_16_ex_decode(input, errors, 0, False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_16",
        "description": "venv.lib.python3.8.encodings.utf_16",
        "peekOfCode": "encode = codecs.utf_16_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]",
        "detail": "venv.lib.python3.8.encodings.utf_16",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16 import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_16_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_16_be",
        "description": "venv.lib.python3.8.encodings.utf_16_be",
        "peekOfCode": "encode = codecs.utf_16_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode",
        "detail": "venv.lib.python3.8.encodings.utf_16_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_be import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_16_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_16_le",
        "description": "venv.lib.python3.8.encodings.utf_16_le",
        "peekOfCode": "encode = codecs.utf_16_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode",
        "detail": "venv.lib.python3.8.encodings.utf_16_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_16_le import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_16_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_32_le_encode\n            else:",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_32_le_encode\n            else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_32_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_32_le_decode",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_32_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_32_le_decode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        self.encoder = None\n        codecs.StreamWriter.__init__(self, stream, errors)\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, errors)",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        self.encoder = None\n        codecs.StreamWriter.__init__(self, stream, errors)\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, errors)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_32_ex_decode(input, errors, 0, False)",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_32_ex_decode(input, errors, 0, False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_32",
        "description": "venv.lib.python3.8.encodings.utf_32",
        "peekOfCode": "encode = codecs.utf_32_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]",
        "detail": "venv.lib.python3.8.encodings.utf_32",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32 import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_32_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_32_be",
        "description": "venv.lib.python3.8.encodings.utf_32_be",
        "peekOfCode": "encode = codecs.utf_32_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode",
        "detail": "venv.lib.python3.8.encodings.utf_32_be",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_be import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_32_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_32_le",
        "description": "venv.lib.python3.8.encodings.utf_32_le",
        "peekOfCode": "encode = codecs.utf_32_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode",
        "detail": "venv.lib.python3.8.encodings.utf_32_le",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_32_le import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_32_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_7",
        "description": "venv.lib.python3.8.encodings.utf_7",
        "peekOfCode": "encode = codecs.utf_7_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode",
        "detail": "venv.lib.python3.8.encodings.utf_7",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_7 import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_7_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "venv.lib.python3.8.encodings.utf_8",
        "description": "venv.lib.python3.8.encodings.utf_8",
        "peekOfCode": "encode = codecs.utf_8_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode",
        "detail": "venv.lib.python3.8.encodings.utf_8",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8 import encode\n```\n\n```python\n\n\n```\n\n```python\nencode = codecs.utf_8_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.first = 1\n    def encode(self, input, final=False):\n        if self.first:\n            self.first = 0\n            return codecs.BOM_UTF8 + \\\n                   codecs.utf_8_encode(input, self.errors)[0]\n        else:",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.first = 1\n    def encode(self, input, final=False):\n        if self.first:\n            self.first = 0\n            return codecs.BOM_UTF8 + \\\n                   codecs.utf_8_encode(input, self.errors)[0]\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.first = 1\n    def _buffer_decode(self, input, errors, final):\n        if self.first:\n            if len(input) < 3:\n                if codecs.BOM_UTF8.startswith(input):\n                    # not enough data to decide if this really is a BOM\n                    # => try again on the next call",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.first = 1\n    def _buffer_decode(self, input, errors, final):\n        if self.first:\n            if len(input) < 3:\n                if codecs.BOM_UTF8.startswith(input):\n                    # not enough data to decide if this really is a BOM\n                    # => try again on the next call\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        try:\n            del self.encode\n        except AttributeError:\n            pass\n    def encode(self, input, errors='strict'):\n        self.encode = codecs.utf_8_encode\n        return encode(input, errors)",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(codecs.StreamWriter):\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        try:\n            del self.encode\n        except AttributeError:\n            pass\n    def encode(self, input, errors='strict'):\n        self.encode = codecs.utf_8_encode\n        return encode(input, errors)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        if len(input) < 3:\n            if codecs.BOM_UTF8.startswith(input):",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        if len(input) < 3:\n            if codecs.BOM_UTF8.startswith(input):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "def encode(input, errors='strict'):\n    return (codecs.BOM_UTF8 + codecs.utf_8_encode(input, errors)[0],\n            len(input))\ndef decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import encode\n```\n\n```python\n\n\n```\n\n```python\ndef encode(input, errors='strict'):\n    return (codecs.BOM_UTF8 + codecs.utf_8_encode(input, errors)[0],\n            len(input))\ndef decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "def decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.utf_8_sig",
        "description": "venv.lib.python3.8.encodings.utf_8_sig",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-8-sig',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "venv.lib.python3.8.encodings.utf_8_sig",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.utf_8_sig import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8-sig',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return uu_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return uu_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return uu_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return uu_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uu_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "def uu_encode(input, errors='strict', filename='<data>', mode=0o666):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    read = infile.read\n    write = outfile.write\n    # Encode\n    write(('begin %o %s\\n' % (mode & 0o777, filename)).encode('ascii'))\n    chunk = read(45)\n    while chunk:",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import uu_encode\n```\n\n```python\n\n\n```\n\n```python\ndef uu_encode(input, errors='strict', filename='<data>', mode=0o666):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    read = infile.read\n    write = outfile.write\n    # Encode\n    write(('begin %o %s\\n' % (mode & 0o777, filename)).encode('ascii'))\n    chunk = read(45)\n    while chunk:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uu_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "def uu_decode(input, errors='strict'):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    readline = infile.readline\n    write = outfile.write\n    # Find start of encoded data\n    while 1:\n        s = readline()\n        if not s:",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import uu_decode\n```\n\n```python\n\n\n```\n\n```python\ndef uu_decode(input, errors='strict'):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    readline = infile.readline\n    write = outfile.write\n    # Find start of encoded data\n    while 1:\n        s = readline()\n        if not s:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.uu_codec",
        "description": "venv.lib.python3.8.encodings.uu_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.uu_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.uu_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = zlib.decompressobj()\n    def decode(self, input, final=False):\n        if final:\n            c = self.decompressobj.decompress(input)\n            return c + self.decompressobj.flush()\n        else:",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = zlib.decompressobj()\n    def decode(self, input, final=False):\n        if final:\n            c = self.decompressobj.decompress(input)\n            return c + self.decompressobj.flush()\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zlib_encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "def zlib_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.compress(input), len(input))\ndef zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import zlib_encode\n```\n\n```python\n\n\n```\n\n```python\ndef zlib_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.compress(input), len(input))\ndef zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zlib_decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "def zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import zlib_decode\n```\n\n```python\n\n\n```\n\n```python\ndef zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "venv.lib.python3.8.encodings.zlib_codec",
        "description": "venv.lib.python3.8.encodings.zlib_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,",
        "detail": "venv.lib.python3.8.encodings.zlib_codec",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.encodings.zlib_codec import getregentry\n```\n\n```python\n\n\n```\n\n```python\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "invalidate_caches",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "def invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\n    sys.meta_path (where implemented).\"\"\"\n    for finder in sys.meta_path:\n        if hasattr(finder, 'invalidate_caches'):\n            finder.invalidate_caches()\ndef find_loader(name, path=None):\n    \"\"\"Return the loader for the specified module.\n    This is a backward-compatible wrapper around find_spec().\n    This function is deprecated in favor of importlib.util.find_spec().",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import invalidate_caches\n```\n\n```python\n\n\n```\n\n```python\ndef invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\n    sys.meta_path (where implemented).\"\"\"\n    for finder in sys.meta_path:\n        if hasattr(finder, 'invalidate_caches'):\n            finder.invalidate_caches()\ndef find_loader(name, path=None):\n    \"\"\"Return the loader for the specified module.\n    This is a backward-compatible wrapper around find_spec().\n    This function is deprecated in favor of importlib.util.find_spec().\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "find_loader",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "def find_loader(name, path=None):\n    \"\"\"Return the loader for the specified module.\n    This is a backward-compatible wrapper around find_spec().\n    This function is deprecated in favor of importlib.util.find_spec().\n    \"\"\"\n    warnings.warn('Deprecated since Python 3.4. '\n                  'Use importlib.util.find_spec() instead.',\n                  DeprecationWarning, stacklevel=2)\n    try:\n        loader = sys.modules[name].__loader__",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import find_loader\n```\n\n```python\n\n\n```\n\n```python\ndef find_loader(name, path=None):\n    \"\"\"Return the loader for the specified module.\n    This is a backward-compatible wrapper around find_spec().\n    This function is deprecated in favor of importlib.util.find_spec().\n    \"\"\"\n    warnings.warn('Deprecated since Python 3.4. '\n                  'Use importlib.util.find_spec() instead.',\n                  DeprecationWarning, stacklevel=2)\n    try:\n        loader = sys.modules[name].__loader__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "import_module",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "def import_module(name, package=None):\n    \"\"\"Import a module.\n    The 'package' argument is required when performing a relative import. It\n    specifies the package to use as the anchor point from which to resolve the\n    relative import to an absolute import.\n    \"\"\"\n    level = 0\n    if name.startswith('.'):\n        if not package:\n            msg = (\"the 'package' argument is required to perform a relative \"",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import import_module\n```\n\n```python\n\n\n```\n\n```python\ndef import_module(name, package=None):\n    \"\"\"Import a module.\n    The 'package' argument is required when performing a relative import. It\n    specifies the package to use as the anchor point from which to resolve the\n    relative import to an absolute import.\n    \"\"\"\n    level = 0\n    if name.startswith('.'):\n        if not package:\n            msg = (\"the 'package' argument is required to perform a relative \"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reload",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "def reload(module):\n    \"\"\"Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    if not module or not isinstance(module, types.ModuleType):\n        raise TypeError(\"reload() argument must be a module\")\n    try:\n        name = module.__spec__.name\n    except AttributeError:\n        name = module.__name__",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import reload\n```\n\n```python\n\n\n```\n\n```python\ndef reload(module):\n    \"\"\"Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    if not module or not isinstance(module, types.ModuleType):\n        raise TypeError(\"reload() argument must be a module\")\n    try:\n        name = module.__spec__.name\n    except AttributeError:\n        name = module.__name__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "__all__ = ['__import__', 'import_module', 'invalidate_caches', 'reload']\n# Bootstrap help #####################################################\n# Until bootstrapping is complete, DO NOT import any modules that attempt\n# to import importlib._bootstrap (directly or indirectly). Since this\n# partially initialised package would be present in sys.modules, those\n# modules would get an uninitialised copy of the source version, instead\n# of a fully initialised version (either the frozen one or the one\n# initialised below if the frozen one is not available).\nimport _imp  # Just the builtin component, NOT the full Python module\nimport sys",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['__import__', 'import_module', 'invalidate_caches', 'reload']\n# Bootstrap help #####################################################\n# Until bootstrapping is complete, DO NOT import any modules that attempt\n# to import importlib._bootstrap (directly or indirectly). Since this\n# partially initialised package would be present in sys.modules, those\n# modules would get an uninitialised copy of the source version, instead\n# of a fully initialised version (either the frozen one or the one\n# initialised below if the frozen one is not available).\nimport _imp  # Just the builtin component, NOT the full Python module\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_pack_uint32",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "_pack_uint32 = _bootstrap_external._pack_uint32\n_unpack_uint32 = _bootstrap_external._unpack_uint32\n# Fully bootstrapped at this point, import whatever you like, circular\n# dependencies and startup overhead minimisation permitting :)\nimport types\nimport warnings\n# Public API #########################################################\nfrom ._bootstrap import __import__\ndef invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import _pack_uint32\n```\n\n```python\n\n\n```\n\n```python\n_pack_uint32 = _bootstrap_external._pack_uint32\n_unpack_uint32 = _bootstrap_external._unpack_uint32\n# Fully bootstrapped at this point, import whatever you like, circular\n# dependencies and startup overhead minimisation permitting :)\nimport types\nimport warnings\n# Public API #########################################################\nfrom ._bootstrap import __import__\ndef invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_unpack_uint32",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "_unpack_uint32 = _bootstrap_external._unpack_uint32\n# Fully bootstrapped at this point, import whatever you like, circular\n# dependencies and startup overhead minimisation permitting :)\nimport types\nimport warnings\n# Public API #########################################################\nfrom ._bootstrap import __import__\ndef invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\n    sys.meta_path (where implemented).\"\"\"",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import _unpack_uint32\n```\n\n```python\n\n\n```\n\n```python\n_unpack_uint32 = _bootstrap_external._unpack_uint32\n# Fully bootstrapped at this point, import whatever you like, circular\n# dependencies and startup overhead minimisation permitting :)\nimport types\nimport warnings\n# Public API #########################################################\nfrom ._bootstrap import __import__\ndef invalidate_caches():\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\n    sys.meta_path (where implemented).\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_RELOADING",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.__init__",
        "description": "venv.lib.python3.8.importlib.__init__",
        "peekOfCode": "_RELOADING = {}\ndef reload(module):\n    \"\"\"Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    if not module or not isinstance(module, types.ModuleType):\n        raise TypeError(\"reload() argument must be a module\")\n    try:\n        name = module.__spec__.name\n    except AttributeError:",
        "detail": "venv.lib.python3.8.importlib.__init__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.__init__ import _RELOADING\n```\n\n```python\n\n\n```\n\n```python\n_RELOADING = {}\ndef reload(module):\n    \"\"\"Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    if not module or not isinstance(module, types.ModuleType):\n        raise TypeError(\"reload() argument must be a module\")\n    try:\n        name = module.__spec__.name\n    except AttributeError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_DeadlockError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _DeadlockError\n```\n\n```python\n\n\n```\n\n```python\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ModuleLock",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()\n        self.name = name\n        self.owner = None",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _ModuleLock\n```\n\n```python\n\n\n```\n\n```python\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()\n        self.name = name\n        self.owner = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_DummyModuleLock",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class _DummyModuleLock:\n    \"\"\"A simple _ModuleLock equivalent for Python builds without\n    multi-threading support.\"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.count = 0\n    def acquire(self):\n        self.count += 1\n        return True\n    def release(self):",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _DummyModuleLock\n```\n\n```python\n\n\n```\n\n```python\nclass _DummyModuleLock:\n    \"\"\"A simple _ModuleLock equivalent for Python builds without\n    multi-threading support.\"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.count = 0\n    def acquire(self):\n        self.count += 1\n        return True\n    def release(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ModuleLockManager",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class _ModuleLockManager:\n    def __init__(self, name):\n        self._name = name\n        self._lock = None\n    def __enter__(self):\n        self._lock = _get_module_lock(self._name)\n        self._lock.acquire()\n    def __exit__(self, *args, **kwargs):\n        self._lock.release()\n# The following two functions are for consumption by Python/import.c.",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _ModuleLockManager\n```\n\n```python\n\n\n```\n\n```python\nclass _ModuleLockManager:\n    def __init__(self, name):\n        self._name = name\n        self._lock = None\n    def __enter__(self):\n        self._lock = _get_module_lock(self._name)\n        self._lock.acquire()\n    def __exit__(self, *args, **kwargs):\n        self._lock.release()\n# The following two functions are for consumption by Python/import.c.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ModuleSpec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class ModuleSpec:\n    \"\"\"The specification for a module, used for loading.\n    A module's spec is the source for information about the module.  For\n    data associated with the module, including source, use the spec's\n    loader.\n    `name` is the absolute name of the module.  `loader` is the loader\n    to use when loading the module.  `parent` is the name of the\n    package the module is in.  The parent is derived from the name.\n    `is_package` determines if the module is considered a package or\n    not.  On modules this is reflected by the `__path__` attribute.",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import ModuleSpec\n```\n\n```python\n\n\n```\n\n```python\nclass ModuleSpec:\n    \"\"\"The specification for a module, used for loading.\n    A module's spec is the source for information about the module.  For\n    data associated with the module, including source, use the spec's\n    loader.\n    `name` is the absolute name of the module.  `loader` is the loader\n    to use when loading the module.  `parent` is the name of the\n    package the module is in.  The parent is derived from the name.\n    `is_package` determines if the module is considered a package or\n    not.  On modules this is reflected by the `__path__` attribute.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuiltinImporter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class BuiltinImporter:\n    \"\"\"Meta path import for built-in modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @staticmethod\n    def module_repr(module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import BuiltinImporter\n```\n\n```python\n\n\n```\n\n```python\nclass BuiltinImporter:\n    \"\"\"Meta path import for built-in modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @staticmethod\n    def module_repr(module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FrozenImporter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class FrozenImporter:\n    \"\"\"Meta path import for frozen modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    _ORIGIN = \"frozen\"\n    @staticmethod\n    def module_repr(m):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import FrozenImporter\n```\n\n```python\n\n\n```\n\n```python\nclass FrozenImporter:\n    \"\"\"Meta path import for frozen modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    _ORIGIN = \"frozen\"\n    @staticmethod\n    def module_repr(m):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ImportLockContext",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "class _ImportLockContext:\n    \"\"\"Context manager for the import lock.\"\"\"\n    def __enter__(self):\n        \"\"\"Acquire the import lock.\"\"\"\n        _imp.acquire_lock()\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"Release the import lock regardless of any raised exceptions.\"\"\"\n        _imp.release_lock()\ndef _resolve_name(name, package, level):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _ImportLockContext\n```\n\n```python\n\n\n```\n\n```python\nclass _ImportLockContext:\n    \"\"\"Context manager for the import lock.\"\"\"\n    def __enter__(self):\n        \"\"\"Acquire the import lock.\"\"\"\n        _imp.acquire_lock()\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"Release the import lock regardless of any raised exceptions.\"\"\"\n        _imp.release_lock()\ndef _resolve_name(name, package, level):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spec_from_loader",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "def spec_from_loader(name, loader, *, origin=None, is_package=None):\n    \"\"\"Return a module spec based on various loader methods.\"\"\"\n    if hasattr(loader, 'get_filename'):\n        if _bootstrap_external is None:\n            raise NotImplementedError\n        spec_from_file_location = _bootstrap_external.spec_from_file_location\n        if is_package is None:\n            return spec_from_file_location(name, loader=loader)\n        search = [] if is_package else None\n        return spec_from_file_location(name, loader=loader,",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import spec_from_loader\n```\n\n```python\n\n\n```\n\n```python\ndef spec_from_loader(name, loader, *, origin=None, is_package=None):\n    \"\"\"Return a module spec based on various loader methods.\"\"\"\n    if hasattr(loader, 'get_filename'):\n        if _bootstrap_external is None:\n            raise NotImplementedError\n        spec_from_file_location = _bootstrap_external.spec_from_file_location\n        if is_package is None:\n            return spec_from_file_location(name, loader=loader)\n        search = [] if is_package else None\n        return spec_from_file_location(name, loader=loader,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "module_from_spec",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "def module_from_spec(spec):\n    \"\"\"Create a module based on the provided spec.\"\"\"\n    # Typically loaders will not implement create_module().\n    module = None\n    if hasattr(spec.loader, 'create_module'):\n        # If create_module() returns `None` then it means default\n        # module creation should be used.\n        module = spec.loader.create_module(spec)\n    elif hasattr(spec.loader, 'exec_module'):\n        raise ImportError('loaders that define exec_module() '",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import module_from_spec\n```\n\n```python\n\n\n```\n\n```python\ndef module_from_spec(spec):\n    \"\"\"Create a module based on the provided spec.\"\"\"\n    # Typically loaders will not implement create_module().\n    module = None\n    if hasattr(spec.loader, 'create_module'):\n        # If create_module() returns `None` then it means default\n        # module creation should be used.\n        module = spec.loader.create_module(spec)\n    elif hasattr(spec.loader, 'exec_module'):\n        raise ImportError('loaders that define exec_module() '\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_bootstrap_external",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_bootstrap_external = None\ndef _wrap(new, old):\n    \"\"\"Simple substitute for functools.update_wrapper.\"\"\"\n    for replace in ['__module__', '__name__', '__qualname__', '__doc__']:\n        if hasattr(old, replace):\n            setattr(new, replace, getattr(old, replace))\n    new.__dict__.update(old.__dict__)\ndef _new_module(name):\n    return type(sys)(name)\n# Module-level locking ########################################################",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _bootstrap_external\n```\n\n```python\n\n\n```\n\n```python\n_bootstrap_external = None\ndef _wrap(new, old):\n    \"\"\"Simple substitute for functools.update_wrapper.\"\"\"\n    for replace in ['__module__', '__name__', '__qualname__', '__doc__']:\n        if hasattr(old, replace):\n            setattr(new, replace, getattr(old, replace))\n    new.__dict__.update(old.__dict__)\ndef _new_module(name):\n    return type(sys)(name)\n# Module-level locking ########################################################\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_module_locks",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_module_locks = {}\n# A dict mapping thread ids to _ModuleLock instances\n_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _module_locks\n```\n\n```python\n\n\n```\n\n```python\n_module_locks = {}\n# A dict mapping thread ids to _ModuleLock instances\n_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_blocking_on",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _blocking_on\n```\n\n```python\n\n\n```\n\n```python\n_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ERR_MSG_PREFIX",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_ERR_MSG_PREFIX = 'No module named '\n_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _ERR_MSG_PREFIX\n```\n\n```python\n\n\n```\n\n```python\n_ERR_MSG_PREFIX = 'No module named '\n_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ERR_MSG",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:\n            return sys.modules[name]",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _ERR_MSG\n```\n\n```python\n\n\n```\n\n```python\n_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:\n            return sys.modules[name]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_NEEDS_LOADING",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap",
        "description": "venv.lib.python3.8.importlib._bootstrap",
        "peekOfCode": "_NEEDS_LOADING = object()\ndef _find_and_load(name, import_):\n    \"\"\"Find and load the module.\"\"\"\n    with _ModuleLockManager(name):\n        module = sys.modules.get(name, _NEEDS_LOADING)\n        if module is _NEEDS_LOADING:\n            return _find_and_load_unlocked(name, import_)\n    if module is None:\n        message = ('import of {} halted; '\n                   'None in sys.modules'.format(name))",
        "detail": "venv.lib.python3.8.importlib._bootstrap",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap import _NEEDS_LOADING\n```\n\n```python\n\n\n```\n\n```python\n_NEEDS_LOADING = object()\ndef _find_and_load(name, import_):\n    \"\"\"Find and load the module.\"\"\"\n    with _ModuleLockManager(name):\n        module = sys.modules.get(name, _NEEDS_LOADING)\n        if module is _NEEDS_LOADING:\n            return _find_and_load_unlocked(name, import_)\n    if module is None:\n        message = ('import of {} halted; '\n                   'None in sys.modules'.format(name))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WindowsRegistryFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class WindowsRegistryFinder:\n    \"\"\"Meta path finder for modules declared in the Windows registry.\"\"\"\n    REGISTRY_KEY = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}')\n    REGISTRY_KEY_DEBUG = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}\\\\Debug')\n    DEBUG_BUILD = False  # Changed in _setup()\n    @classmethod",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import WindowsRegistryFinder\n```\n\n```python\n\n\n```\n\n```python\nclass WindowsRegistryFinder:\n    \"\"\"Meta path finder for modules declared in the Windows registry.\"\"\"\n    REGISTRY_KEY = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}')\n    REGISTRY_KEY_DEBUG = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}\\\\Debug')\n    DEBUG_BUILD = False  # Changed in _setup()\n    @classmethod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LoaderBasics",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class _LoaderBasics:\n    \"\"\"Base class of common code needed by both SourceLoader and\n    SourcelessFileLoader.\"\"\"\n    def is_package(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.is_package by checking if\n        the path returned by get_filename has a filename of '__init__.py'.\"\"\"\n        filename = _path_split(self.get_filename(fullname))[1]\n        filename_base = filename.rsplit('.', 1)[0]\n        tail_name = fullname.rpartition('.')[2]\n        return filename_base == '__init__' and tail_name != '__init__'",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _LoaderBasics\n```\n\n```python\n\n\n```\n\n```python\nclass _LoaderBasics:\n    \"\"\"Base class of common code needed by both SourceLoader and\n    SourcelessFileLoader.\"\"\"\n    def is_package(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.is_package by checking if\n        the path returned by get_filename has a filename of '__init__.py'.\"\"\"\n        filename = _path_split(self.get_filename(fullname))[1]\n        filename_base = filename.rsplit('.', 1)[0]\n        tail_name = fullname.rpartition('.')[2]\n        return filename_base == '__init__' and tail_name != '__init__'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourceLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class SourceLoader(_LoaderBasics):\n    def path_mtime(self, path):\n        \"\"\"Optional method that returns the modification time (an int) for the\n        specified path (a str).\n        Raises OSError when the path cannot be handled.\n        \"\"\"\n        raise OSError\n    def path_stats(self, path):\n        \"\"\"Optional method returning a metadata dict for the specified\n        path (a str).",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import SourceLoader\n```\n\n```python\n\n\n```\n\n```python\nclass SourceLoader(_LoaderBasics):\n    def path_mtime(self, path):\n        \"\"\"Optional method that returns the modification time (an int) for the\n        specified path (a str).\n        Raises OSError when the path cannot be handled.\n        \"\"\"\n        raise OSError\n    def path_stats(self, path):\n        \"\"\"Optional method returning a metadata dict for the specified\n        path (a str).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FileLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class FileLoader:\n    \"\"\"Base file loader class which implements the loader protocol methods that\n    require file system usage.\"\"\"\n    def __init__(self, fullname, path):\n        \"\"\"Cache the module name and the path to the file found by the\n        finder.\"\"\"\n        self.name = fullname\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import FileLoader\n```\n\n```python\n\n\n```\n\n```python\nclass FileLoader:\n    \"\"\"Base file loader class which implements the loader protocol methods that\n    require file system usage.\"\"\"\n    def __init__(self, fullname, path):\n        \"\"\"Cache the module name and the path to the file found by the\n        finder.\"\"\"\n        self.name = fullname\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourceFileLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class SourceFileLoader(FileLoader, SourceLoader):\n    \"\"\"Concrete implementation of SourceLoader using the file system.\"\"\"\n    def path_stats(self, path):\n        \"\"\"Return the metadata for the path.\"\"\"\n        st = _path_stat(path)\n        return {'mtime': st.st_mtime, 'size': st.st_size}\n    def _cache_bytecode(self, source_path, bytecode_path, data):\n        # Adapt between the two APIs\n        mode = _calc_mode(source_path)\n        return self.set_data(bytecode_path, data, _mode=mode)",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import SourceFileLoader\n```\n\n```python\n\n\n```\n\n```python\nclass SourceFileLoader(FileLoader, SourceLoader):\n    \"\"\"Concrete implementation of SourceLoader using the file system.\"\"\"\n    def path_stats(self, path):\n        \"\"\"Return the metadata for the path.\"\"\"\n        st = _path_stat(path)\n        return {'mtime': st.st_mtime, 'size': st.st_size}\n    def _cache_bytecode(self, source_path, bytecode_path, data):\n        # Adapt between the two APIs\n        mode = _calc_mode(source_path)\n        return self.set_data(bytecode_path, data, _mode=mode)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourcelessFileLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class SourcelessFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader which handles sourceless file imports.\"\"\"\n    def get_code(self, fullname):\n        path = self.get_filename(fullname)\n        data = self.get_data(path)\n        # Call _classify_pyc to do basic validation of the pyc but ignore the\n        # result. There's no source to check against.\n        exc_details = {\n            'name': fullname,\n            'path': path,",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import SourcelessFileLoader\n```\n\n```python\n\n\n```\n\n```python\nclass SourcelessFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader which handles sourceless file imports.\"\"\"\n    def get_code(self, fullname):\n        path = self.get_filename(fullname)\n        data = self.get_data(path)\n        # Call _classify_pyc to do basic validation of the pyc but ignore the\n        # result. There's no source to check against.\n        exc_details = {\n            'name': fullname,\n            'path': path,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExtensionFileLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and\n                self.__dict__ == other.__dict__)",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import ExtensionFileLoader\n```\n\n```python\n\n\n```\n\n```python\nclass ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and\n                self.__dict__ == other.__dict__)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_NamespacePath",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class _NamespacePath:\n    \"\"\"Represents a namespace package's path.  It uses the module name\n    to find its parent module, and from there it looks up the parent's\n    __path__.  When this changes, the module's own path is recomputed,\n    using path_finder.  For top-level modules, the parent module's path\n    is sys.path.\"\"\"\n    def __init__(self, name, path, path_finder):\n        self._name = name\n        self._path = path\n        self._last_parent_path = tuple(self._get_parent_path())",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _NamespacePath\n```\n\n```python\n\n\n```\n\n```python\nclass _NamespacePath:\n    \"\"\"Represents a namespace package's path.  It uses the module name\n    to find its parent module, and from there it looks up the parent's\n    __path__.  When this changes, the module's own path is recomputed,\n    using path_finder.  For top-level modules, the parent module's path\n    is sys.path.\"\"\"\n    def __init__(self, name, path, path_finder):\n        self._name = name\n        self._path = path\n        self._last_parent_path = tuple(self._get_parent_path())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_NamespaceLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class _NamespaceLoader:\n    def __init__(self, name, path, path_finder):\n        self._path = _NamespacePath(name, path, path_finder)\n    @classmethod\n    def module_repr(cls, module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"\n        return '<module {!r} (namespace)>'.format(module.__name__)\n    def is_package(self, fullname):",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _NamespaceLoader\n```\n\n```python\n\n\n```\n\n```python\nclass _NamespaceLoader:\n    def __init__(self, name, path, path_finder):\n        self._path = _NamespacePath(name, path, path_finder)\n    @classmethod\n    def module_repr(cls, module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"\n        return '<module {!r} (namespace)>'.format(module.__name__)\n    def is_package(self, fullname):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PathFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class PathFinder:\n    \"\"\"Meta path finder for sys.path and package __path__ attributes.\"\"\"\n    @classmethod\n    def invalidate_caches(cls):\n        \"\"\"Call the invalidate_caches() method on all path entry finders\n        stored in sys.path_importer_caches (where implemented).\"\"\"\n        for name, finder in list(sys.path_importer_cache.items()):\n            if finder is None:\n                del sys.path_importer_cache[name]\n            elif hasattr(finder, 'invalidate_caches'):",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import PathFinder\n```\n\n```python\n\n\n```\n\n```python\nclass PathFinder:\n    \"\"\"Meta path finder for sys.path and package __path__ attributes.\"\"\"\n    @classmethod\n    def invalidate_caches(cls):\n        \"\"\"Call the invalidate_caches() method on all path entry finders\n        stored in sys.path_importer_caches (where implemented).\"\"\"\n        for name, finder in list(sys.path_importer_cache.items()):\n            if finder is None:\n                del sys.path_importer_cache[name]\n            elif hasattr(finder, 'invalidate_caches'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FileFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "class FileFinder:\n    \"\"\"File-based finder.\n    Interactions with the file system are cached for performance, being\n    refreshed when the directory the finder is handling has been modified.\n    \"\"\"\n    def __init__(self, path, *loader_details):\n        \"\"\"Initialize with the path to search on and a variable number of\n        2-tuples containing the loader and the file suffixes the loader\n        recognizes.\"\"\"\n        loaders = []",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import FileFinder\n```\n\n```python\n\n\n```\n\n```python\nclass FileFinder:\n    \"\"\"File-based finder.\n    Interactions with the file system are cached for performance, being\n    refreshed when the directory the finder is handling has been modified.\n    \"\"\"\n    def __init__(self, path, *loader_details):\n        \"\"\"Initialize with the path to search on and a variable number of\n        2-tuples containing the loader and the file suffixes the loader\n        recognizes.\"\"\"\n        loaders = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cache_from_source",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "def cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,\n    a True value is the same as setting 'optimization' to the empty string",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import cache_from_source\n```\n\n```python\n\n\n```\n\n```python\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,\n    a True value is the same as setting 'optimization' to the empty string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "source_from_cache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "def source_from_cache(path):\n    \"\"\"Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147/488 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    if sys.implementation.cache_tag is None:\n        raise NotImplementedError('sys.implementation.cache_tag is None')\n    path = _os.fspath(path)",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import source_from_cache\n```\n\n```python\n\n\n```\n\n```python\ndef source_from_cache(path):\n    \"\"\"Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147/488 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    if sys.implementation.cache_tag is None:\n        raise NotImplementedError('sys.implementation.cache_tag is None')\n    path = _os.fspath(path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode_source",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "def decode_source(source_bytes):\n    \"\"\"Decode bytes representing source code and return the string.\n    Universal newline support is used in the decoding.\n    \"\"\"\n    import tokenize  # To avoid bootstrap issues.\n    source_bytes_readline = _io.BytesIO(source_bytes).readline\n    encoding = tokenize.detect_encoding(source_bytes_readline)\n    newline_decoder = _io.IncrementalNewlineDecoder(None, True)\n    return newline_decoder.decode(source_bytes.decode(encoding[0]))\n# Module specifications #######################################################",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import decode_source\n```\n\n```python\n\n\n```\n\n```python\ndef decode_source(source_bytes):\n    \"\"\"Decode bytes representing source code and return the string.\n    Universal newline support is used in the decoding.\n    \"\"\"\n    import tokenize  # To avoid bootstrap issues.\n    source_bytes_readline = _io.BytesIO(source_bytes).readline\n    encoding = tokenize.detect_encoding(source_bytes_readline)\n    newline_decoder = _io.IncrementalNewlineDecoder(None, True)\n    return newline_decoder.decode(source_bytes.decode(encoding[0]))\n# Module specifications #######################################################\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "spec_from_file_location",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "def spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"\n    if location is None:",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import spec_from_file_location\n```\n\n```python\n\n\n```\n\n```python\ndef spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"\n    if location is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS_STR_KEY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS_STR_KEY = 'win',\n_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _CASE_INSENSITIVE_PLATFORMS_STR_KEY\n```\n\n```python\n\n\n```\n\n```python\n_CASE_INSENSITIVE_PLATFORMS_STR_KEY = 'win',\n_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n```\n\n```python\n\n\n```\n\n```python\n_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():\n            \"\"\"True if filenames must be checked case-insensitively.\"\"\"",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _CASE_INSENSITIVE_PLATFORMS\n```\n\n```python\n\n\n```\n\n```python\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():\n            \"\"\"True if filenames must be checked case-insensitively.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_code_type",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_code_type = type(_write_atomic.__code__)\n# Finder/loader utility code ###############################################\n# Magic word to reject .pyc files generated by other Python versions.\n# It should change for each incompatible change to the bytecode.\n#\n# The value of CR and LF is incorporated so if you ever read or write\n# a .pyc file in text mode the magic number will be wrong; also, the\n# Apple MPW compiler swaps their values, botching string constants.\n#\n# There were a variety of old schemes for setting the magic number.",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _code_type\n```\n\n```python\n\n\n```\n\n```python\n_code_type = type(_write_atomic.__code__)\n# Finder/loader utility code ###############################################\n# Magic word to reject .pyc files generated by other Python versions.\n# It should change for each incompatible change to the bytecode.\n#\n# The value of CR and LF is incorporated so if you ever read or write\n# a .pyc file in text mode the magic number will be wrong; also, the\n# Apple MPW compiler swaps their values, botching string constants.\n#\n# There were a variety of old schemes for setting the magic number.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAGIC_NUMBER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "MAGIC_NUMBER = (3413).to_bytes(2, 'little') + b'\\r\\n'\n_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import MAGIC_NUMBER\n```\n\n```python\n\n\n```\n\n```python\nMAGIC_NUMBER = (3413).to_bytes(2, 'little') + b'\\r\\n'\n_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_RAW_MAGIC_NUMBER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _RAW_MAGIC_NUMBER\n```\n\n```python\n\n\n```\n\n```python\n_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_PYCACHE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _PYCACHE\n```\n\n```python\n\n\n```\n\n```python\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_OPT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _OPT\n```\n\n```python\n\n\n```\n\n```python\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SOURCE_SUFFIXES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "SOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import SOURCE_SUFFIXES\n```\n\n```python\n\n\n```\n\n```python\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BYTECODE_SUFFIXES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "BYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import BYTECODE_SUFFIXES\n```\n\n```python\n\n\n```\n\n```python\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEBUG_BYTECODE_SUFFIXES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "DEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import DEBUG_BYTECODE_SUFFIXES\n```\n\n```python\n\n\n```\n\n```python\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_POPULATE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "_POPULATE = object()\ndef spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import _POPULATE\n```\n\n```python\n\n\n```\n\n```python\n_POPULATE = object()\ndef spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EXTENSION_SUFFIXES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib._bootstrap_external",
        "description": "venv.lib.python3.8.importlib._bootstrap_external",
        "peekOfCode": "EXTENSION_SUFFIXES = []\nclass ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and",
        "detail": "venv.lib.python3.8.importlib._bootstrap_external",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib._bootstrap_external import EXTENSION_SUFFIXES\n```\n\n```python\n\n\n```\n\n```python\nEXTENSION_SUFFIXES = []\nclass ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Finder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class Finder(metaclass=abc.ABCMeta):\n    \"\"\"Legacy abstract base class for import finders.\n    It may be subclassed for compatibility with legacy third party\n    reimplementations of the import system.  Otherwise, finder\n    implementations should derive from the more specific MetaPathFinder\n    or PathEntryFinder ABCs.\n    Deprecated since Python 3.3\n    \"\"\"\n    @abc.abstractmethod\n    def find_module(self, fullname, path=None):",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import Finder\n```\n\n```python\n\n\n```\n\n```python\nclass Finder(metaclass=abc.ABCMeta):\n    \"\"\"Legacy abstract base class for import finders.\n    It may be subclassed for compatibility with legacy third party\n    reimplementations of the import system.  Otherwise, finder\n    implementations should derive from the more specific MetaPathFinder\n    or PathEntryFinder ABCs.\n    Deprecated since Python 3.3\n    \"\"\"\n    @abc.abstractmethod\n    def find_module(self, fullname, path=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MetaPathFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class MetaPathFinder(Finder):\n    \"\"\"Abstract base class for import finders on sys.meta_path.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_module(self, fullname, path):\n        \"\"\"Return a loader for the module.\n        If no module is found, return None.  The fullname is a str and\n        the path is a list of strings or None.\n        This method is deprecated since Python 3.4 in favor of\n        finder.find_spec(). If find_spec() exists then backwards-compatible",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import MetaPathFinder\n```\n\n```python\n\n\n```\n\n```python\nclass MetaPathFinder(Finder):\n    \"\"\"Abstract base class for import finders on sys.meta_path.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_module(self, fullname, path):\n        \"\"\"Return a loader for the module.\n        If no module is found, return None.  The fullname is a str and\n        the path is a list of strings or None.\n        This method is deprecated since Python 3.4 in favor of\n        finder.find_spec(). If find_spec() exists then backwards-compatible\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PathEntryFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class PathEntryFinder(Finder):\n    \"\"\"Abstract base class for path entry finders used by PathFinder.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_loader(self, fullname):\n        \"\"\"Return (loader, namespace portion) for the path entry.\n        The fullname is a str.  The namespace portion is a sequence of\n        path entries contributing to part of a namespace package. The\n        sequence may be empty.  If loader is not None, the portion will\n        be ignored.",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import PathEntryFinder\n```\n\n```python\n\n\n```\n\n```python\nclass PathEntryFinder(Finder):\n    \"\"\"Abstract base class for path entry finders used by PathFinder.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_loader(self, fullname):\n        \"\"\"Return (loader, namespace portion) for the path entry.\n        The fullname is a str.  The namespace portion is a sequence of\n        path entries contributing to part of a namespace package. The\n        sequence may be empty.  If loader is not None, the portion will\n        be ignored.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Loader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class Loader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class for import loaders.\"\"\"\n    def create_module(self, spec):\n        \"\"\"Return a module to initialize and into which to load.\n        This method should raise ImportError if anything prevents it\n        from creating a new module.  It may return None to indicate\n        that the spec should create the new module.\n        \"\"\"\n        # By default, defer to default semantics for the new module.\n        return None",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import Loader\n```\n\n```python\n\n\n```\n\n```python\nclass Loader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class for import loaders.\"\"\"\n    def create_module(self, spec):\n        \"\"\"Return a module to initialize and into which to load.\n        This method should raise ImportError if anything prevents it\n        from creating a new module.  It may return None to indicate\n        that the spec should create the new module.\n        \"\"\"\n        # By default, defer to default semantics for the new module.\n        return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ResourceLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class ResourceLoader(Loader):\n    \"\"\"Abstract base class for loaders which can return data from their\n    back-end storage.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_data(self, path):\n        \"\"\"Abstract method which when implemented should return the bytes for\n        the specified path.  The path must be a str.\"\"\"\n        raise OSError",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import ResourceLoader\n```\n\n```python\n\n\n```\n\n```python\nclass ResourceLoader(Loader):\n    \"\"\"Abstract base class for loaders which can return data from their\n    back-end storage.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_data(self, path):\n        \"\"\"Abstract method which when implemented should return the bytes for\n        the specified path.  The path must be a str.\"\"\"\n        raise OSError\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "InspectLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class InspectLoader(Loader):\n    \"\"\"Abstract base class for loaders which support inspection about the\n    modules they can load.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    def is_package(self, fullname):\n        \"\"\"Optional method which when implemented should return whether the\n        module is a package.  The fullname is a str.  Returns a bool.\n        Raises ImportError if the module cannot be found.\n        \"\"\"",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import InspectLoader\n```\n\n```python\n\n\n```\n\n```python\nclass InspectLoader(Loader):\n    \"\"\"Abstract base class for loaders which support inspection about the\n    modules they can load.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    def is_package(self, fullname):\n        \"\"\"Optional method which when implemented should return whether the\n        module is a package.  The fullname is a str.  Returns a bool.\n        Raises ImportError if the module cannot be found.\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExecutionLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class ExecutionLoader(InspectLoader):\n    \"\"\"Abstract base class for loaders that wish to support the execution of\n    modules as scripts.\n    This ABC represents one of the optional protocols specified in PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_filename(self, fullname):\n        \"\"\"Abstract method which should return the value that __file__ is to be\n        set to.\n        Raises ImportError if the module cannot be found.",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import ExecutionLoader\n```\n\n```python\n\n\n```\n\n```python\nclass ExecutionLoader(InspectLoader):\n    \"\"\"Abstract base class for loaders that wish to support the execution of\n    modules as scripts.\n    This ABC represents one of the optional protocols specified in PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_filename(self, fullname):\n        \"\"\"Abstract method which should return the value that __file__ is to be\n        set to.\n        Raises ImportError if the module cannot be found.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FileLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class FileLoader(_bootstrap_external.FileLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class partially implementing the ResourceLoader and\n    ExecutionLoader ABCs.\"\"\"\n_register(FileLoader, machinery.SourceFileLoader,\n            machinery.SourcelessFileLoader)\nclass SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import FileLoader\n```\n\n```python\n\n\n```\n\n```python\nclass FileLoader(_bootstrap_external.FileLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class partially implementing the ResourceLoader and\n    ExecutionLoader ABCs.\"\"\"\n_register(FileLoader, machinery.SourceFileLoader,\n            machinery.SourcelessFileLoader)\nclass SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourceLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\n    loading from bytecode, the optional methods specified directly by this ABC\n    is required.\n    Inherited abstractmethods not implemented in this ABC:\n        * ResourceLoader.get_data\n        * ExecutionLoader.get_filename",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import SourceLoader\n```\n\n```python\n\n\n```\n\n```python\nclass SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\n    loading from bytecode, the optional methods specified directly by this ABC\n    is required.\n    Inherited abstractmethods not implemented in this ABC:\n        * ResourceLoader.get_data\n        * ExecutionLoader.get_filename\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ResourceReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.abc",
        "description": "venv.lib.python3.8.importlib.abc",
        "peekOfCode": "class ResourceReader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class to provide resource-reading support.\n    Loaders that support resource reading are expected to implement\n    the ``get_resource_reader(fullname)`` method and have it either return None\n    or an object compatible with this ABC.\n    \"\"\"\n    @abc.abstractmethod\n    def open_resource(self, resource):\n        \"\"\"Return an opened, file-like object for binary reading.\n        The 'resource' argument is expected to represent only a file name",
        "detail": "venv.lib.python3.8.importlib.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.abc import ResourceReader\n```\n\n```python\n\n\n```\n\n```python\nclass ResourceReader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class to provide resource-reading support.\n    Loaders that support resource reading are expected to implement\n    the ``get_resource_reader(fullname)`` method and have it either return None\n    or an object compatible with this ABC.\n    \"\"\"\n    @abc.abstractmethod\n    def open_resource(self, resource):\n        \"\"\"Return an opened, file-like object for binary reading.\n        The 'resource' argument is expected to represent only a file name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "all_suffixes",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.machinery",
        "description": "venv.lib.python3.8.importlib.machinery",
        "peekOfCode": "def all_suffixes():\n    \"\"\"Returns a list of all recognized module suffixes for this process\"\"\"\n    return SOURCE_SUFFIXES + BYTECODE_SUFFIXES + EXTENSION_SUFFIXES",
        "detail": "venv.lib.python3.8.importlib.machinery",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.machinery import all_suffixes\n```\n\n```python\n\n\n```\n\n```python\ndef all_suffixes():\n    \"\"\"Returns a list of all recognized module suffixes for this process\"\"\"\n    return SOURCE_SUFFIXES + BYTECODE_SUFFIXES + EXTENSION_SUFFIXES\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PackageNotFoundError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class PackageNotFoundError(ModuleNotFoundError):\n    \"\"\"The package was not found.\"\"\"\nclass EntryPoint(collections.namedtuple('EntryPointBase', 'name value group')):\n    \"\"\"An entry point as defined by Python packaging conventions.\n    See `the packaging docs on entry points\n    <https://packaging.python.org/specifications/entry-points/>`_\n    for more information.\n    \"\"\"\n    pattern = re.compile(\n        r'(?P<module>[\\w.]+)\\s*'",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import PackageNotFoundError\n```\n\n```python\n\n\n```\n\n```python\nclass PackageNotFoundError(ModuleNotFoundError):\n    \"\"\"The package was not found.\"\"\"\nclass EntryPoint(collections.namedtuple('EntryPointBase', 'name value group')):\n    \"\"\"An entry point as defined by Python packaging conventions.\n    See `the packaging docs on entry points\n    <https://packaging.python.org/specifications/entry-points/>`_\n    for more information.\n    \"\"\"\n    pattern = re.compile(\n        r'(?P<module>[\\w.]+)\\s*'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EntryPoint",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class EntryPoint(collections.namedtuple('EntryPointBase', 'name value group')):\n    \"\"\"An entry point as defined by Python packaging conventions.\n    See `the packaging docs on entry points\n    <https://packaging.python.org/specifications/entry-points/>`_\n    for more information.\n    \"\"\"\n    pattern = re.compile(\n        r'(?P<module>[\\w.]+)\\s*'\n        r'(:\\s*(?P<attr>[\\w.]+))?\\s*'\n        r'(?P<extras>\\[.*\\])?\\s*$'",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import EntryPoint\n```\n\n```python\n\n\n```\n\n```python\nclass EntryPoint(collections.namedtuple('EntryPointBase', 'name value group')):\n    \"\"\"An entry point as defined by Python packaging conventions.\n    See `the packaging docs on entry points\n    <https://packaging.python.org/specifications/entry-points/>`_\n    for more information.\n    \"\"\"\n    pattern = re.compile(\n        r'(?P<module>[\\w.]+)\\s*'\n        r'(:\\s*(?P<attr>[\\w.]+))?\\s*'\n        r'(?P<extras>\\[.*\\])?\\s*$'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PackagePath",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class PackagePath(pathlib.PurePosixPath):\n    \"\"\"A reference to a path in a package\"\"\"\n    def read_text(self, encoding='utf-8'):\n        with self.locate().open(encoding=encoding) as stream:\n            return stream.read()\n    def read_binary(self):\n        with self.locate().open('rb') as stream:\n            return stream.read()\n    def locate(self):\n        \"\"\"Return a path-like object for this path\"\"\"",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import PackagePath\n```\n\n```python\n\n\n```\n\n```python\nclass PackagePath(pathlib.PurePosixPath):\n    \"\"\"A reference to a path in a package\"\"\"\n    def read_text(self, encoding='utf-8'):\n        with self.locate().open(encoding=encoding) as stream:\n            return stream.read()\n    def read_binary(self):\n        with self.locate().open('rb') as stream:\n            return stream.read()\n    def locate(self):\n        \"\"\"Return a path-like object for this path\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FileHash",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class FileHash:\n    def __init__(self, spec):\n        self.mode, _, self.value = spec.partition('=')\n    def __repr__(self):\n        return '<FileHash mode: {} value: {}>'.format(self.mode, self.value)\nclass Distribution:\n    \"\"\"A Python distribution package.\"\"\"\n    @abc.abstractmethod\n    def read_text(self, filename):\n        \"\"\"Attempt to load metadata file given by the name.",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import FileHash\n```\n\n```python\n\n\n```\n\n```python\nclass FileHash:\n    def __init__(self, spec):\n        self.mode, _, self.value = spec.partition('=')\n    def __repr__(self):\n        return '<FileHash mode: {} value: {}>'.format(self.mode, self.value)\nclass Distribution:\n    \"\"\"A Python distribution package.\"\"\"\n    @abc.abstractmethod\n    def read_text(self, filename):\n        \"\"\"Attempt to load metadata file given by the name.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Distribution",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class Distribution:\n    \"\"\"A Python distribution package.\"\"\"\n    @abc.abstractmethod\n    def read_text(self, filename):\n        \"\"\"Attempt to load metadata file given by the name.\n        :param filename: The name of the file in the distribution info.\n        :return: The text if found, otherwise None.\n        \"\"\"\n    @abc.abstractmethod\n    def locate_file(self, path):",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import Distribution\n```\n\n```python\n\n\n```\n\n```python\nclass Distribution:\n    \"\"\"A Python distribution package.\"\"\"\n    @abc.abstractmethod\n    def read_text(self, filename):\n        \"\"\"Attempt to load metadata file given by the name.\n        :param filename: The name of the file in the distribution info.\n        :return: The text if found, otherwise None.\n        \"\"\"\n    @abc.abstractmethod\n    def locate_file(self, path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DistributionFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class DistributionFinder(MetaPathFinder):\n    \"\"\"\n    A MetaPathFinder capable of discovering installed distributions.\n    \"\"\"\n    class Context:\n        name = None\n        \"\"\"\n        Specific name for which a distribution finder should match.\n        \"\"\"\n        def __init__(self, **kwargs):",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import DistributionFinder\n```\n\n```python\n\n\n```\n\n```python\nclass DistributionFinder(MetaPathFinder):\n    \"\"\"\n    A MetaPathFinder capable of discovering installed distributions.\n    \"\"\"\n    class Context:\n        name = None\n        \"\"\"\n        Specific name for which a distribution finder should match.\n        \"\"\"\n        def __init__(self, **kwargs):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MetadataPathFinder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class MetadataPathFinder(DistributionFinder):\n    @classmethod\n    def find_distributions(cls, context=DistributionFinder.Context()):\n        \"\"\"\n        Find distributions.\n        Return an iterable of all Distribution instances capable of\n        loading the metadata for packages matching ``context.name``\n        (or all names if ``None`` indicated) along the paths in the list\n        of directories ``context.path``.\n        \"\"\"",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import MetadataPathFinder\n```\n\n```python\n\n\n```\n\n```python\nclass MetadataPathFinder(DistributionFinder):\n    @classmethod\n    def find_distributions(cls, context=DistributionFinder.Context()):\n        \"\"\"\n        Find distributions.\n        Return an iterable of all Distribution instances capable of\n        loading the metadata for packages matching ``context.name``\n        (or all names if ``None`` indicated) along the paths in the list\n        of directories ``context.path``.\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PathDistribution",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "class PathDistribution(Distribution):\n    def __init__(self, path):\n        \"\"\"Construct a distribution from a path to the metadata directory.\n        :param path: A pathlib.Path or similar object supporting\n                     .joinpath(), __div__, .parent, and .read_text().\n        \"\"\"\n        self._path = path\n    def read_text(self, filename):\n        with suppress(FileNotFoundError, IsADirectoryError, KeyError,\n                      NotADirectoryError, PermissionError):",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import PathDistribution\n```\n\n```python\n\n\n```\n\n```python\nclass PathDistribution(Distribution):\n    def __init__(self, path):\n        \"\"\"Construct a distribution from a path to the metadata directory.\n        :param path: A pathlib.Path or similar object supporting\n                     .joinpath(), __div__, .parent, and .read_text().\n        \"\"\"\n        self._path = path\n    def read_text(self, filename):\n        with suppress(FileNotFoundError, IsADirectoryError, KeyError,\n                      NotADirectoryError, PermissionError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "distribution",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def distribution(distribution_name):\n    \"\"\"Get the ``Distribution`` instance for the named package.\n    :param distribution_name: The name of the distribution package as a string.\n    :return: A ``Distribution`` instance (or subclass thereof).\n    \"\"\"\n    return Distribution.from_name(distribution_name)\ndef distributions(**kwargs):\n    \"\"\"Get all ``Distribution`` instances in the current environment.\n    :return: An iterable of ``Distribution`` instances.\n    \"\"\"",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import distribution\n```\n\n```python\n\n\n```\n\n```python\ndef distribution(distribution_name):\n    \"\"\"Get the ``Distribution`` instance for the named package.\n    :param distribution_name: The name of the distribution package as a string.\n    :return: A ``Distribution`` instance (or subclass thereof).\n    \"\"\"\n    return Distribution.from_name(distribution_name)\ndef distributions(**kwargs):\n    \"\"\"Get all ``Distribution`` instances in the current environment.\n    :return: An iterable of ``Distribution`` instances.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "distributions",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def distributions(**kwargs):\n    \"\"\"Get all ``Distribution`` instances in the current environment.\n    :return: An iterable of ``Distribution`` instances.\n    \"\"\"\n    return Distribution.discover(**kwargs)\ndef metadata(distribution_name):\n    \"\"\"Get the metadata for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: An email.Message containing the parsed metadata.\n    \"\"\"",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import distributions\n```\n\n```python\n\n\n```\n\n```python\ndef distributions(**kwargs):\n    \"\"\"Get all ``Distribution`` instances in the current environment.\n    :return: An iterable of ``Distribution`` instances.\n    \"\"\"\n    return Distribution.discover(**kwargs)\ndef metadata(distribution_name):\n    \"\"\"Get the metadata for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: An email.Message containing the parsed metadata.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "metadata",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def metadata(distribution_name):\n    \"\"\"Get the metadata for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: An email.Message containing the parsed metadata.\n    \"\"\"\n    return Distribution.from_name(distribution_name).metadata\ndef version(distribution_name):\n    \"\"\"Get the version string for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: The version string for the package as defined in the package's",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import metadata\n```\n\n```python\n\n\n```\n\n```python\ndef metadata(distribution_name):\n    \"\"\"Get the metadata for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: An email.Message containing the parsed metadata.\n    \"\"\"\n    return Distribution.from_name(distribution_name).metadata\ndef version(distribution_name):\n    \"\"\"Get the version string for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: The version string for the package as defined in the package's\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def version(distribution_name):\n    \"\"\"Get the version string for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: The version string for the package as defined in the package's\n        \"Version\" metadata key.\n    \"\"\"\n    return distribution(distribution_name).version\ndef entry_points():\n    \"\"\"Return EntryPoint objects for all installed packages.\n    :return: EntryPoint objects for all installed packages.",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import version\n```\n\n```python\n\n\n```\n\n```python\ndef version(distribution_name):\n    \"\"\"Get the version string for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: The version string for the package as defined in the package's\n        \"Version\" metadata key.\n    \"\"\"\n    return distribution(distribution_name).version\ndef entry_points():\n    \"\"\"Return EntryPoint objects for all installed packages.\n    :return: EntryPoint objects for all installed packages.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "entry_points",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def entry_points():\n    \"\"\"Return EntryPoint objects for all installed packages.\n    :return: EntryPoint objects for all installed packages.\n    \"\"\"\n    eps = itertools.chain.from_iterable(\n        dist.entry_points for dist in distributions())\n    by_group = operator.attrgetter('group')\n    ordered = sorted(eps, key=by_group)\n    grouped = itertools.groupby(ordered, by_group)\n    return {",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import entry_points\n```\n\n```python\n\n\n```\n\n```python\ndef entry_points():\n    \"\"\"Return EntryPoint objects for all installed packages.\n    :return: EntryPoint objects for all installed packages.\n    \"\"\"\n    eps = itertools.chain.from_iterable(\n        dist.entry_points for dist in distributions())\n    by_group = operator.attrgetter('group')\n    ordered = sorted(eps, key=by_group)\n    grouped = itertools.groupby(ordered, by_group)\n    return {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "files",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def files(distribution_name):\n    \"\"\"Return a list of files for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: List of files composing the distribution.\n    \"\"\"\n    return distribution(distribution_name).files\ndef requires(distribution_name):\n    \"\"\"\n    Return a list of requirements for the named package.\n    :return: An iterator of requirements, suitable for",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import files\n```\n\n```python\n\n\n```\n\n```python\ndef files(distribution_name):\n    \"\"\"Return a list of files for the named package.\n    :param distribution_name: The name of the distribution package to query.\n    :return: List of files composing the distribution.\n    \"\"\"\n    return distribution(distribution_name).files\ndef requires(distribution_name):\n    \"\"\"\n    Return a list of requirements for the named package.\n    :return: An iterator of requirements, suitable for\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "requires",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "def requires(distribution_name):\n    \"\"\"\n    Return a list of requirements for the named package.\n    :return: An iterator of requirements, suitable for\n    packaging.requirement.Requirement.\n    \"\"\"\n    return distribution(distribution_name).requires",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import requires\n```\n\n```python\n\n\n```\n\n```python\ndef requires(distribution_name):\n    \"\"\"\n    Return a list of requirements for the named package.\n    :return: An iterator of requirements, suitable for\n    packaging.requirement.Requirement.\n    \"\"\"\n    return distribution(distribution_name).requires\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.metadata",
        "description": "venv.lib.python3.8.importlib.metadata",
        "peekOfCode": "__all__ = [\n    'Distribution',\n    'DistributionFinder',\n    'PackageNotFoundError',\n    'distribution',\n    'distributions',\n    'entry_points',\n    'files',\n    'metadata',\n    'requires',",
        "detail": "venv.lib.python3.8.importlib.metadata",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.metadata import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    'Distribution',\n    'DistributionFinder',\n    'PackageNotFoundError',\n    'distribution',\n    'distributions',\n    'entry_points',\n    'files',\n    'metadata',\n    'requires',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open_binary",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def open_binary(package: Package, resource: Resource) -> BinaryIO:\n    \"\"\"Return a file-like object opened for binary reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.open_resource(resource)\n    _check_location(package)\n    absolute_package_path = os.path.abspath(package.__spec__.origin)\n    package_path = os.path.dirname(absolute_package_path)",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import open_binary\n```\n\n```python\n\n\n```\n\n```python\ndef open_binary(package: Package, resource: Resource) -> BinaryIO:\n    \"\"\"Return a file-like object opened for binary reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.open_resource(resource)\n    _check_location(package)\n    absolute_package_path = os.path.abspath(package.__spec__.origin)\n    package_path = os.path.dirname(absolute_package_path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open_text",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def open_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> TextIO:\n    \"\"\"Return a file-like object opened for text reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return TextIOWrapper(reader.open_resource(resource), encoding, errors)",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import open_text\n```\n\n```python\n\n\n```\n\n```python\ndef open_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> TextIO:\n    \"\"\"Return a file-like object opened for text reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return TextIOWrapper(reader.open_resource(resource), encoding, errors)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_binary",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def read_binary(package: Package, resource: Resource) -> bytes:\n    \"\"\"Return the binary contents of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    with open_binary(package, resource) as fp:\n        return fp.read()\ndef read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import read_binary\n```\n\n```python\n\n\n```\n\n```python\ndef read_binary(package: Package, resource: Resource) -> bytes:\n    \"\"\"Return the binary contents of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    with open_binary(package, resource) as fp:\n        return fp.read()\ndef read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_text",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:\n    \"\"\"Return the decoded string of the resource.\n    The decoding-related arguments have the same semantics as those of\n    bytes.decode().\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import read_text\n```\n\n```python\n\n\n```\n\n```python\ndef read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:\n    \"\"\"Return the decoded string of the resource.\n    The decoding-related arguments have the same semantics as those of\n    bytes.decode().\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def path(package: Package, resource: Resource) -> Iterator[Path]:\n    \"\"\"A context manager providing a file path object to the resource.\n    If the resource does not already exist on its own on the file system,\n    a temporary file will be created. If the file was created, the file\n    will be deleted upon exiting the context manager (no exception is\n    raised if the file was deleted prior to the context manager\n    exiting).\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import path\n```\n\n```python\n\n\n```\n\n```python\ndef path(package: Package, resource: Resource) -> Iterator[Path]:\n    \"\"\"A context manager providing a file path object to the resource.\n    If the resource does not already exist on its own on the file system,\n    a temporary file will be created. If the file was created, the file\n    will be deleted upon exiting the context manager (no exception is\n    raised if the file was deleted prior to the context manager\n    exiting).\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_resource",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def is_resource(package: Package, name: str) -> bool:\n    \"\"\"True if 'name' is a resource inside 'package'.\n    Directories are *not* resources.\n    \"\"\"\n    package = _get_package(package)\n    _normalize_path(name)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.is_resource(name)\n    try:",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import is_resource\n```\n\n```python\n\n\n```\n\n```python\ndef is_resource(package: Package, name: str) -> bool:\n    \"\"\"True if 'name' is a resource inside 'package'.\n    Directories are *not* resources.\n    \"\"\"\n    package = _get_package(package)\n    _normalize_path(name)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.is_resource(name)\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "contents",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "def contents(package: Package) -> Iterable[str]:\n    \"\"\"Return an iterable of entries in 'package'.\n    Note that not all entries are resources.  Specifically, directories are\n    not considered resources.  Use `is_resource()` on each entry returned here\n    to check if it is a resource or not.\n    \"\"\"\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.contents()",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import contents\n```\n\n```python\n\n\n```\n\n```python\ndef contents(package: Package) -> Iterable[str]:\n    \"\"\"Return an iterable of entries in 'package'.\n    Note that not all entries are resources.  Specifically, directories are\n    not considered resources.  Use `is_resource()` on each entry returned here\n    to check if it is a resource or not.\n    \"\"\"\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.contents()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "__all__ = [\n    'Package',\n    'Resource',\n    'contents',\n    'is_resource',\n    'open_binary',\n    'open_text',\n    'path',\n    'read_binary',\n    'read_text',",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    'Package',\n    'Resource',\n    'contents',\n    'is_resource',\n    'open_binary',\n    'open_text',\n    'path',\n    'read_binary',\n    'read_text',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Package",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "Package = Union[str, ModuleType]\nResource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import Package\n```\n\n```python\n\n\n```\n\n```python\nPackage = Union[str, ModuleType]\nResource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Resource",
        "kind": 5,
        "importPath": "venv.lib.python3.8.importlib.resources",
        "description": "venv.lib.python3.8.importlib.resources",
        "peekOfCode": "Resource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(\n                package.__spec__.name))",
        "detail": "venv.lib.python3.8.importlib.resources",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.resources import Resource\n```\n\n```python\n\n\n```\n\n```python\nResource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(\n                package.__spec__.name))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LazyModule",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "class _LazyModule(types.ModuleType):\n    \"\"\"A subclass of the module type which triggers loading upon attribute access.\"\"\"\n    def __getattribute__(self, attr):\n        \"\"\"Trigger the load of the module and return the attribute.\"\"\"\n        # All module metadata must be garnered from __spec__ in order to avoid\n        # using mutated values.\n        # Stop triggering this method.\n        self.__class__ = types.ModuleType\n        # Get the original name to make sure no object substitution occurred\n        # in sys.modules.",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import _LazyModule\n```\n\n```python\n\n\n```\n\n```python\nclass _LazyModule(types.ModuleType):\n    \"\"\"A subclass of the module type which triggers loading upon attribute access.\"\"\"\n    def __getattribute__(self, attr):\n        \"\"\"Trigger the load of the module and return the attribute.\"\"\"\n        # All module metadata must be garnered from __spec__ in order to avoid\n        # using mutated values.\n        # Stop triggering this method.\n        self.__class__ = types.ModuleType\n        # Get the original name to make sure no object substitution occurred\n        # in sys.modules.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LazyLoader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "class LazyLoader(abc.Loader):\n    \"\"\"A loader that creates a module which defers loading until attribute access.\"\"\"\n    @staticmethod\n    def __check_eager_loader(loader):\n        if not hasattr(loader, 'exec_module'):\n            raise TypeError('loader must define exec_module()')\n    @classmethod\n    def factory(cls, loader):\n        \"\"\"Construct a callable which returns the eager loader made lazy.\"\"\"\n        cls.__check_eager_loader(loader)",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import LazyLoader\n```\n\n```python\n\n\n```\n\n```python\nclass LazyLoader(abc.Loader):\n    \"\"\"A loader that creates a module which defers loading until attribute access.\"\"\"\n    @staticmethod\n    def __check_eager_loader(loader):\n        if not hasattr(loader, 'exec_module'):\n            raise TypeError('loader must define exec_module()')\n    @classmethod\n    def factory(cls, loader):\n        \"\"\"Construct a callable which returns the eager loader made lazy.\"\"\"\n        cls.__check_eager_loader(loader)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "source_hash",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def source_hash(source_bytes):\n    \"Return the hash of *source_bytes* as used in hash-based pyc files.\"\n    return _imp.source_hash(_RAW_MAGIC_NUMBER, source_bytes)\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import source_hash\n```\n\n```python\n\n\n```\n\n```python\ndef source_hash(source_bytes):\n    \"Return the hash of *source_bytes* as used in hash-based pyc files.\"\n    return _imp.source_hash(_RAW_MAGIC_NUMBER, source_bytes)\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "resolve_name",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n    level = 0\n    for character in name:\n        if character != '.':",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import resolve_name\n```\n\n```python\n\n\n```\n\n```python\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n    level = 0\n    for character in name:\n        if character != '.':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "find_spec",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def find_spec(name, package=None):\n    \"\"\"Return the spec for the specified module.\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n    If the name is for submodule (contains a dot), the parent module is\n    automatically imported.",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import find_spec\n```\n\n```python\n\n\n```\n\n```python\ndef find_spec(name, package=None):\n    \"\"\"Return the spec for the specified module.\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n    If the name is for submodule (contains a dot), the parent module is\n    automatically imported.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "set_package",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_package_wrapper(*args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import set_package\n```\n\n```python\n\n\n```\n\n```python\ndef set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_package_wrapper(*args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "set_loader",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_loader_wrapper(self, *args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(self, *args, **kwargs)\n        if getattr(module, '__loader__', None) is None:",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import set_loader\n```\n\n```python\n\n\n```\n\n```python\ndef set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_loader_wrapper(self, *args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(self, *args, **kwargs)\n        if getattr(module, '__loader__', None) is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "module_for_loader",
        "kind": 2,
        "importPath": "venv.lib.python3.8.importlib.util",
        "description": "venv.lib.python3.8.importlib.util",
        "peekOfCode": "def module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n    If an exception is raised and the decorator created the module it is",
        "detail": "venv.lib.python3.8.importlib.util",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.importlib.util import module_for_loader\n```\n\n```python\n\n\n```\n\n```python\ndef module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n    If an exception is raised and the decorator created the module it is\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Feature",
        "kind": 6,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "class _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):\n        \"\"\"Return first release in which this feature was recognized.\n        This is a 5-tuple, of the same form as sys.version_info.\n        \"\"\"\n        return self.optional",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import _Feature\n```\n\n```python\n\n\n```\n\n```python\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):\n        \"\"\"Return first release in which this feature was recognized.\n        This is a 5-tuple, of the same form as sys.version_info.\n        \"\"\"\n        return self.optional\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "all_feature_names",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "all_feature_names = [\n    \"nested_scopes\",\n    \"generators\",\n    \"division\",\n    \"absolute_import\",\n    \"with_statement\",\n    \"print_function\",\n    \"unicode_literals\",\n    \"barry_as_FLUFL\",\n    \"generator_stop\",",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import all_feature_names\n```\n\n```python\n\n\n```\n\n```python\nall_feature_names = [\n    \"nested_scopes\",\n    \"generators\",\n    \"division\",\n    \"absolute_import\",\n    \"with_statement\",\n    \"print_function\",\n    \"unicode_literals\",\n    \"barry_as_FLUFL\",\n    \"generator_stop\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "__all__ = [\"all_feature_names\"] + all_feature_names\n# The CO_xxx symbols are defined here under the same names defined in\n# code.h and used by compile.h, so that an editor search will find them here.\n# However, they're not exported in __all__, because they don't really belong to\n# this module.\nCO_NESTED            = 0x0010   # nested_scopes\nCO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)\nCO_FUTURE_DIVISION   = 0x2000   # division\nCO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"all_feature_names\"] + all_feature_names\n# The CO_xxx symbols are defined here under the same names defined in\n# code.h and used by compile.h, so that an editor search will find them here.\n# However, they're not exported in __all__, because they don't really belong to\n# this module.\nCO_NESTED            = 0x0010   # nested_scopes\nCO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)\nCO_FUTURE_DIVISION   = 0x2000   # division\nCO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CO_GENERATOR_ALLOWED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "CO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)\nCO_FUTURE_DIVISION   = 0x2000   # division\nCO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement\nCO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function\nCO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import CO_GENERATOR_ALLOWED\n```\n\n```python\n\n\n```\n\n```python\nCO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)\nCO_FUTURE_DIVISION   = 0x2000   # division\nCO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement\nCO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function\nCO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CO_FUTURE_ABSOLUTE_IMPORT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement\nCO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function\nCO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import CO_FUTURE_ABSOLUTE_IMPORT\n```\n\n```python\n\n\n```\n\n```python\nCO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default\nCO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement\nCO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function\nCO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CO_FUTURE_UNICODE_LITERALS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import CO_FUTURE_UNICODE_LITERALS\n```\n\n```python\n\n\n```\n\n```python\nCO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CO_FUTURE_BARRY_AS_BDFL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "CO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):\n        \"\"\"Return first release in which this feature was recognized.",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import CO_FUTURE_BARRY_AS_BDFL\n```\n\n```python\n\n\n```\n\n```python\nCO_FUTURE_BARRY_AS_BDFL = 0x40000\nCO_FUTURE_GENERATOR_STOP  = 0x80000 # StopIteration becomes RuntimeError in generators\nCO_FUTURE_ANNOTATIONS     = 0x100000  # annotations become strings at runtime\nclass _Feature:\n    def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\n        self.optional = optionalRelease\n        self.mandatory = mandatoryRelease\n        self.compiler_flag = compiler_flag\n    def getOptionalRelease(self):\n        \"\"\"Return first release in which this feature was recognized.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nested_scopes",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "nested_scopes = _Feature((2, 1, 0, \"beta\",  1),\n                         (2, 2, 0, \"alpha\", 0),\n                         CO_NESTED)\ngenerators = _Feature((2, 2, 0, \"alpha\", 1),\n                      (2, 3, 0, \"final\", 0),\n                      CO_GENERATOR_ALLOWED)\ndivision = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import nested_scopes\n```\n\n```python\n\n\n```\n\n```python\nnested_scopes = _Feature((2, 1, 0, \"beta\",  1),\n                         (2, 2, 0, \"alpha\", 0),\n                         CO_NESTED)\ngenerators = _Feature((2, 2, 0, \"alpha\", 1),\n                      (2, 3, 0, \"final\", 0),\n                      CO_GENERATOR_ALLOWED)\ndivision = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generators",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "generators = _Feature((2, 2, 0, \"alpha\", 1),\n                      (2, 3, 0, \"final\", 0),\n                      CO_GENERATOR_ALLOWED)\ndivision = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import generators\n```\n\n```python\n\n\n```\n\n```python\ngenerators = _Feature((2, 2, 0, \"alpha\", 1),\n                      (2, 3, 0, \"final\", 0),\n                      CO_GENERATOR_ALLOWED)\ndivision = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "division",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "division = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import division\n```\n\n```python\n\n\n```\n\n```python\ndivision = _Feature((2, 2, 0, \"alpha\", 2),\n                    (3, 0, 0, \"alpha\", 0),\n                    CO_FUTURE_DIVISION)\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "absolute_import",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "absolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import absolute_import\n```\n\n```python\n\n\n```\n\n```python\nabsolute_import = _Feature((2, 5, 0, \"alpha\", 1),\n                           (3, 0, 0, \"alpha\", 0),\n                           CO_FUTURE_ABSOLUTE_IMPORT)\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "with_statement",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "with_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import with_statement\n```\n\n```python\n\n\n```\n\n```python\nwith_statement = _Feature((2, 5, 0, \"alpha\", 1),\n                          (2, 6, 0, \"alpha\", 0),\n                          CO_FUTURE_WITH_STATEMENT)\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "print_function",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "print_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import print_function\n```\n\n```python\n\n\n```\n\n```python\nprint_function = _Feature((2, 6, 0, \"alpha\", 2),\n                          (3, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_PRINT_FUNCTION)\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unicode_literals",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "unicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import unicode_literals\n```\n\n```python\n\n\n```\n\n```python\nunicode_literals = _Feature((2, 6, 0, \"alpha\", 2),\n                            (3, 0, 0, \"alpha\", 0),\n                            CO_FUTURE_UNICODE_LITERALS)\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "barry_as_FLUFL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "barry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import barry_as_FLUFL\n```\n\n```python\n\n\n```\n\n```python\nbarry_as_FLUFL = _Feature((3, 1, 0, \"alpha\", 2),\n                          (4, 0, 0, \"alpha\", 0),\n                          CO_FUTURE_BARRY_AS_BDFL)\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_stop",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "generator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import generator_stop\n```\n\n```python\n\n\n```\n\n```python\ngenerator_stop = _Feature((3, 5, 0, \"beta\", 1),\n                          (3, 7, 0, \"alpha\", 0),\n                          CO_FUTURE_GENERATOR_STOP)\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "annotations",
        "kind": 5,
        "importPath": "venv.lib.python3.8.__future__",
        "description": "venv.lib.python3.8.__future__",
        "peekOfCode": "annotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)",
        "detail": "venv.lib.python3.8.__future__",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.__future__ import annotations\n```\n\n```python\n\n\n```\n\n```python\nannotations = _Feature((3, 7, 0, \"beta\", 1),\n                       (4, 0, 0, \"alpha\", 0),\n                       CO_FUTURE_ANNOTATIONS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Hashable",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Hashable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __hash__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Hashable\n```\n\n```python\n\n\n```\n\n```python\nclass Hashable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __hash__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Awaitable",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Awaitable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __await__(self):\n        yield\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Awaitable\n```\n\n```python\n\n\n```\n\n```python\nclass Awaitable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __await__(self):\n        yield\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Coroutine",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Coroutine(Awaitable):\n    __slots__ = ()\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Coroutine\n```\n\n```python\n\n\n```\n\n```python\nclass Coroutine(Awaitable):\n    __slots__ = ()\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AsyncIterable",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class AsyncIterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import AsyncIterable\n```\n\n```python\n\n\n```\n\n```python\nclass AsyncIterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AsyncIterator",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class AsyncIterator(AsyncIterable):\n    __slots__ = ()\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n    def __aiter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import AsyncIterator\n```\n\n```python\n\n\n```\n\n```python\nclass AsyncIterator(AsyncIterable):\n    __slots__ = ()\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n    def __aiter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AsyncGenerator",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class AsyncGenerator(AsyncIterator):\n    __slots__ = ()\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import AsyncGenerator\n```\n\n```python\n\n\n```\n\n```python\nclass AsyncGenerator(AsyncIterator):\n    __slots__ = ()\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Iterable",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Iterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Iterable\n```\n\n```python\n\n\n```\n\n```python\nclass Iterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Iterator",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Iterator(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n    def __iter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Iterator\n```\n\n```python\n\n\n```\n\n```python\nclass Iterator(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n    def __iter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Reversible",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Reversible(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Reversible\n```\n\n```python\n\n\n```\n\n```python\nclass Reversible(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Generator",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Generator(Iterator):\n    __slots__ = ()\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Generator\n```\n\n```python\n\n\n```\n\n```python\nclass Generator(Iterator):\n    __slots__ = ()\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sized",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Sized(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __len__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Sized\n```\n\n```python\n\n\n```\n\n```python\nclass Sized(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __len__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Container(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Container\n```\n\n```python\n\n\n```\n\n```python\nclass Container(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Collection",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Collection(Sized, Iterable, Container):\n    __slots__ = ()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\nclass Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Collection\n```\n\n```python\n\n\n```\n\n```python\nclass Collection(Sized, Iterable, Container):\n    __slots__ = ()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\nclass Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Callable",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Callable\n```\n\n```python\n\n\n```\n\n```python\nclass Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Set",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Set(Collection):\n    \"\"\"A set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()\n    def __le__(self, other):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Set\n```\n\n```python\n\n\n```\n\n```python\nclass Set(Collection):\n    \"\"\"A set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()\n    def __le__(self, other):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MutableSet",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import MutableSet\n```\n\n```python\n\n\n```\n\n```python\nclass MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Mapping",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Mapping(Collection):\n    __slots__ = ()\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Mapping\n```\n\n```python\n\n\n```\n\n```python\nclass Mapping(Collection):\n    __slots__ = ()\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MappingView",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class MappingView(Sized):\n    __slots__ = '_mapping',\n    def __init__(self, mapping):\n        self._mapping = mapping\n    def __len__(self):\n        return len(self._mapping)\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\nclass KeysView(MappingView, Set):\n    __slots__ = ()",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import MappingView\n```\n\n```python\n\n\n```\n\n```python\nclass MappingView(Sized):\n    __slots__ = '_mapping',\n    def __init__(self, mapping):\n        self._mapping = mapping\n    def __len__(self):\n        return len(self._mapping)\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\nclass KeysView(MappingView, Set):\n    __slots__ = ()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KeysView",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class KeysView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, key):\n        return key in self._mapping\n    def __iter__(self):\n        yield from self._mapping\nKeysView.register(dict_keys)",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import KeysView\n```\n\n```python\n\n\n```\n\n```python\nclass KeysView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, key):\n        return key in self._mapping\n    def __iter__(self):\n        yield from self._mapping\nKeysView.register(dict_keys)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ItemsView",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class ItemsView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import ItemsView\n```\n\n```python\n\n\n```\n\n```python\nclass ItemsView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValuesView",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class ValuesView(MappingView, Collection):\n    __slots__ = ()\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n    def __iter__(self):\n        for key in self._mapping:",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import ValuesView\n```\n\n```python\n\n\n```\n\n```python\nclass ValuesView(MappingView, Collection):\n    __slots__ = ()\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n    def __iter__(self):\n        for key in self._mapping:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MutableMapping",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class MutableMapping(Mapping):\n    __slots__ = ()\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, key, value):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import MutableMapping\n```\n\n```python\n\n\n```\n\n```python\nclass MutableMapping(Mapping):\n    __slots__ = ()\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, key, value):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sequence",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class Sequence(Reversible, Collection):\n    \"\"\"All the operations on a read-only sequence.\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n    def __iter__(self):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import Sequence\n```\n\n```python\n\n\n```\n\n```python\nclass Sequence(Reversible, Collection):\n    \"\"\"All the operations on a read-only sequence.\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n    def __iter__(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ByteString",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class ByteString(Sequence):\n    \"\"\"This unifies bytes and bytearray.\n    XXX Should add all their methods.\n    \"\"\"\n    __slots__ = ()\nByteString.register(bytes)\nByteString.register(bytearray)\nclass MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import ByteString\n```\n\n```python\n\n\n```\n\n```python\nclass ByteString(Sequence):\n    \"\"\"This unifies bytes and bytearray.\n    XXX Should add all their methods.\n    \"\"\"\n    __slots__ = ()\nByteString.register(bytes)\nByteString.register(bytearray)\nclass MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MutableSequence",
        "kind": 6,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "class MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n    @abstractmethod",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import MutableSequence\n```\n\n```python\n\n\n```\n\n```python\nclass MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n    @abstractmethod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__name__",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "__name__ = \"collections.abc\"\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import __name__\n```\n\n```python\n\n\n```\n\n```python\n__name__ = \"collections.abc\"\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bytes_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "bytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import bytes_iterator\n```\n\n```python\n\n\n```\n\n```python\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bytearray_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "bytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import bytearray_iterator\n```\n\n```python\n\n\n```\n\n```python\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#callable_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import #callable_iterator\n```\n\n```python\n\n\n```\n\n```python\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_keyiterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_keyiterator\n```\n\n```python\n\n\n```\n\n```python\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_valueiterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_valueiterator\n```\n\n```python\n\n\n```\n\n```python\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_itemiterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_itemiterator\n```\n\n```python\n\n\n```\n\n```python\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "list_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "list_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import list_iterator\n```\n\n```python\n\n\n```\n\n```python\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "list_reverseiterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "list_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import list_reverseiterator\n```\n\n```python\n\n\n```\n\n```python\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "range_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "range_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import range_iterator\n```\n\n```python\n\n\n```\n\n```python\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "longrange_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "longrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import longrange_iterator\n```\n\n```python\n\n\n```\n\n```python\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "set_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "set_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import set_iterator\n```\n\n```python\n\n\n```\n\n```python\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "str_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "str_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import str_iterator\n```\n\n```python\n\n\n```\n\n```python\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tuple_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "tuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import tuple_iterator\n```\n\n```python\n\n\n```\n\n```python\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zip_iterator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "zip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import zip_iterator\n```\n\n```python\n\n\n```\n\n```python\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_keys",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_keys\n```\n\n```python\n\n\n```\n\n```python\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_values",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_values\n```\n\n```python\n\n\n```\n\n```python\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dict_items",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "dict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import dict_items\n```\n\n```python\n\n\n```\n\n```python\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mappingproxy",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "mappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import mappingproxy\n```\n\n```python\n\n\n```\n\n```python\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "generator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import generator\n```\n\n```python\n\n\n```\n\n```python\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_coro",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import _coro\n```\n\n```python\n\n\n```\n\n```python\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "coroutine",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "coroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import coroutine\n```\n\n```python\n\n\n```\n\n```python\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ag",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import _ag\n```\n\n```python\n\n\n```\n\n```python\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "async_generator",
        "kind": 5,
        "importPath": "venv.lib.python3.8._collections_abc",
        "description": "venv.lib.python3.8._collections_abc",
        "peekOfCode": "async_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented",
        "detail": "venv.lib.python3.8._collections_abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._collections_abc import async_generator\n```\n\n```python\n\n\n```\n\n```python\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LockType",
        "kind": 6,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "class LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n    \"\"\"\n    def __init__(self):\n        self.locked_status = False",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import LockType\n```\n\n```python\n\n\n```\n\n```python\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n    \"\"\"\n    def __init__(self):\n        self.locked_status = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RLock",
        "kind": 6,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "class RLock(LockType):\n    \"\"\"Dummy implementation of threading._RLock.\n    Re-entrant lock can be aquired multiple times and needs to be released\n    just as many times. This dummy implemention does not check wheter the\n    current thread actually owns the lock, but does accounting on the call\n    counts.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._levels = 0",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import RLock\n```\n\n```python\n\n\n```\n\n```python\nclass RLock(LockType):\n    \"\"\"Dummy implementation of threading._RLock.\n    Re-entrant lock can be aquired multiple times and needs to be released\n    just as many times. This dummy implemention does not check wheter the\n    current thread actually owns the lock, but does accounting on the call\n    counts.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._levels = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "start_new_thread",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n    \"\"\"",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import start_new_thread\n```\n\n```python\n\n\n```\n\n```python\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exit",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def exit():\n    \"\"\"Dummy implementation of _thread.exit().\"\"\"\n    raise SystemExit\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import exit\n```\n\n```python\n\n\n```\n\n```python\ndef exit():\n    \"\"\"Dummy implementation of _thread.exit().\"\"\"\n    raise SystemExit\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_ident",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import get_ident\n```\n\n```python\n\n\n```\n\n```python\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "allocate_lock",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import allocate_lock\n```\n\n```python\n\n\n```\n\n```python\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "stack_size",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"\n    return LockType()\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import stack_size\n```\n\n```python\n\n\n```\n\n```python\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"\n    return LockType()\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "interrupt_main",
        "kind": 2,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "def interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import interrupt_main\n```\n\n```python\n\n\n```\n\n```python\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',\n           'interrupt_main', 'LockType', 'RLock']\n# A dummy value\nTIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',\n           'interrupt_main', 'LockType', 'RLock']\n# A dummy value\nTIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TIMEOUT_MAX",
        "kind": 5,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "TIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import TIMEOUT_MAX\n```\n\n```python\n\n\n```\n\n```python\nTIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "error = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import error\n```\n\n```python\n\n\n```\n\n```python\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_interrupt",
        "kind": 5,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "_interrupt = False\n# True when not executing in a \"thread\"\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import _interrupt\n```\n\n```python\n\n\n```\n\n```python\n_interrupt = False\n# True when not executing in a \"thread\"\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_main",
        "kind": 5,
        "importPath": "venv.lib.python3.8._dummy_thread",
        "description": "venv.lib.python3.8._dummy_thread",
        "peekOfCode": "_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True",
        "detail": "venv.lib.python3.8._dummy_thread",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._dummy_thread import _main\n```\n\n```python\n\n\n```\n\n```python\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_IterationGuard",
        "kind": 6,
        "importPath": "venv.lib.python3.8._weakrefset",
        "description": "venv.lib.python3.8._weakrefset",
        "peekOfCode": "class _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):\n        w = self.weakcontainer()",
        "detail": "venv.lib.python3.8._weakrefset",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._weakrefset import _IterationGuard\n```\n\n```python\n\n\n```\n\n```python\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):\n        w = self.weakcontainer()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeakSet",
        "kind": 6,
        "importPath": "venv.lib.python3.8._weakrefset",
        "description": "venv.lib.python3.8._weakrefset",
        "peekOfCode": "class WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)",
        "detail": "venv.lib.python3.8._weakrefset",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._weakrefset import WeakSet\n```\n\n```python\n\n\n```\n\n```python\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8._weakrefset",
        "description": "venv.lib.python3.8._weakrefset",
        "peekOfCode": "__all__ = ['WeakSet']\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):",
        "detail": "venv.lib.python3.8._weakrefset",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8._weakrefset import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['WeakSet']\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abstractclassmethod",
        "kind": 6,
        "importPath": "venv.lib.python3.8.abc",
        "description": "venv.lib.python3.8.abc",
        "peekOfCode": "class abstractclassmethod(classmethod):\n    \"\"\"A decorator indicating abstract classmethods.\n    Deprecated, use 'classmethod' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.",
        "detail": "venv.lib.python3.8.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.abc import abstractclassmethod\n```\n\n```python\n\n\n```\n\n```python\nclass abstractclassmethod(classmethod):\n    \"\"\"A decorator indicating abstract classmethods.\n    Deprecated, use 'classmethod' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abstractstaticmethod",
        "kind": 6,
        "importPath": "venv.lib.python3.8.abc",
        "description": "venv.lib.python3.8.abc",
        "peekOfCode": "class abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.\n    Deprecated, use 'staticmethod' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.",
        "detail": "venv.lib.python3.8.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.abc import abstractstaticmethod\n```\n\n```python\n\n\n```\n\n```python\nclass abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.\n    Deprecated, use 'staticmethod' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abstractproperty",
        "kind": 6,
        "importPath": "venv.lib.python3.8.abc",
        "description": "venv.lib.python3.8.abc",
        "peekOfCode": "class abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.\n    Deprecated, use 'property' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\ntry:\n    from _abc import (get_cache_token, _abc_init, _abc_register,\n                      _abc_instancecheck, _abc_subclasscheck, _get_dump,\n                      _reset_registry, _reset_caches)\nexcept ImportError:",
        "detail": "venv.lib.python3.8.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.abc import abstractproperty\n```\n\n```python\n\n\n```\n\n```python\nclass abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.\n    Deprecated, use 'property' with 'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\ntry:\n    from _abc import (get_cache_token, _abc_init, _abc_register,\n                      _abc_instancecheck, _abc_subclasscheck, _get_dump,\n                      _reset_registry, _reset_caches)\nexcept ImportError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ABC",
        "kind": 6,
        "importPath": "venv.lib.python3.8.abc",
        "description": "venv.lib.python3.8.abc",
        "peekOfCode": "class ABC(metaclass=ABCMeta):\n    \"\"\"Helper class that provides a standard way to create an ABC using\n    inheritance.\n    \"\"\"\n    __slots__ = ()",
        "detail": "venv.lib.python3.8.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.abc import ABC\n```\n\n```python\n\n\n```\n\n```python\nclass ABC(metaclass=ABCMeta):\n    \"\"\"Helper class that provides a standard way to create an ABC using\n    inheritance.\n    \"\"\"\n    __slots__ = ()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abstractmethod",
        "kind": 2,
        "importPath": "venv.lib.python3.8.abc",
        "description": "venv.lib.python3.8.abc",
        "peekOfCode": "def abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.  abstractmethod() may be used to declare\n    abstract methods for properties and descriptors.\n    Usage:\n        class C(metaclass=ABCMeta):",
        "detail": "venv.lib.python3.8.abc",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.abc import abstractmethod\n```\n\n```python\n\n\n```\n\n```python\ndef abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.  abstractmethod() may be used to declare\n    abstract methods for properties and descriptors.\n    Usage:\n        class C(metaclass=ABCMeta):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b64encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b64encode(s, altchars=None):\n    \"\"\"Encode the bytes-like object s using Base64 and return a bytes object.\n    Optional altchars should be a byte string of length 2 which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n    \"\"\"\n    encoded = binascii.b2a_base64(s, newline=False)\n    if altchars is not None:\n        assert len(altchars) == 2, repr(altchars)\n        return encoded.translate(bytes.maketrans(b'+/', altchars))",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b64encode\n```\n\n```python\n\n\n```\n\n```python\ndef b64encode(s, altchars=None):\n    \"\"\"Encode the bytes-like object s using Base64 and return a bytes object.\n    Optional altchars should be a byte string of length 2 which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n    \"\"\"\n    encoded = binascii.b2a_base64(s, newline=False)\n    if altchars is not None:\n        assert len(altchars) == 2, repr(altchars)\n        return encoded.translate(bytes.maketrans(b'+/', altchars))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b64decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b64decode(s, altchars=None, validate=False):\n    \"\"\"Decode the Base64 encoded bytes-like object or ASCII string s.\n    Optional altchars must be a bytes-like object or ASCII string of length 2\n    which specifies the alternative alphabet used instead of the '+' and '/'\n    characters.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded.\n    If validate is False (the default), characters that are neither in the\n    normal base-64 alphabet nor the alternative alphabet are discarded prior\n    to the padding check.  If validate is True, these non-alphabet characters",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b64decode\n```\n\n```python\n\n\n```\n\n```python\ndef b64decode(s, altchars=None, validate=False):\n    \"\"\"Decode the Base64 encoded bytes-like object or ASCII string s.\n    Optional altchars must be a bytes-like object or ASCII string of length 2\n    which specifies the alternative alphabet used instead of the '+' and '/'\n    characters.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded.\n    If validate is False (the default), characters that are neither in the\n    normal base-64 alphabet nor the alternative alphabet are discarded prior\n    to the padding check.  If validate is True, these non-alphabet characters\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "standard_b64encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def standard_b64encode(s):\n    \"\"\"Encode bytes-like object s using the standard Base64 alphabet.\n    The result is returned as a bytes object.\n    \"\"\"\n    return b64encode(s)\ndef standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import standard_b64encode\n```\n\n```python\n\n\n```\n\n```python\ndef standard_b64encode(s):\n    \"\"\"Encode bytes-like object s using the standard Base64 alphabet.\n    The result is returned as a bytes object.\n    \"\"\"\n    return b64encode(s)\ndef standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "standard_b64decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet\n    are discarded prior to the padding check.\n    \"\"\"\n    return b64decode(s)\n_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import standard_b64decode\n```\n\n```python\n\n\n```\n\n```python\ndef standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet\n    are discarded prior to the padding check.\n    \"\"\"\n    return b64decode(s)\n_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlsafe_b64encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import urlsafe_b64encode\n```\n\n```python\n\n\n```\n\n```python\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlsafe_b64decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the URL-safe base-64\n    alphabet, and are not a plus '+' or slash '/', are discarded prior to the\n    padding check.\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    \"\"\"\n    s = _bytes_from_decode_data(s)",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import urlsafe_b64decode\n```\n\n```python\n\n\n```\n\n```python\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the URL-safe base-64\n    alphabet, and are not a plus '+' or slash '/', are discarded prior to the\n    padding check.\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b32encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]\n        b32tab = None",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b32encode\n```\n\n```python\n\n\n```\n\n```python\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]\n        b32tab = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b32decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b32decode(s, casefold=False, map01=None):\n    \"\"\"Decode the Base32 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n    letter O (oh), and for optional mapping of the digit 1 (one) to\n    either the letter I (eye) or letter L (el).  The optional argument\n    map01 when not None, specifies which letter the digit 1 should be\n    mapped to (when map01 is not None, the digit 0 is always mapped to\n    the letter O).  For security purposes the default is None, so that",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b32decode\n```\n\n```python\n\n\n```\n\n```python\ndef b32decode(s, casefold=False, map01=None):\n    \"\"\"Decode the Base32 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n    letter O (oh), and for optional mapping of the digit 1 (one) to\n    either the letter I (eye) or letter L (el).  The optional argument\n    map01 when not None, specifies which letter the digit 1 should be\n    mapped to (when map01 is not None, the digit 0 is always mapped to\n    the letter O).  For security purposes the default is None, so that\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b16encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b16encode(s):\n    \"\"\"Encode the bytes-like object s using Base16 and return a bytes object.\n    \"\"\"\n    return binascii.hexlify(s).upper()\ndef b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b16encode\n```\n\n```python\n\n\n```\n\n```python\ndef b16encode(s):\n    \"\"\"Encode the bytes-like object s using Base16 and return a bytes object.\n    \"\"\"\n    return binascii.hexlify(s).upper()\ndef b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b16decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present\n    in the input.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    if casefold:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b16decode\n```\n\n```python\n\n\n```\n\n```python\ndef b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present\n    in the input.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    if casefold:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a85encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False):\n    \"\"\"Encode bytes-like object b using Ascii85 and return a bytes object.\n    foldspaces is an optional flag that uses the special short sequence 'y'\n    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This\n    feature is not supported by the \"standard\" Adobe encoding.\n    wrapcol controls whether the output should have newline (b'\\\\n') characters\n    added to it. If this is non-zero, each output line will be at most this\n    many characters long.\n    pad controls whether the input is padded to a multiple of 4 before\n    encoding. Note that the btoa implementation always pads.",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import a85encode\n```\n\n```python\n\n\n```\n\n```python\ndef a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False):\n    \"\"\"Encode bytes-like object b using Ascii85 and return a bytes object.\n    foldspaces is an optional flag that uses the special short sequence 'y'\n    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This\n    feature is not supported by the \"standard\" Adobe encoding.\n    wrapcol controls whether the output should have newline (b'\\\\n') characters\n    added to it. If this is non-zero, each output line will be at most this\n    many characters long.\n    pad controls whether the input is padded to a multiple of 4 before\n    encoding. Note that the btoa implementation always pads.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "a85decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v'):\n    \"\"\"Decode the Ascii85 encoded bytes-like object or ASCII string b.\n    foldspaces is a flag that specifies whether the 'y' short sequence should be\n    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is\n    not supported by the \"standard\" Adobe encoding.\n    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.\n    is framed with <~ and ~>).\n    ignorechars should be a byte string containing characters to ignore from the\n    input. This should only contain whitespace characters, and by default\n    contains all whitespace characters in ASCII.",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import a85decode\n```\n\n```python\n\n\n```\n\n```python\ndef a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v'):\n    \"\"\"Decode the Ascii85 encoded bytes-like object or ASCII string b.\n    foldspaces is a flag that specifies whether the 'y' short sequence should be\n    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is\n    not supported by the \"standard\" Adobe encoding.\n    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.\n    is framed with <~ and ~>).\n    ignorechars should be a byte string containing characters to ignore from the\n    input. This should only contain whitespace characters, and by default\n    contains all whitespace characters in ASCII.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b85encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:\n        _b85chars = [bytes((i,)) for i in _b85alphabet]",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b85encode\n```\n\n```python\n\n\n```\n\n```python\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:\n        _b85chars = [bytes((i,)) for i in _b85alphabet]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "b85decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def b85decode(b):\n    \"\"\"Decode the base85-encoded bytes-like object or ASCII string b\n    The result is returned as a bytes object.\n    \"\"\"\n    global _b85dec\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85dec is None:\n        _b85dec = [None] * 256\n        for i, c in enumerate(_b85alphabet):",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import b85decode\n```\n\n```python\n\n\n```\n\n```python\ndef b85decode(b):\n    \"\"\"Decode the base85-encoded bytes-like object or ASCII string b\n    The result is returned as a bytes object.\n    \"\"\"\n    global _b85dec\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85dec is None:\n        _b85dec = [None] * 256\n        for i, c in enumerate(_b85alphabet):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:\n                break",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import encode\n```\n\n```python\n\n\n```\n\n```python\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:\n                break\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def decode(input, output):\n    \"\"\"Decode a file; input and output are binary files.\"\"\"\n    while True:\n        line = input.readline()\n        if not line:\n            break\n        s = binascii.a2b_base64(line)\n        output.write(s)\ndef _input_type_check(s):\n    try:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import decode\n```\n\n```python\n\n\n```\n\n```python\ndef decode(input, output):\n    \"\"\"Decode a file; input and output are binary files.\"\"\"\n    while True:\n        line = input.readline()\n        if not line:\n            break\n        s = binascii.a2b_base64(line)\n        output.write(s)\ndef _input_type_check(s):\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encodebytes",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def encodebytes(s):\n    \"\"\"Encode a bytestring into a bytes object containing multiple lines\n    of base-64 data.\"\"\"\n    _input_type_check(s)\n    pieces = []\n    for i in range(0, len(s), MAXBINSIZE):\n        chunk = s[i : i + MAXBINSIZE]\n        pieces.append(binascii.b2a_base64(chunk))\n    return b\"\".join(pieces)\ndef encodestring(s):",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import encodebytes\n```\n\n```python\n\n\n```\n\n```python\ndef encodebytes(s):\n    \"\"\"Encode a bytestring into a bytes object containing multiple lines\n    of base-64 data.\"\"\"\n    _input_type_check(s)\n    pieces = []\n    for i in range(0, len(s), MAXBINSIZE):\n        chunk = s[i : i + MAXBINSIZE]\n        pieces.append(binascii.b2a_base64(chunk))\n    return b\"\".join(pieces)\ndef encodestring(s):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "encodestring",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def encodestring(s):\n    \"\"\"Legacy alias of encodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"encodestring() is a deprecated alias since 3.1, \"\n                  \"use encodebytes()\",\n                  DeprecationWarning, 2)\n    return encodebytes(s)\ndef decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import encodestring\n```\n\n```python\n\n\n```\n\n```python\ndef encodestring(s):\n    \"\"\"Legacy alias of encodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"encodestring() is a deprecated alias since 3.1, \"\n                  \"use encodebytes()\",\n                  DeprecationWarning, 2)\n    return encodebytes(s)\ndef decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decodebytes",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)\n    return binascii.a2b_base64(s)\ndef decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import decodebytes\n```\n\n```python\n\n\n```\n\n```python\ndef decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)\n    return binascii.a2b_base64(s)\ndef decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "decodestring",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)\n    return decodebytes(s)\n# Usable as a script...\ndef main():\n    \"\"\"Small main program\"\"\"",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import decodestring\n```\n\n```python\n\n\n```\n\n```python\ndef decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)\n    return decodebytes(s)\n# Usable as a script...\ndef main():\n    \"\"\"Small main program\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def main():\n    \"\"\"Small main program\"\"\"\n    import sys, getopt\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'deut')\n    except getopt.error as msg:\n        sys.stdout = sys.stderr\n        print(msg)\n        print(\"\"\"usage: %s [-d|-e|-u|-t] [file|-]\n        -d, -u: decode",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    \"\"\"Small main program\"\"\"\n    import sys, getopt\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'deut')\n    except getopt.error as msg:\n        sys.stdout = sys.stderr\n        print(msg)\n        print(\"\"\"usage: %s [-d|-e|-u|-t] [file|-]\n        -d, -u: decode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "def test():\n    s0 = b\"Aladdin:open sesame\"\n    print(repr(s0))\n    s1 = encodebytes(s0)\n    print(repr(s1))\n    s2 = decodebytes(s1)\n    print(repr(s2))\n    assert s0 == s2\nif __name__ == '__main__':\n    main()",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import test\n```\n\n```python\n\n\n```\n\n```python\ndef test():\n    s0 = b\"Aladdin:open sesame\"\n    print(repr(s0))\n    s1 = encodebytes(s0)\n    print(repr(s1))\n    s2 = decodebytes(s1)\n    print(repr(s2))\n    assert s0 == s2\nif __name__ == '__main__':\n    main()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "__all__ = [\n    # Legacy interface exports traditional RFC 2045 Base64 encodings\n    'encode', 'decode', 'encodebytes', 'decodebytes',\n    # Generalized interface for other encodings\n    'b64encode', 'b64decode', 'b32encode', 'b32decode',\n    'b16encode', 'b16decode',\n    # Base85 and Ascii85 encodings\n    'b85encode', 'b85decode', 'a85encode', 'a85decode',\n    # Standard Base64 encoding\n    'standard_b64encode', 'standard_b64decode',",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    # Legacy interface exports traditional RFC 2045 Base64 encodings\n    'encode', 'decode', 'encodebytes', 'decodebytes',\n    # Generalized interface for other encodings\n    'b64encode', 'b64decode', 'b32encode', 'b32decode',\n    'b16encode', 'b16decode',\n    # Base85 and Ascii85 encodings\n    'b85encode', 'b85decode', 'a85encode', 'a85decode',\n    # Standard Base64 encoding\n    'standard_b64encode', 'standard_b64decode',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bytes_types",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "bytes_types = (bytes, bytearray)  # Types acceptable as binary data\ndef _bytes_from_decode_data(s):\n    if isinstance(s, str):\n        try:\n            return s.encode('ascii')\n        except UnicodeEncodeError:\n            raise ValueError('string argument should contain only ASCII characters')\n    if isinstance(s, bytes_types):\n        return s\n    try:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import bytes_types\n```\n\n```python\n\n\n```\n\n```python\nbytes_types = (bytes, bytearray)  # Types acceptable as binary data\ndef _bytes_from_decode_data(s):\n    if isinstance(s, str):\n        try:\n            return s.encode('ascii')\n        except UnicodeEncodeError:\n            raise ValueError('string argument should contain only ASCII characters')\n    if isinstance(s, bytes_types):\n        return s\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_urlsafe_encode_translation",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _urlsafe_encode_translation\n```\n\n```python\n\n\n```\n\n```python\n_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_urlsafe_decode_translation",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _urlsafe_decode_translation\n```\n\n```python\n\n\n```\n\n```python\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b32alphabet",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b32alphabet = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\n_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b32alphabet\n```\n\n```python\n\n\n```\n\n```python\n_b32alphabet = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\n_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b32tab2",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b32tab2\n```\n\n```python\n\n\n```\n\n```python\n_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b32rev",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b32rev\n```\n\n```python\n\n\n```\n\n```python\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_a85chars",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_a85chars = None\n_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _a85chars\n```\n\n```python\n\n\n```\n\n```python\n_a85chars = None\n_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_a85chars2",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _a85chars2\n```\n\n```python\n\n\n```\n\n```python\n_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_A85START",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _A85START\n```\n\n```python\n\n\n```\n\n```python\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_A85END",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)\n    chunks = [b'z' if foldnuls and not word else",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _A85END\n```\n\n```python\n\n\n```\n\n```python\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)\n    chunks = [b'z' if foldnuls and not word else\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b85alphabet",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b85alphabet = (b\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                b\"abcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~\")\n_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b85alphabet\n```\n\n```python\n\n\n```\n\n```python\n_b85alphabet = (b\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                b\"abcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~\")\n_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b85chars",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b85chars\n```\n\n```python\n\n\n```\n\n```python\n_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b85chars2",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b85chars2\n```\n\n```python\n\n\n```\n\n```python\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_b85dec",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import _b85dec\n```\n\n```python\n\n\n```\n\n```python\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXLINESIZE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "MAXLINESIZE = 76 # Excluding the CRLF\nMAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import MAXLINESIZE\n```\n\n```python\n\n\n```\n\n```python\nMAXLINESIZE = 76 # Excluding the CRLF\nMAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXBINSIZE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.base64",
        "description": "venv.lib.python3.8.base64",
        "peekOfCode": "MAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:",
        "detail": "venv.lib.python3.8.base64",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.base64 import MAXBINSIZE\n```\n\n```python\n\n\n```\n\n```python\nMAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "insort_right",
        "kind": 2,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "def insort_right(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the right of the rightmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    lo = bisect_right(a, x, lo, hi)\n    a.insert(lo, x)\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import insort_right\n```\n\n```python\n\n\n```\n\n```python\ndef insort_right(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the right of the rightmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    lo = bisect_right(a, x, lo, hi)\n    a.insert(lo, x)\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bisect_right",
        "kind": 2,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "def bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import bisect_right\n```\n\n```python\n\n\n```\n\n```python\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "insort_left",
        "kind": 2,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "def insort_left(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the left of the leftmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    lo = bisect_left(a, x, lo, hi)\n    a.insert(lo, x)\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import insort_left\n```\n\n```python\n\n\n```\n\n```python\ndef insort_left(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the left of the leftmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    lo = bisect_left(a, x, lo, hi)\n    a.insert(lo, x)\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bisect_left",
        "kind": 2,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "def bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import bisect_left\n```\n\n```python\n\n\n```\n\n```python\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bisect",
        "kind": 5,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "bisect = bisect_right\ninsort = insort_right",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import bisect\n```\n\n```python\n\n\n```\n\n```python\nbisect = bisect_right\ninsort = insort_right\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "insort",
        "kind": 5,
        "importPath": "venv.lib.python3.8.bisect",
        "description": "venv.lib.python3.8.bisect",
        "peekOfCode": "insort = insort_right",
        "detail": "venv.lib.python3.8.bisect",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.bisect import insort\n```\n\n```python\n\n\n```\n\n```python\ninsort = insort_right\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CodecInfo",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import CodecInfo\n```\n\n```python\n\n\n```\n\n```python\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class Codec:\n    \"\"\" Defines the interface for stateless encoders/decoders.\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import Codec\n```\n\n```python\n\n\n```\n\n```python\nclass Codec:\n    \"\"\" Defines the interface for stateless encoders/decoders.\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n        The IncrementalEncoder may use different error handling schemes by",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import IncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n        The IncrementalEncoder may use different error handling schemes by\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedIncrementalEncoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = \"\"",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BufferedIncrementalEncoder\n```\n\n```python\n\n\n```\n\n```python\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = \"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create an IncrementalDecoder instance.\n        The IncrementalDecoder may use different error handling schemes by",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import IncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create an IncrementalDecoder instance.\n        The IncrementalDecoder may use different error handling schemes by\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedIncrementalDecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b\"\"",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BufferedIncrementalDecoder\n```\n\n```python\n\n\n```\n\n```python\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class StreamWriter(Codec):\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamWriter instance.\n            stream must be a file-like object open for writing.\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import StreamWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamWriter(Codec):\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamWriter instance.\n            stream must be a file-like object open for writing.\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class StreamReader(Codec):\n    charbuffertype = str\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamReader instance.\n            stream must be a file-like object open for reading.\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import StreamReader\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReader(Codec):\n    charbuffertype = str\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamReader instance.\n            stream must be a file-like object open for reading.\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamReaderWriter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class StreamReaderWriter:\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    encoding = 'unknown'\n    def __init__(self, stream, Reader, Writer, errors='strict'):",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import StreamReaderWriter\n```\n\n```python\n\n\n```\n\n```python\nclass StreamReaderWriter:\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    encoding = 'unknown'\n    def __init__(self, stream, Reader, Writer, errors='strict'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamRecoder",
        "kind": 6,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "class StreamRecoder:\n    \"\"\" StreamRecoder instances translate data from one encoding to another.\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import StreamRecoder\n```\n\n```python\n\n\n```\n\n```python\nclass StreamRecoder:\n    \"\"\" StreamRecoder instances translate data from one encoding to another.\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def open(filename, mode='r', encoding=None, errors='strict', buffering=-1):\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n        encoding specifies the encoding which is to be used for the",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import open\n```\n\n```python\n\n\n```\n\n```python\ndef open(filename, mode='r', encoding=None, errors='strict', buffering=-1):\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n        encoding specifies the encoding which is to be used for the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EncodedFile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n        If file_encoding is not given, it defaults to data_encoding.",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import EncodedFile\n```\n\n```python\n\n\n```\n\n```python\ndef EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n        If file_encoding is not given, it defaults to data_encoding.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getencoder",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).encode\ndef getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getencoder\n```\n\n```python\n\n\n```\n\n```python\ndef getencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).encode\ndef getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getdecoder",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).decode\ndef getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getdecoder\n```\n\n```python\n\n\n```\n\n```python\ndef getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).decode\ndef getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getincrementalencoder",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getincrementalencoder\n```\n\n```python\n\n\n```\n\n```python\ndef getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getincrementaldecoder",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getincrementaldecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getincrementaldecoder\n```\n\n```python\n\n\n```\n\n```python\ndef getincrementaldecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getreader",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getreader(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamreader\ndef getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getreader\n```\n\n```python\n\n\n```\n\n```python\ndef getreader(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamreader\ndef getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getwriter",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamwriter\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import getwriter\n```\n\n```python\n\n\n```\n\n```python\ndef getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamwriter\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iterencode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import iterencode\n```\n\n```python\n\n\n```\n\n```python\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iterdecode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import iterdecode\n```\n\n```python\n\n\n```\n\n```python\ndef iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "make_identity_dict",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def make_identity_dict(rng):\n    \"\"\" make_identity_dict(rng) -> dict\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n    \"\"\"\n    return {i:i for i in rng}\ndef make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import make_identity_dict\n```\n\n```python\n\n\n```\n\n```python\ndef make_identity_dict(rng):\n    \"\"\" make_identity_dict(rng) -> dict\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n    \"\"\"\n    return {i:i for i in rng}\ndef make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "make_encoding_map",
        "kind": 2,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "def make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n    \"\"\"\n    m = {}",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import make_encoding_map\n```\n\n```python\n\n\n```\n\n```python\ndef make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n    \"\"\"\n    m = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"CodecInfo\", \"Codec\", \"IncrementalEncoder\", \"IncrementalDecoder\",\n           \"StreamReader\", \"StreamWriter\",\n           \"StreamReaderWriter\", \"StreamRecoder\",\n           \"getencoder\", \"getdecoder\", \"getincrementalencoder\",\n           \"getincrementaldecoder\", \"getreader\", \"getwriter\",\n           \"encode\", \"decode\", \"iterencode\", \"iterdecode\",",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"CodecInfo\", \"Codec\", \"IncrementalEncoder\", \"IncrementalDecoder\",\n           \"StreamReader\", \"StreamWriter\",\n           \"StreamReaderWriter\", \"StreamRecoder\",\n           \"getencoder\", \"getdecoder\", \"getincrementalencoder\",\n           \"getincrementaldecoder\", \"getreader\", \"getwriter\",\n           \"encode\", \"decode\", \"iterencode\", \"iterdecode\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_UTF8",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM_UTF8 = b'\\xef\\xbb\\xbf'\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM_UTF8\n```\n\n```python\n\n\n```\n\n```python\nBOM_UTF8 = b'\\xef\\xbb\\xbf'\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_LE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM_LE\n```\n\n```python\n\n\n```\n\n```python\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_BE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM_BE\n```\n\n```python\n\n\n```\n\n```python\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_UTF32_LE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM_UTF32_LE\n```\n\n```python\n\n\n```\n\n```python\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM_UTF32_BE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n    # UTF-32, native endianness",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM_UTF32_BE\n```\n\n```python\n\n\n```\n\n```python\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n    # UTF-32, native endianness\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM32_LE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM32_LE\n```\n\n```python\n\n\n```\n\n```python\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM32_BE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM32_BE\n```\n\n```python\n\n\n```\n\n```python\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM64_LE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM64_LE\n```\n\n```python\n\n\n```\n\n```python\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOM64_BE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "BOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import BOM64_BE\n```\n\n```python\n\n\n```\n\n```python\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_false",
        "kind": 5,
        "importPath": "venv.lib.python3.8.codecs",
        "description": "venv.lib.python3.8.codecs",
        "peekOfCode": "_false = 0\nif _false:\n    import encodings\n### Tests\nif __name__ == '__main__':\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')",
        "detail": "venv.lib.python3.8.codecs",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.codecs import _false\n```\n\n```python\n\n\n```\n\n```python\n_false = 0\nif _false:\n    import encodings\n### Tests\nif __name__ == '__main__':\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "instances)",
        "kind": 6,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "class instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import instances)\n```\n\n```python\n\n\n```\n\n```python\nclass instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "class Error(Exception):\n    pass\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import Error\n```\n\n```python\n\n\n```\n\n```python\nclass Error(Exception):\n    pass\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "def copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):\n        # treat it as a regular class:",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import copy\n```\n\n```python\n\n\n```\n\n```python\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):\n        # treat it as a regular class:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "deepcopy",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "def deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import deepcopy\n```\n\n```python\n\n\n```\n\n```python\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "error = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import error\n```\n\n```python\n\n\n```\n\n```python\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    if issubclass(cls, type):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_copy_dispatch",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, complex, str, tuple,\n          bytes, frozenset, type, range, slice,\n          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import _copy_dispatch\n```\n\n```python\n\n\n```\n\n```python\n_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, complex, str, tuple,\n          bytes, frozenset, type, range, slice,\n          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "t = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import t\n```\n\n```python\n\n\n```\n\n```python\nt = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[list]\n```\n\n```python\n\n\n```\n\n```python\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[dict]\n```\n\n```python\n\n\n```\n\n```python\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[set]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[set]\n```\n\n```python\n\n\n```\n\n```python\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[bytearray]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[bytearray]\n```\n\n```python\n\n\n```\n\n```python\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_deepcopy_dispatch",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import _deepcopy_dispatch\n```\n\n```python\n\n\n```\n\n```python\n_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[type(None)]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[type(None)]\n```\n\n```python\n\n\n```\n\n```python\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[type(Ellipsis)]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[type(Ellipsis)]\n```\n\n```python\n\n\n```\n\n```python\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[type(NotImplemented)]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[type(NotImplemented)]\n```\n\n```python\n\n\n```\n\n```python\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[int]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[int]\n```\n\n```python\n\n\n```\n\n```python\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[float]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[float]\n```\n\n```python\n\n\n```\n\n```python\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[bool]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[bool]\n```\n\n```python\n\n\n```\n\n```python\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[complex]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[complex]\n```\n\n```python\n\n\n```\n\n```python\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[bytes]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[bytes]\n```\n\n```python\n\n\n```\n\n```python\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[str]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[str]\n```\n\n```python\n\n\n```\n\n```python\nd[str] = _deepcopy_atomic\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[types.CodeType]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[types.CodeType]\n```\n\n```python\n\n\n```\n\n```python\nd[types.CodeType] = _deepcopy_atomic\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[type]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[type]\n```\n\n```python\n\n\n```\n\n```python\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[types.BuiltinFunctionType]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[types.BuiltinFunctionType]\n```\n\n```python\n\n\n```\n\n```python\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[types.FunctionType]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[types.FunctionType]\n```\n\n```python\n\n\n```\n\n```python\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[weakref.ref]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[weakref.ref]\n```\n\n```python\n\n\n```\n\n```python\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[list]\n```\n\n```python\n\n\n```\n\n```python\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[tuple]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo, deepcopy=deepcopy):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[tuple]\n```\n\n```python\n\n\n```\n\n```python\nd[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo, deepcopy=deepcopy):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[dict]\n```\n\n```python\n\n\n```\n\n```python\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[types.MethodType]",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copy",
        "description": "venv.lib.python3.8.copy",
        "peekOfCode": "d[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...",
        "detail": "venv.lib.python3.8.copy",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copy import d[types.MethodType]\n```\n\n```python\n\n\n```\n\n```python\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pickle",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "def pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):\n    if not callable(object):",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import pickle\n```\n\n```python\n\n\n```\n\n```python\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):\n    if not callable(object):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "constructor",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "def constructor(object):\n    if not callable(object):\n        raise TypeError(\"constructors must be callable\")\n# Example: provide pickling support for complex numbers.\ntry:\n    complex\nexcept NameError:\n    pass\nelse:\n    def pickle_complex(c):",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import constructor\n```\n\n```python\n\n\n```\n\n```python\ndef constructor(object):\n    if not callable(object):\n        raise TypeError(\"constructors must be callable\")\n# Example: provide pickling support for complex numbers.\ntry:\n    complex\nexcept NameError:\n    pass\nelse:\n    def pickle_complex(c):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "add_extension",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "def add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and\n        _inverted_registry.get(code) == key):\n        return # Redundant registrations are benign\n    if key in _extension_registry:",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import add_extension\n```\n\n```python\n\n\n```\n\n```python\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and\n        _inverted_registry.get(code) == key):\n        return # Redundant registrations are benign\n    if key in _extension_registry:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "remove_extension",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "def remove_extension(module, name, code):\n    \"\"\"Unregister an extension code.  For testing only.\"\"\"\n    key = (module, name)\n    if (_extension_registry.get(key) != code or\n        _inverted_registry.get(code) != key):\n        raise ValueError(\"key %s is not registered with code %s\" %\n                         (key, code))\n    del _extension_registry[key]\n    del _inverted_registry[code]\n    if code in _extension_cache:",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import remove_extension\n```\n\n```python\n\n\n```\n\n```python\ndef remove_extension(module, name, code):\n    \"\"\"Unregister an extension code.  For testing only.\"\"\"\n    key = (module, name)\n    if (_extension_registry.get(key) != code or\n        _inverted_registry.get(code) != key):\n        raise ValueError(\"key %s is not registered with code %s\" %\n                         (key, code))\n    del _extension_registry[key]\n    del _inverted_registry[code]\n    if code in _extension_cache:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "clear_extension_cache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "def clear_extension_cache():\n    _extension_cache.clear()\n# Standard extension code assignments\n# Reserved ranges\n# First  Last Count  Purpose\n#     1   127   127  Reserved for Python standard library\n#   128   191    64  Reserved for Zope\n#   192   239    48  Reserved for 3rd parties\n#   240   255    16  Reserved for private use (will never be assigned)\n#   256   Inf   Inf  Reserved for future assignment",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import clear_extension_cache\n```\n\n```python\n\n\n```\n\n```python\ndef clear_extension_cache():\n    _extension_cache.clear()\n# Standard extension code assignments\n# Reserved ranges\n# First  Last Count  Purpose\n#     1   127   127  Reserved for Python standard library\n#   128   191    64  Reserved for Zope\n#   192   239    48  Reserved for 3rd parties\n#   240   255    16  Reserved for private use (will never be assigned)\n#   256   Inf   Inf  Reserved for future assignment\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "__all__ = [\"pickle\", \"constructor\",\n           \"add_extension\", \"remove_extension\", \"clear_extension_cache\"]\ndispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"pickle\", \"constructor\",\n           \"add_extension\", \"remove_extension\", \"clear_extension_cache\"]\ndispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dispatch_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "dispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import dispatch_table\n```\n\n```python\n\n\n```\n\n```python\ndispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_HEAPTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "_HEAPTYPE = 1<<9\n# Python code for object.__reduce_ex__ for protocols 0 and 1\ndef _reduce_ex(self, proto):\n    assert proto < 2\n    cls = self.__class__\n    for base in cls.__mro__:\n        if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:\n            break\n    else:\n        base = object # not really reachable",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import _HEAPTYPE\n```\n\n```python\n\n\n```\n\n```python\n_HEAPTYPE = 1<<9\n# Python code for object.__reduce_ex__ for protocols 0 and 1\ndef _reduce_ex(self, proto):\n    assert proto < 2\n    cls = self.__class__\n    for base in cls.__mro__:\n        if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:\n            break\n    else:\n        base = object # not really reachable\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_extension_registry",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "_extension_registry = {}                # key -> code\n_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import _extension_registry\n```\n\n```python\n\n\n```\n\n```python\n_extension_registry = {}                # key -> code\n_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_inverted_registry",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import _inverted_registry\n```\n\n```python\n\n\n```\n\n```python\n_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_extension_cache",
        "kind": 5,
        "importPath": "venv.lib.python3.8.copyreg",
        "description": "venv.lib.python3.8.copyreg",
        "peekOfCode": "_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and",
        "detail": "venv.lib.python3.8.copyreg",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.copyreg import _extension_cache\n```\n\n```python\n\n\n```\n\n```python\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "auto",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import auto\n```\n\n```python\n\n\n```\n\n```python\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_EnumDict",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import _EnumDict\n```\n\n```python\n\n\n```\n\n```python\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EnumMeta",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(first_enum, '_generate_next_value_', None)",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import EnumMeta\n```\n\n```python\n\n\n```\n\n```python\nclass EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(first_enum, '_generate_next_value_', None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class Enum(metaclass=EnumMeta):\n    \"\"\"Generic enumeration.\n    Derive from this class to define new enumerations.\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import Enum\n```\n\n```python\n\n\n```\n\n```python\nclass Enum(metaclass=EnumMeta):\n    \"\"\"Generic enumeration.\n    Derive from this class to define new enumerations.\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IntEnum",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\ndef _reduce_ex_by_name(self, proto):\n    return self.name\nclass Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import IntEnum\n```\n\n```python\n\n\n```\n\n```python\nclass IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\ndef _reduce_ex_by_name(self, proto):\n    return self.name\nclass Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Flag",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import Flag\n```\n\n```python\n\n\n```\n\n```python\nclass Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IntFlag",
        "kind": 6,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "class IntFlag(int, Flag):\n    \"\"\"Support for integer-based Flags\"\"\"\n    @classmethod\n    def _missing_(cls, value):\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n    @classmethod\n    def _create_pseudo_member_(cls, value):",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import IntFlag\n```\n\n```python\n\n\n```\n\n```python\nclass IntFlag(int, Flag):\n    \"\"\"Support for integer-based Flags\"\"\"\n    @classmethod\n    def _missing_(cls, value):\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "def unique(enumeration):\n    \"\"\"Class decorator for enumerations ensuring unique member values.\"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import unique\n```\n\n```python\n\n\n```\n\n```python\ndef unique(enumeration):\n    \"\"\"Class decorator for enumerations ensuring unique member values.\"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\ndef _is_descriptor(obj):\n    \"\"\"Returns True if obj is a descriptor, False otherwise.\"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\ndef _is_descriptor(obj):\n    \"\"\"Returns True if obj is a descriptor, False otherwise.\"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_auto_null",
        "kind": 5,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import _auto_null\n```\n\n```python\n\n\n```\n\n```python\n_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "kind": 5,
        "importPath": "venv.lib.python3.8.enum",
        "description": "venv.lib.python3.8.enum",
        "peekOfCode": "Enum = None\nclass EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:",
        "detail": "venv.lib.python3.8.enum",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.enum import Enum\n```\n\n```python\n\n\n```\n\n```python\nEnum = None\nclass EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fnmatch",
        "kind": 2,
        "importPath": "venv.lib.python3.8.fnmatch",
        "description": "venv.lib.python3.8.fnmatch",
        "peekOfCode": "def fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.",
        "detail": "venv.lib.python3.8.fnmatch",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.fnmatch import fnmatch\n```\n\n```python\n\n\n```\n\n```python\ndef fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filter",
        "kind": 2,
        "importPath": "venv.lib.python3.8.fnmatch",
        "description": "venv.lib.python3.8.fnmatch",
        "peekOfCode": "def filter(names, pat):\n    \"\"\"Return the subset of the list NAMES that match PAT.\"\"\"\n    result = []\n    pat = os.path.normcase(pat)\n    match = _compile_pattern(pat)\n    if os.path is posixpath:\n        # normcase on posix is NOP. Optimize it away from the loop.\n        for name in names:\n            if match(name):\n                result.append(name)",
        "detail": "venv.lib.python3.8.fnmatch",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.fnmatch import filter\n```\n\n```python\n\n\n```\n\n```python\ndef filter(names, pat):\n    \"\"\"Return the subset of the list NAMES that match PAT.\"\"\"\n    result = []\n    pat = os.path.normcase(pat)\n    match = _compile_pattern(pat)\n    if os.path is posixpath:\n        # normcase on posix is NOP. Optimize it away from the loop.\n        for name in names:\n            if match(name):\n                result.append(name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fnmatchcase",
        "kind": 2,
        "importPath": "venv.lib.python3.8.fnmatch",
        "description": "venv.lib.python3.8.fnmatch",
        "peekOfCode": "def fnmatchcase(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN, including case.\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    \"\"\"\n    match = _compile_pattern(pat)\n    return match(name) is not None\ndef translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.",
        "detail": "venv.lib.python3.8.fnmatch",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.fnmatch import fnmatchcase\n```\n\n```python\n\n\n```\n\n```python\ndef fnmatchcase(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN, including case.\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    \"\"\"\n    match = _compile_pattern(pat)\n    return match(name) is not None\ndef translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "venv.lib.python3.8.fnmatch",
        "description": "venv.lib.python3.8.fnmatch",
        "peekOfCode": "def translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.\n    \"\"\"\n    i, n = 0, len(pat)\n    res = ''\n    while i < n:\n        c = pat[i]\n        i = i+1\n        if c == '*':",
        "detail": "venv.lib.python3.8.fnmatch",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.fnmatch import translate\n```\n\n```python\n\n\n```\n\n```python\ndef translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.\n    \"\"\"\n    i, n = 0, len(pat)\n    res = ''\n    while i < n:\n        c = pat[i]\n        i = i+1\n        if c == '*':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.fnmatch",
        "description": "venv.lib.python3.8.fnmatch",
        "peekOfCode": "__all__ = [\"filter\", \"fnmatch\", \"fnmatchcase\", \"translate\"]\ndef fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized",
        "detail": "venv.lib.python3.8.fnmatch",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.fnmatch import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"filter\", \"fnmatch\", \"fnmatchcase\", \"translate\"]\ndef fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "partial",
        "kind": 6,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "class partial:\n    \"\"\"New function with partial application of the given arguments\n    and keywords.\n    \"\"\"\n    __slots__ = \"func\", \"args\", \"keywords\", \"__dict__\", \"__weakref__\"\n    def __new__(cls, func, /, *args, **keywords):\n        if not callable(func):\n            raise TypeError(\"the first argument must be callable\")\n        if hasattr(func, \"func\"):\n            args = func.args + args",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import partial\n```\n\n```python\n\n\n```\n\n```python\nclass partial:\n    \"\"\"New function with partial application of the given arguments\n    and keywords.\n    \"\"\"\n    __slots__ = \"func\", \"args\", \"keywords\", \"__dict__\", \"__weakref__\"\n    def __new__(cls, func, /, *args, **keywords):\n        if not callable(func):\n            raise TypeError(\"the first argument must be callable\")\n        if hasattr(func, \"func\"):\n            args = func.args + args\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "partialmethod",
        "kind": 6,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "class partialmethod(object):\n    \"\"\"Method descriptor with partial application of the given arguments\n    and keywords.\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n    def __init__(*args, **keywords):\n        if len(args) >= 2:\n            self, func, *args = args\n        elif not args:",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import partialmethod\n```\n\n```python\n\n\n```\n\n```python\nclass partialmethod(object):\n    \"\"\"Method descriptor with partial application of the given arguments\n    and keywords.\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n    def __init__(*args, **keywords):\n        if len(args) >= 2:\n            self, func, *args = args\n        elif not args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_HashedSeq",
        "kind": 6,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "class _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n    def __hash__(self):",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import _HashedSeq\n```\n\n```python\n\n\n```\n\n```python\nclass _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n    def __hash__(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "singledispatchmethod",
        "kind": 6,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "class singledispatchmethod:\n    \"\"\"Single-dispatch generic method descriptor.\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n    def __init__(self, func):\n        if not callable(func) and not hasattr(func, \"__get__\"):\n            raise TypeError(f\"{func!r} is not callable or a descriptor\")\n        self.dispatcher = singledispatch(func)\n        self.func = func",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import singledispatchmethod\n```\n\n```python\n\n\n```\n\n```python\nclass singledispatchmethod:\n    \"\"\"Single-dispatch generic method descriptor.\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n    def __init__(self, func):\n        if not callable(func) and not hasattr(func, \"__get__\"):\n            raise TypeError(f\"{func!r} is not callable or a descriptor\")\n        self.dispatcher = singledispatch(func)\n        self.func = func\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "class cached_property:\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n        self.lock = RLock()\n    def __set_name__(self, owner, name):\n        if self.attrname is None:\n            self.attrname = name\n        elif name != self.attrname:",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import cached_property\n```\n\n```python\n\n\n```\n\n```python\nclass cached_property:\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n        self.lock = RLock()\n    def __set_name__(self, owner, name):\n        if self.attrname is None:\n            self.attrname = name\n        elif name != self.attrname:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import update_wrapper\n```\n\n```python\n\n\n```\n\n```python\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "wraps",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import wraps\n```\n\n```python\n\n\n```\n\n```python\ndef wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "total_ordering",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def total_ordering(cls):\n    \"\"\"Class decorator that fills in missing ordering methods\"\"\"\n    # Find user-defined comparisons (not those inherited from object).\n    roots = {op for op in _convert if getattr(cls, op, None) is not getattr(object, op, None)}\n    if not roots:\n        raise ValueError('must define at least one ordering operation: < > <= >=')\n    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__\n    for opname, opfunc in _convert[root]:\n        if opname not in roots:\n            opfunc.__name__ = opname",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import total_ordering\n```\n\n```python\n\n\n```\n\n```python\ndef total_ordering(cls):\n    \"\"\"Class decorator that fills in missing ordering methods\"\"\"\n    # Find user-defined comparisons (not those inherited from object).\n    roots = {op for op in _convert if getattr(cls, op, None) is not getattr(object, op, None)}\n    if not roots:\n        raise ValueError('must define at least one ordering operation: < > <= >=')\n    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__\n    for opname, opfunc in _convert[root]:\n        if opname not in roots:\n            opfunc.__name__ = opname\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmp_to_key",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import cmp_to_key\n```\n\n```python\n\n\n```\n\n```python\ndef cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reduce",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def reduce(function, sequence, initial=_initial_missing):\n    \"\"\"\n    reduce(function, sequence[, initial]) -> value\n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n    \"\"\"",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import reduce\n```\n\n```python\n\n\n```\n\n```python\ndef reduce(function, sequence, initial=_initial_missing):\n    \"\"\"\n    reduce(function, sequence[, initial]) -> value\n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lru_cache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"Least-recently-used cache decorator.\n    If *maxsize* is set to None, the LRU features are disabled and the cache\n    can grow without bound.\n    If *typed* is True, arguments of different types will be cached separately.\n    For example, f(3.0) and f(3) will be treated as distinct calls with\n    distinct results.\n    Arguments to the cached function must be hashable.\n    View the cache statistics named tuple (hits, misses, maxsize, currsize)\n    with f.cache_info().  Clear the cache and statistics with f.cache_clear().",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import lru_cache\n```\n\n```python\n\n\n```\n\n```python\ndef lru_cache(maxsize=128, typed=False):\n    \"\"\"Least-recently-used cache decorator.\n    If *maxsize* is set to None, the LRU features are disabled and the cache\n    can grow without bound.\n    If *typed* is True, arguments of different types will be cached separately.\n    For example, f(3.0) and f(3) will be treated as distinct calls with\n    distinct results.\n    Arguments to the cached function must be hashable.\n    View the cache statistics named tuple (hits, misses, maxsize, currsize)\n    with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "singledispatch",
        "kind": 2,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "def singledispatch(func):\n    \"\"\"Single-dispatch generic function decorator.\n    Transforms a function into a generic function, which can have different\n    behaviours depending upon the type of its first argument. The decorated\n    function acts as the default implementation, and additional\n    implementations can be registered using the register() attribute of the\n    generic function.\n    \"\"\"\n    # There are many programs that use functools without singledispatch, so we\n    # trade-off making singledispatch marginally slower for the benefit of",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import singledispatch\n```\n\n```python\n\n\n```\n\n```python\ndef singledispatch(func):\n    \"\"\"Single-dispatch generic function decorator.\n    Transforms a function into a generic function, which can have different\n    behaviours depending upon the type of its first argument. The decorated\n    function acts as the default implementation, and additional\n    implementations can be registered using the register() attribute of the\n    generic function.\n    \"\"\"\n    # There are many programs that use functools without singledispatch, so we\n    # trade-off making singledispatch marginally slower for the benefit of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "__all__ = ['update_wrapper', 'wraps', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES',\n           'total_ordering', 'cmp_to_key', 'lru_cache', 'reduce', 'partial',\n           'partialmethod', 'singledispatch', 'singledispatchmethod']\nfrom abc import get_cache_token\nfrom collections import namedtuple\n# import types, weakref  # Deferred to single_dispatch()\nfrom reprlib import recursive_repr\nfrom _thread import RLock\n################################################################################\n### update_wrapper() and wraps() decorator",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['update_wrapper', 'wraps', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES',\n           'total_ordering', 'cmp_to_key', 'lru_cache', 'reduce', 'partial',\n           'partialmethod', 'singledispatch', 'singledispatchmethod']\nfrom abc import get_cache_token\nfrom collections import namedtuple\n# import types, weakref  # Deferred to single_dispatch()\nfrom reprlib import recursive_repr\nfrom _thread import RLock\n################################################################################\n### update_wrapper() and wraps() decorator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WRAPPER_ASSIGNMENTS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import WRAPPER_ASSIGNMENTS\n```\n\n```python\n\n\n```\n\n```python\nWRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WRAPPER_UPDATES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "WRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import WRAPPER_UPDATES\n```\n\n```python\n\n\n```\n\n```python\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_convert",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "_convert = {\n    '__lt__': [('__gt__', _gt_from_lt),\n               ('__le__', _le_from_lt),\n               ('__ge__', _ge_from_lt)],\n    '__le__': [('__ge__', _ge_from_le),\n               ('__lt__', _lt_from_le),\n               ('__gt__', _gt_from_le)],\n    '__gt__': [('__lt__', _lt_from_gt),\n               ('__ge__', _ge_from_gt),\n               ('__le__', _le_from_gt)],",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import _convert\n```\n\n```python\n\n\n```\n\n```python\n_convert = {\n    '__lt__': [('__gt__', _gt_from_lt),\n               ('__le__', _le_from_lt),\n               ('__ge__', _ge_from_lt)],\n    '__le__': [('__ge__', _ge_from_le),\n               ('__lt__', _lt_from_le),\n               ('__gt__', _gt_from_le)],\n    '__gt__': [('__lt__', _lt_from_gt),\n               ('__ge__', _ge_from_gt),\n               ('__le__', _le_from_gt)],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_initial_missing",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "_initial_missing = object()\ndef reduce(function, sequence, initial=_initial_missing):\n    \"\"\"\n    reduce(function, sequence[, initial]) -> value\n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import _initial_missing\n```\n\n```python\n\n\n```\n\n```python\n_initial_missing = object()\ndef reduce(function, sequence, initial=_initial_missing):\n    \"\"\"\n    reduce(function, sequence[, initial]) -> value\n    Apply a function of two arguments cumulatively to the items of a sequence,\n    from left to right, so as to reduce the sequence to a single value.\n    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n    of the sequence in the calculation, and serves as a default when the\n    sequence is empty.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_CacheInfo",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "_CacheInfo = namedtuple(\"CacheInfo\", [\"hits\", \"misses\", \"maxsize\", \"currsize\"])\nclass _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import _CacheInfo\n```\n\n```python\n\n\n```\n\n```python\n_CacheInfo = namedtuple(\"CacheInfo\", [\"hits\", \"misses\", \"maxsize\", \"currsize\"])\nclass _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_NOT_FOUND",
        "kind": 5,
        "importPath": "venv.lib.python3.8.functools",
        "description": "venv.lib.python3.8.functools",
        "peekOfCode": "_NOT_FOUND = object()\nclass cached_property:\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n        self.lock = RLock()\n    def __set_name__(self, owner, name):\n        if self.attrname is None:\n            self.attrname = name",
        "detail": "venv.lib.python3.8.functools",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.functools import _NOT_FOUND\n```\n\n```python\n\n\n```\n\n```python\n_NOT_FOUND = object()\nclass cached_property:\n    def __init__(self, func):\n        self.func = func\n        self.attrname = None\n        self.__doc__ = func.__doc__\n        self.lock = RLock()\n    def __set_name__(self, owner, name):\n        if self.attrname is None:\n            self.attrname = name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import exists\n```\n\n```python\n\n\n```\n\n```python\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isfile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISREG(st.st_mode)\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import isfile\n```\n\n```python\n\n\n```\n\n```python\ndef isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISREG(st.st_mode)\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isdir",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISDIR(st.st_mode)\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import isdir\n```\n\n```python\n\n\n```\n\n```python\ndef isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISDIR(st.st_mode)\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getsize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import getsize\n```\n\n```python\n\n\n```\n\n```python\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getmtime",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import getmtime\n```\n\n```python\n\n\n```\n\n```python\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getatime",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import getatime\n```\n\n```python\n\n\n```\n\n```python\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getctime",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import getctime\n```\n\n```python\n\n\n```\n\n```python\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "commonprefix",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import commonprefix\n```\n\n```python\n\n\n```\n\n```python\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "samestat",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import samestat\n```\n\n```python\n\n\n```\n\n```python\ndef samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "samefile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import samefile\n```\n\n```python\n\n\n```\n\n```python\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sameopenfile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "def sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n# Generic implementation of splitext, to be parametrized with",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import sameopenfile\n```\n\n```python\n\n\n```\n\n```python\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n# Generic implementation of splitext, to be parametrized with\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.genericpath",
        "description": "venv.lib.python3.8.genericpath",
        "peekOfCode": "__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):",
        "detail": "venv.lib.python3.8.genericpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.genericpath import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "__doc__ = \"\"\"hashlib module - A common interface to many hash functions.\nnew(name, data=b'', **kwargs) - returns a new hash object implementing the\n                                given hash function; initializing the hash\n                                using the given binary data.\nNamed constructor functions are also available, these are faster\nthan using new(name):\nmd5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),\nsha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.\nMore algorithms may be available on your platform but the above are guaranteed\nto exist.  See the algorithms_guaranteed and algorithms_available attributes",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import __doc__\n```\n\n```python\n\n\n```\n\n```python\n__doc__ = \"\"\"hashlib module - A common interface to many hash functions.\nnew(name, data=b'', **kwargs) - returns a new hash object implementing the\n                                given hash function; initializing the hash\n                                using the given binary data.\nNamed constructor functions are also available, these are faster\nthan using new(name):\nmd5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),\nsha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.\nMore algorithms may be available on your platform but the above are guaranteed\nto exist.  See the algorithms_guaranteed and algorithms_available attributes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__always_supported",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "__always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n                      'blake2b', 'blake2s',\n                      'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n                      'shake_128', 'shake_256')\nalgorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import __always_supported\n```\n\n```python\n\n\n```\n\n```python\n__always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n                      'blake2b', 'blake2s',\n                      'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n                      'shake_128', 'shake_256')\nalgorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "algorithms_guaranteed",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "algorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import algorithms_guaranteed\n```\n\n```python\n\n\n```\n\n```python\nalgorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "algorithms_available",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "algorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import algorithms_available\n```\n\n```python\n\n\n```\n\n```python\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__builtin_constructor_cache",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import __builtin_constructor_cache\n```\n\n```python\n\n\n```\n\n```python\n__builtin_constructor_cache = {}\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__block_openssl_constructor",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hashlib",
        "description": "venv.lib.python3.8.hashlib",
        "peekOfCode": "__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor",
        "detail": "venv.lib.python3.8.hashlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hashlib import __block_openssl_constructor\n```\n\n```python\n\n\n```\n\n```python\n__block_openssl_constructor = {\n    'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n    'shake_128', 'shake_256',\n    'blake2b', 'blake2s',\n}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heappush",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heappush\n```\n\n```python\n\n\n```\n\n```python\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heappop",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n        return returnitem\n    return lastelt\ndef heapreplace(heap, item):",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heappop\n```\n\n```python\n\n\n```\n\n```python\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n        return returnitem\n    return lastelt\ndef heapreplace(heap, item):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heapreplace",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def heapreplace(heap, item):\n    \"\"\"Pop and return the current smallest value, and add the new item.\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    \"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heapreplace\n```\n\n```python\n\n\n```\n\n```python\ndef heapreplace(heap, item):\n    \"\"\"Pop and return the current smallest value, and add the new item.\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    \"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heappushpop",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def heappushpop(heap, item):\n    \"\"\"Fast version of a heappush followed by a heappop.\"\"\"\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heappushpop\n```\n\n```python\n\n\n```\n\n```python\ndef heappushpop(heap, item):\n    \"\"\"Fast version of a heappush followed by a heappop.\"\"\"\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heapify",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at\n    # is the largest with a child index in-range, so must have 2*i + 1 < n,\n    # or i < (n-1)/2.  If n is even = 2*j, this is (2*j-1)/2 = j-1/2 so\n    # j-1 is the largest, which is n//2 - 1.  If n is odd = 2*j+1, this is\n    # (2*j+1-1)/2 = j so j-1 is the largest, and that's again n//2-1.\n    for i in reversed(range(n//2)):\n        _siftup(x, i)",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heapify\n```\n\n```python\n\n\n```\n\n```python\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at\n    # is the largest with a child index in-range, so must have 2*i + 1 < n,\n    # or i < (n-1)/2.  If n is even = 2*j, this is (2*j-1)/2 = j-1/2 so\n    # j-1 is the largest, which is n//2 - 1.  If n is odd = 2*j+1, this is\n    # (2*j+1-1)/2 = j so j-1 is the largest, and that's again n//2-1.\n    for i in reversed(range(n//2)):\n        _siftup(x, i)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def merge(*iterables, key=None, reverse=False):\n    '''Merge multiple sorted inputs into a single sorted output.\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n    If *key* is not None, applies a key function to each element to determine\n    its sort order.\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import merge\n```\n\n```python\n\n\n```\n\n```python\ndef merge(*iterables, key=None, reverse=False):\n    '''Merge multiple sorted inputs into a single sorted output.\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n    If *key* is not None, applies a key function to each element to determine\n    its sort order.\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nsmallest",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def nsmallest(n, iterable, key=None):\n    \"\"\"Find the n smallest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use min()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = min(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import nsmallest\n```\n\n```python\n\n\n```\n\n```python\ndef nsmallest(n, iterable, key=None):\n    \"\"\"Find the n smallest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use min()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = min(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nlargest",
        "kind": 2,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "def nlargest(n, iterable, key=None):\n    \"\"\"Find the n largest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use max()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = max(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import nlargest\n```\n\n```python\n\n\n```\n\n```python\ndef nlargest(n, iterable, key=None):\n    \"\"\"Find the n largest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use max()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        result = max(it, default=sentinel, key=key)\n        return [] if result is sentinel else [result]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "heap",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "heap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import heap\n```\n\n```python\n\n\n```\n\n```python\nheap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "item = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import item\n```\n\n```python\n\n\n```\n\n```python\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "item = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import item\n```\n\n```python\n\n\n```\n\n```python\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "item = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import item\n```\n\n```python\n\n\n```\n\n```python\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__about__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "__about__ = \"\"\"Heap queues\n[explanation by François Pinard]\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k', not a[k]:\n                                   0\n                  1                                 2",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import __about__\n```\n\n```python\n\n\n```\n\n```python\n__about__ = \"\"\"Heap queues\n[explanation by François Pinard]\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k', not a[k]:\n                                   0\n                  1                                 2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.heapq",
        "description": "venv.lib.python3.8.heapq",
        "peekOfCode": "__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',\n           'nlargest', 'nsmallest', 'heappushpop']\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:",
        "detail": "venv.lib.python3.8.heapq",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.heapq import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',\n           'nlargest', 'nsmallest', 'heappushpop']\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "HMAC",
        "kind": 6,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "class HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n        digestmod: Required.  A module supporting PEP 247.  *OR*",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import HMAC\n```\n\n```python\n\n\n```\n\n```python\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n        digestmod: Required.  A module supporting PEP 247.  *OR*\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "new",
        "kind": 2,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "def new(key, msg = None, digestmod = None):\n    \"\"\"Create a new hashing object and return it.\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    \"\"\"\n    return HMAC(key, msg, digestmod)",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import new\n```\n\n```python\n\n\n```\n\n```python\ndef new(key, msg = None, digestmod = None):\n    \"\"\"Create a new hashing object and return it.\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    \"\"\"\n    return HMAC(key, msg, digestmod)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "digest",
        "kind": 2,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "def digest(key, msg, digest):\n    \"\"\"Fast inline implementation of HMAC\n    key:    key for the keyed hash object.\n    msg:    input message\n    digest: A hash name suitable for hashlib.new() for best performance. *OR*\n            A hashlib constructor returning a new hash object. *OR*\n            A module supporting PEP 247.\n    Note: key and msg must be a bytes or bytearray objects.\n    \"\"\"\n    if (_hashopenssl is not None and",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import digest\n```\n\n```python\n\n\n```\n\n```python\ndef digest(key, msg, digest):\n    \"\"\"Fast inline implementation of HMAC\n    key:    key for the keyed hash object.\n    msg:    input message\n    digest: A hash name suitable for hashlib.new() for best performance. *OR*\n            A hashlib constructor returning a new hash object. *OR*\n            A module supporting PEP 247.\n    Note: key and msg must be a bytes or bytearray objects.\n    \"\"\"\n    if (_hashopenssl is not None and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "trans_5C",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "trans_5C = bytes((x ^ 0x5C) for x in range(256))\ntrans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import trans_5C\n```\n\n```python\n\n\n```\n\n```python\ntrans_5C = bytes((x ^ 0x5C) for x in range(256))\ntrans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "trans_36",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "trans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import trans_36\n```\n\n```python\n\n\n```\n\n```python\ntrans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "digest_size",
        "kind": 5,
        "importPath": "venv.lib.python3.8.hmac",
        "description": "venv.lib.python3.8.hmac",
        "peekOfCode": "digest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.",
        "detail": "venv.lib.python3.8.hmac",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.hmac import digest_size\n```\n\n```python\n\n\n```\n\n```python\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NullImporter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "class NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"\n    def __init__(self, path):\n        if path == '':\n            raise ImportError('empty pathname', path='')\n        elif os.path.isdir(path):\n            raise ImportError('existing directory', path=path)\n    def find_module(self, fullname):",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import NullImporter\n```\n\n```python\n\n\n```\n\n```python\nclass NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"\n    def __init__(self, path):\n        if path == '':\n            raise ImportError('empty pathname', path='')\n        elif os.path.isdir(path):\n            raise ImportError('existing directory', path=path)\n    def find_module(self, fullname):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_HackedGetData",
        "kind": 6,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "class _HackedGetData:\n    \"\"\"Compatibility support for 'file' arguments of various load_*()\n    functions.\"\"\"\n    def __init__(self, fullname, path, file=None):\n        super().__init__(fullname, path)\n        self.file = file\n    def get_data(self, path):\n        \"\"\"Gross hack to contort loader to deal w/ load_*()'s bad API.\"\"\"\n        if self.file and path == self.path:\n            # The contract of get_data() requires us to return bytes. Reopen the",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import _HackedGetData\n```\n\n```python\n\n\n```\n\n```python\nclass _HackedGetData:\n    \"\"\"Compatibility support for 'file' arguments of various load_*()\n    functions.\"\"\"\n    def __init__(self, fullname, path, file=None):\n        super().__init__(fullname, path)\n        self.file = file\n    def get_data(self, path):\n        \"\"\"Gross hack to contort loader to deal w/ load_*()'s bad API.\"\"\"\n        if self.file and path == self.path:\n            # The contract of get_data() requires us to return bytes. Reopen the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LoadSourceCompatibility",
        "kind": 6,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "class _LoadSourceCompatibility(_HackedGetData, machinery.SourceFileLoader):\n    \"\"\"Compatibility support for implementing load_source().\"\"\"\ndef load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import _LoadSourceCompatibility\n```\n\n```python\n\n\n```\n\n```python\nclass _LoadSourceCompatibility(_HackedGetData, machinery.SourceFileLoader):\n    \"\"\"Compatibility support for implementing load_source().\"\"\"\ndef load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LoadCompiledCompatibility",
        "kind": 6,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "class _LoadCompiledCompatibility(_HackedGetData, SourcelessFileLoader):\n    \"\"\"Compatibility support for implementing load_compiled().\"\"\"\ndef load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import _LoadCompiledCompatibility\n```\n\n```python\n\n\n```\n\n```python\nclass _LoadCompiledCompatibility(_HackedGetData, SourcelessFileLoader):\n    \"\"\"Compatibility support for implementing load_compiled().\"\"\"\ndef load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "new_module",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import new_module\n```\n\n```python\n\n\n```\n\n```python\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_magic",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"\n    return util.MAGIC_NUMBER\ndef get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import get_magic\n```\n\n```python\n\n\n```\n\n```python\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"\n    return util.MAGIC_NUMBER\ndef get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_tag",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import get_tag\n```\n\n```python\n\n\n```\n\n```python\ndef get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cache_from_source",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.\n    If sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    with warnings.catch_warnings():",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import cache_from_source\n```\n\n```python\n\n\n```\n\n```python\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.\n    If sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    with warnings.catch_warnings():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "source_from_cache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def source_from_cache(path):\n    \"\"\"**DEPRECATED**\n    Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    return util.source_from_cache(path)\ndef get_suffixes():",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import source_from_cache\n```\n\n```python\n\n\n```\n\n```python\ndef source_from_cache(path):\n    \"\"\"**DEPRECATED**\n    Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    return util.source_from_cache(path)\ndef get_suffixes():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_suffixes",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def get_suffixes():\n    \"\"\"**DEPRECATED**\"\"\"\n    extensions = [(s, 'rb', C_EXTENSION) for s in machinery.EXTENSION_SUFFIXES]\n    source = [(s, 'r', PY_SOURCE) for s in machinery.SOURCE_SUFFIXES]\n    bytecode = [(s, 'rb', PY_COMPILED) for s in machinery.BYTECODE_SUFFIXES]\n    return extensions + source + bytecode\nclass NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import get_suffixes\n```\n\n```python\n\n\n```\n\n```python\ndef get_suffixes():\n    \"\"\"**DEPRECATED**\"\"\"\n    extensions = [(s, 'rb', C_EXTENSION) for s in machinery.EXTENSION_SUFFIXES]\n    source = [(s, 'r', PY_SOURCE) for s in machinery.SOURCE_SUFFIXES]\n    bytecode = [(s, 'rb', PY_COMPILED) for s in machinery.BYTECODE_SUFFIXES]\n    return extensions + source + bytecode\nclass NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_source",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.\n    module.__loader__ = machinery.SourceFileLoader(name, pathname)",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import load_source\n```\n\n```python\n\n\n```\n\n```python\ndef load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.\n    module.__loader__ = machinery.SourceFileLoader(name, pathname)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_compiled",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import load_compiled\n```\n\n```python\n\n\n```\n\n```python\ndef load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_package",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def load_package(name, path):\n    \"\"\"**DEPRECATED**\"\"\"\n    if os.path.isdir(path):\n        extensions = (machinery.SOURCE_SUFFIXES[:] +\n                      machinery.BYTECODE_SUFFIXES[:])\n        for extension in extensions:\n            init_path = os.path.join(path, '__init__' + extension)\n            if os.path.exists(init_path):\n                path = init_path\n                break",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import load_package\n```\n\n```python\n\n\n```\n\n```python\ndef load_package(name, path):\n    \"\"\"**DEPRECATED**\"\"\"\n    if os.path.isdir(path):\n        extensions = (machinery.SOURCE_SUFFIXES[:] +\n                      machinery.BYTECODE_SUFFIXES[:])\n        for extension in extensions:\n            init_path = os.path.join(path, '__init__' + extension)\n            if os.path.exists(init_path):\n                path = init_path\n                break\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_module",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def load_module(name, file, filename, details):\n    \"\"\"**DEPRECATED**\n    Load a module, given information returned by find_module().\n    The module name must include the full package name, if any.\n    \"\"\"\n    suffix, mode, type_ = details\n    if mode and (not mode.startswith(('r', 'U')) or '+' in mode):\n        raise ValueError('invalid file open mode {!r}'.format(mode))\n    elif file is None and type_ in {PY_SOURCE, PY_COMPILED}:\n        msg = 'file object required for import (type code {})'.format(type_)",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import load_module\n```\n\n```python\n\n\n```\n\n```python\ndef load_module(name, file, filename, details):\n    \"\"\"**DEPRECATED**\n    Load a module, given information returned by find_module().\n    The module name must include the full package name, if any.\n    \"\"\"\n    suffix, mode, type_ = details\n    if mode and (not mode.startswith(('r', 'U')) or '+' in mode):\n        raise ValueError('invalid file open mode {!r}'.format(mode))\n    elif file is None and type_ in {PY_SOURCE, PY_COMPILED}:\n        msg = 'file object required for import (type code {})'.format(type_)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "find_module",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def find_module(name, path=None):\n    \"\"\"**DEPRECATED**\n    Search for a module.\n    If path is omitted or None, search for a built-in, frozen or special\n    module and continue search in sys.path. The module name cannot\n    contain '.'; to search for a submodule of a package, pass the\n    submodule name and the package's __path__.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"'name' must be a str, not {}\".format(type(name)))",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import find_module\n```\n\n```python\n\n\n```\n\n```python\ndef find_module(name, path=None):\n    \"\"\"**DEPRECATED**\n    Search for a module.\n    If path is omitted or None, search for a built-in, frozen or special\n    module and continue search in sys.path. The module name cannot\n    contain '.'; to search for a submodule of a package, pass the\n    submodule name and the package's __path__.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"'name' must be a str, not {}\".format(type(name)))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reload",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def reload(module):\n    \"\"\"**DEPRECATED**\n    Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    return importlib.reload(module)\ndef init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import reload\n```\n\n```python\n\n\n```\n\n```python\ndef reload(module):\n    \"\"\"**DEPRECATED**\n    Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    return importlib.reload(module)\ndef init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "init_builtin",
        "kind": 2,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "def init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist\n    \"\"\"\n    try:\n        return _builtin_from_name(name)\n    except ImportError:\n        return None\nif create_dynamic:",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import init_builtin\n```\n\n```python\n\n\n```\n\n```python\ndef init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist\n    \"\"\"\n    try:\n        return _builtin_from_name(name)\n    except ImportError:\n        return None\nif create_dynamic:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEARCH_ERROR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "SEARCH_ERROR = 0\nPY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import SEARCH_ERROR\n```\n\n```python\n\n\n```\n\n```python\nSEARCH_ERROR = 0\nPY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PY_SOURCE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PY_SOURCE\n```\n\n```python\n\n\n```\n\n```python\nPY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PY_COMPILED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PY_COMPILED\n```\n\n```python\n\n\n```\n\n```python\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "C_EXTENSION",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "C_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import C_EXTENSION\n```\n\n```python\n\n\n```\n\n```python\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PY_RESOURCE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PY_RESOURCE\n```\n\n```python\n\n\n```\n\n```python\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PKG_DIRECTORY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PKG_DIRECTORY\n```\n\n```python\n\n\n```\n\n```python\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "C_BUILTIN",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "C_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import C_BUILTIN\n```\n\n```python\n\n\n```\n\n```python\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PY_FROZEN",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PY_FROZEN\n```\n\n```python\n\n\n```\n\n```python\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PY_CODERESOURCE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "PY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import PY_CODERESOURCE\n```\n\n```python\n\n\n```\n\n```python\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IMP_HOOK",
        "kind": 5,
        "importPath": "venv.lib.python3.8.imp",
        "description": "venv.lib.python3.8.imp",
        "peekOfCode": "IMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.",
        "detail": "venv.lib.python3.8.imp",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.imp import IMP_HOOK\n```\n\n```python\n\n\n```\n\n```python\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IOBase",
        "kind": 6,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "class IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import IOBase\n```\n\n```python\n\n\n```\n\n```python\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RawIOBase",
        "kind": 6,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "class RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import RawIOBase\n```\n\n```python\n\n\n```\n\n```python\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BufferedIOBase",
        "kind": 6,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "class BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import BufferedIOBase\n```\n\n```python\n\n\n```\n\n```python\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TextIOBase",
        "kind": 6,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "class TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)\ndel klass\ntry:",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import TextIOBase\n```\n\n```python\n\n\n```\n\n```python\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)\ndel klass\ntry:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "__author__ = (\"Guido van Rossum <guido@python.org>, \"\n              \"Mike Verdone <mike.verdone@gmail.com>, \"\n              \"Mark Russell <mark.russell@zen.co.uk>, \"\n              \"Antoine Pitrou <solipsis@pitrou.net>, \"\n              \"Amaury Forgeot d'Arc <amauryfa@gmail.com>, \"\n              \"Benjamin Peterson <benjamin@python.org>\")\n__all__ = [\"BlockingIOError\", \"open\", \"open_code\", \"IOBase\", \"RawIOBase\",\n           \"FileIO\", \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import __author__\n```\n\n```python\n\n\n```\n\n```python\n__author__ = (\"Guido van Rossum <guido@python.org>, \"\n              \"Mike Verdone <mike.verdone@gmail.com>, \"\n              \"Mark Russell <mark.russell@zen.co.uk>, \"\n              \"Antoine Pitrou <solipsis@pitrou.net>, \"\n              \"Amaury Forgeot d'Arc <amauryfa@gmail.com>, \"\n              \"Benjamin Peterson <benjamin@python.org>\")\n__all__ = [\"BlockingIOError\", \"open\", \"open_code\", \"IOBase\", \"RawIOBase\",\n           \"FileIO\", \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "__all__ = [\"BlockingIOError\", \"open\", \"open_code\", \"IOBase\", \"RawIOBase\",\n           \"FileIO\", \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",\n           \"UnsupportedOperation\", \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\nimport _io\nimport abc\nfrom _io import (DEFAULT_BUFFER_SIZE, BlockingIOError, UnsupportedOperation,\n                 open, open_code, FileIO, BytesIO, StringIO, BufferedReader,\n                 BufferedWriter, BufferedRWPair, BufferedRandom,",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"BlockingIOError\", \"open\", \"open_code\", \"IOBase\", \"RawIOBase\",\n           \"FileIO\", \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",\n           \"UnsupportedOperation\", \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\nimport _io\nimport abc\nfrom _io import (DEFAULT_BUFFER_SIZE, BlockingIOError, UnsupportedOperation,\n                 open, open_code, FileIO, BytesIO, StringIO, BufferedReader,\n                 BufferedWriter, BufferedRWPair, BufferedRandom,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OpenWrapper",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "OpenWrapper = _io.open # for compatibility with _pyio\n# Pretend this exception was created here.\nUnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import OpenWrapper\n```\n\n```python\n\n\n```\n\n```python\nOpenWrapper = _io.open # for compatibility with _pyio\n# Pretend this exception was created here.\nUnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UnsupportedOperation.__module__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "UnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import UnsupportedOperation.__module__\n```\n\n```python\n\n\n```\n\n```python\nUnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import SEEK_SET\n```\n\n```python\n\n\n```\n\n```python\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import SEEK_CUR\n```\n\n```python\n\n\n```\n\n```python\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "venv.lib.python3.8.io",
        "description": "venv.lib.python3.8.io",
        "peekOfCode": "SEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__",
        "detail": "venv.lib.python3.8.io",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.io import SEEK_END\n```\n\n```python\n\n\n```\n\n```python\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.keyword",
        "description": "venv.lib.python3.8.keyword",
        "peekOfCode": "__all__ = [\"iskeyword\", \"kwlist\"]\nkwlist = [\n    'False',\n    'None',\n    'True',\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',",
        "detail": "venv.lib.python3.8.keyword",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.keyword import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"iskeyword\", \"kwlist\"]\nkwlist = [\n    'False',\n    'None',\n    'True',\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "kwlist",
        "kind": 5,
        "importPath": "venv.lib.python3.8.keyword",
        "description": "venv.lib.python3.8.keyword",
        "peekOfCode": "kwlist = [\n    'False',\n    'None',\n    'True',\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',",
        "detail": "venv.lib.python3.8.keyword",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.keyword import kwlist\n```\n\n```python\n\n\n```\n\n```python\nkwlist = [\n    'False',\n    'None',\n    'True',\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iskeyword",
        "kind": 5,
        "importPath": "venv.lib.python3.8.keyword",
        "description": "venv.lib.python3.8.keyword",
        "peekOfCode": "iskeyword = frozenset(kwlist).__contains__",
        "detail": "venv.lib.python3.8.keyword",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.keyword import iskeyword\n```\n\n```python\n\n\n```\n\n```python\niskeyword = frozenset(kwlist).__contains__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getline",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.\ncache = {}",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import getline\n```\n\n```python\n\n\n```\n\n```python\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.\ncache = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "clearcache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import clearcache\n```\n\n```python\n\n\n```\n\n```python\ndef clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getlines",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:\n            return cache[filename][2]\n    try:\n        return updatecache(filename, module_globals)\n    except MemoryError:",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import getlines\n```\n\n```python\n\n\n```\n\n```python\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:\n            return cache[filename][2]\n    try:\n        return updatecache(filename, module_globals)\n    except MemoryError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "checkcache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def checkcache(filename=None):\n    \"\"\"Discard cache entries that are out of date.\n    (This is not checked upon each call!)\"\"\"\n    if filename is None:\n        filenames = list(cache.keys())\n    else:\n        if filename in cache:\n            filenames = [filename]\n        else:\n            return",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import checkcache\n```\n\n```python\n\n\n```\n\n```python\ndef checkcache(filename=None):\n    \"\"\"Discard cache entries that are out of date.\n    (This is not checked upon each call!)\"\"\"\n    if filename is None:\n        filenames = list(cache.keys())\n    else:\n        if filename in cache:\n            filenames = [filename]\n        else:\n            return\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "updatecache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n    if filename in cache:\n        if len(cache[filename]) != 1:\n            del cache[filename]\n    if not filename or (filename.startswith('<') and filename.endswith('>')):\n        return []\n    fullname = filename",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import updatecache\n```\n\n```python\n\n\n```\n\n```python\ndef updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n    if filename in cache:\n        if len(cache[filename]) != 1:\n            del cache[filename]\n    if not filename or (filename.startswith('<') and filename.endswith('>')):\n        return []\n    fullname = filename\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lazycache",
        "kind": 2,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "def lazycache(filename, module_globals):\n    \"\"\"Seed the cache for filename with module_globals.\n    The module loader will be asked for the source only when getlines is\n    called, not immediately.\n    If there is an entry in the cache already, it is not altered.\n    :return: True if a lazy load is registered in the cache,\n        otherwise False. To register such a load a module loader with a\n        get_source method must be found, the filename must be a cachable\n        filename, and the filename must not be already cached.\n    \"\"\"",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import lazycache\n```\n\n```python\n\n\n```\n\n```python\ndef lazycache(filename, module_globals):\n    \"\"\"Seed the cache for filename with module_globals.\n    The module loader will be asked for the source only when getlines is\n    called, not immediately.\n    If there is an entry in the cache already, it is not altered.\n    :return: True if a lazy load is registered in the cache,\n        otherwise False. To register such a load a module loader with a\n        get_source method must be found, the filename must be a cachable\n        filename, and the filename must not be already cached.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "__all__ = [\"getline\", \"clearcache\", \"checkcache\"]\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"getline\", \"clearcache\", \"checkcache\"]\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "venv.lib.python3.8.linecache",
        "description": "venv.lib.python3.8.linecache",
        "peekOfCode": "cache = {}\ndef clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]",
        "detail": "venv.lib.python3.8.linecache",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.linecache import cache\n```\n\n```python\n\n\n```\n\n```python\ncache = {}\ndef clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "localeconv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl\n# Iterate over grouping intervals\ndef _grouping_intervals(grouping):",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import localeconv\n```\n\n```python\n\n\n```\n\n```python\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl\n# Iterate over grouping intervals\ndef _grouping_intervals(grouping):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "format_string",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def format_string(f, val, grouping=False, monetary=False):\n    \"\"\"Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.\n    Conversion uses monetary thousands separator and grouping strings if\n    forth parameter monetary is true.\"\"\"\n    percents = list(_percent_re.finditer(f))\n    new_f = _percent_re.sub('%s', f)\n    if isinstance(val, _collections_abc.Mapping):\n        new_val = []",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import format_string\n```\n\n```python\n\n\n```\n\n```python\ndef format_string(f, val, grouping=False, monetary=False):\n    \"\"\"Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.\n    Conversion uses monetary thousands separator and grouping strings if\n    forth parameter monetary is true.\"\"\"\n    percents = list(_percent_re.finditer(f))\n    new_f = _percent_re.sub('%s', f)\n    if isinstance(val, _collections_abc.Mapping):\n        new_val = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "format",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def format(percent, value, grouping=False, monetary=False, *additional):\n    \"\"\"Deprecated, use format_string instead.\"\"\"\n    import warnings\n    warnings.warn(\n        \"This method will be removed in a future version of Python. \"\n        \"Use 'locale.format_string()' instead.\",\n        DeprecationWarning, stacklevel=2\n    )\n    match = _percent_re.match(percent)\n    if not match or len(match.group())!= len(percent):",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import format\n```\n\n```python\n\n\n```\n\n```python\ndef format(percent, value, grouping=False, monetary=False, *additional):\n    \"\"\"Deprecated, use format_string instead.\"\"\"\n    import warnings\n    warnings.warn(\n        \"This method will be removed in a future version of Python. \"\n        \"Use 'locale.format_string()' instead.\",\n        DeprecationWarning, stacklevel=2\n    )\n    match = _percent_re.match(percent)\n    if not match or len(match.group())!= len(percent):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "currency",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def currency(val, symbol=True, grouping=False, international=False):\n    \"\"\"Formats val according to the currency settings\n    in the current locale.\"\"\"\n    conv = localeconv()\n    # check for illegal values\n    digits = conv[international and 'int_frac_digits' or 'frac_digits']\n    if digits == 127:\n        raise ValueError(\"Currency formatting is not possible using \"\n                         \"the 'C' locale.\")\n    s = _format('%%.%if' % digits, abs(val), grouping, monetary=True)",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import currency\n```\n\n```python\n\n\n```\n\n```python\ndef currency(val, symbol=True, grouping=False, international=False):\n    \"\"\"Formats val according to the currency settings\n    in the current locale.\"\"\"\n    conv = localeconv()\n    # check for illegal values\n    digits = conv[international and 'int_frac_digits' or 'frac_digits']\n    if digits == 127:\n        raise ValueError(\"Currency formatting is not possible using \"\n                         \"the 'C' locale.\")\n    s = _format('%%.%if' % digits, abs(val), grouping, monetary=True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "str",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def str(val):\n    \"\"\"Convert float to string, taking the locale into account.\"\"\"\n    return _format(\"%.12g\", val)\ndef delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import str\n```\n\n```python\n\n\n```\n\n```python\ndef str(val):\n    \"\"\"Convert float to string, taking the locale into account.\"\"\"\n    return _format(\"%.12g\", val)\ndef delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "delocalize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')\n    #next, replace the decimal point with a dot\n    dd = conv['decimal_point']\n    if dd:",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import delocalize\n```\n\n```python\n\n\n```\n\n```python\ndef delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')\n    #next, replace the decimal point with a dot\n    dd = conv['decimal_point']\n    if dd:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "atof",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def atof(string, func=float):\n    \"Parses a string as a float according to the locale settings.\"\n    return func(delocalize(string))\ndef atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import atof\n```\n\n```python\n\n\n```\n\n```python\ndef atof(string, func=float):\n    \"Parses a string as a float according to the locale settings.\"\n    return func(delocalize(string))\ndef atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "atoi",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)\n    print(s1, \"is\", atoi(s1))\n    #standard formatting\n    s1 = str(3.14)",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import atoi\n```\n\n```python\n\n\n```\n\n```python\ndef atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)\n    print(s1, \"is\", atoi(s1))\n    #standard formatting\n    s1 = str(3.14)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def normalize(localename):\n    \"\"\" Returns a normalized locale code for the given locale\n        name.\n        The returned locale code is formatted for use with\n        setlocale().\n        If normalization fails, the original name is returned\n        unchanged.\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import normalize\n```\n\n```python\n\n\n```\n\n```python\ndef normalize(localename):\n    \"\"\" Returns a normalized locale code for the given locale\n        name.\n        The returned locale code is formatted for use with\n        setlocale().\n        If normalization fails, the original name is returned\n        unchanged.\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getdefaultlocale",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):\n    \"\"\" Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.\n        Calling setlocale(LC_ALL, \"\") lets it use the default locale as\n        defined by the LANG variable. Since we don't want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n        To maintain compatibility with other platforms, not only the",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import getdefaultlocale\n```\n\n```python\n\n\n```\n\n```python\ndef getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):\n    \"\"\" Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.\n        Calling setlocale(LC_ALL, \"\") lets it use the default locale as\n        defined by the LANG variable. Since we don't want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n        To maintain compatibility with other platforms, not only the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getlocale",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def getlocale(category=LC_CTYPE):\n    \"\"\" Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n    \"\"\"\n    localename = _setlocale(category)",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import getlocale\n```\n\n```python\n\n\n```\n\n```python\ndef getlocale(category=LC_CTYPE):\n    \"\"\" Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n    \"\"\"\n    localename = _setlocale(category)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setlocale",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def setlocale(category, locale=None):\n    \"\"\" Set the locale for the given category.  The locale can be\n        a string, an iterable of two strings (language code and encoding),\n        or None.\n        Iterables are converted to strings using the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n        category may be given as one of the LC_* values.\n    \"\"\"\n    if locale and not isinstance(locale, _builtin_str):\n        # convert to string",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import setlocale\n```\n\n```python\n\n\n```\n\n```python\ndef setlocale(category, locale=None):\n    \"\"\" Set the locale for the given category.  The locale can be\n        a string, an iterable of two strings (language code and encoding),\n        or None.\n        Iterables are converted to strings using the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n        category may be given as one of the LC_* values.\n    \"\"\"\n    if locale and not isinstance(locale, _builtin_str):\n        # convert to string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "resetlocale",
        "kind": 2,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "def resetlocale(category=LC_ALL):\n    \"\"\" Sets the locale for category to the default setting.\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n    \"\"\"\n    _setlocale(category, _build_localename(getdefaultlocale()))\nif sys.platform.startswith(\"win\"):\n    # On Win32, this will return the ANSI code page\n    def getpreferredencoding(do_setlocale = True):\n        \"\"\"Return the charset that the user is likely using.\"\"\"",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import resetlocale\n```\n\n```python\n\n\n```\n\n```python\ndef resetlocale(category=LC_ALL):\n    \"\"\" Sets the locale for category to the default setting.\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n    \"\"\"\n    _setlocale(category, _build_localename(getdefaultlocale()))\nif sys.platform.startswith(\"win\"):\n    # On Win32, this will return the ANSI code page\n    def getpreferredencoding(do_setlocale = True):\n        \"\"\"Return the charset that the user is likely using.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "__all__ = [\"getlocale\", \"getdefaultlocale\", \"getpreferredencoding\", \"Error\",\n           \"setlocale\", \"resetlocale\", \"localeconv\", \"strcoll\", \"strxfrm\",\n           \"str\", \"atof\", \"atoi\", \"format\", \"format_string\", \"currency\",\n           \"normalize\", \"LC_CTYPE\", \"LC_COLLATE\", \"LC_TIME\", \"LC_MONETARY\",\n           \"LC_NUMERIC\", \"LC_ALL\", \"CHAR_MAX\"]\ndef _strcoll(a,b):\n    \"\"\" strcoll(string,string) -> int.\n        Compares two strings according to the locale.\n    \"\"\"\n    return (a > b) - (a < b)",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"getlocale\", \"getdefaultlocale\", \"getpreferredencoding\", \"Error\",\n           \"setlocale\", \"resetlocale\", \"localeconv\", \"strcoll\", \"strxfrm\",\n           \"str\", \"atof\", \"atoi\", \"format\", \"format_string\", \"currency\",\n           \"normalize\", \"LC_CTYPE\", \"LC_COLLATE\", \"LC_TIME\", \"LC_MONETARY\",\n           \"LC_NUMERIC\", \"LC_ALL\", \"CHAR_MAX\"]\ndef _strcoll(a,b):\n    \"\"\" strcoll(string,string) -> int.\n        Compares two strings according to the locale.\n    \"\"\"\n    return (a > b) - (a < b)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_localeconv",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "_localeconv = localeconv\n# With this dict, you can override some items of localeconv's return value.\n# This is useful for testing purposes.\n_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import _localeconv\n```\n\n```python\n\n\n```\n\n```python\n_localeconv = localeconv\n# With this dict, you can override some items of localeconv's return value.\n# This is useful for testing purposes.\n_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_override_localeconv",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import _override_localeconv\n```\n\n```python\n\n\n```\n\n```python\n_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_percent_re",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "_percent_re = re.compile(r'%(?:\\((?P<key>.*?)\\))?'\n                         r'(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')\ndef _format(percent, value, grouping=False, monetary=False, *additional):\n    if additional:\n        formatted = percent % ((value,) + additional)\n    else:\n        formatted = percent % value\n    # floats and decimal ints need special action!\n    if percent[-1] in 'eEfFgG':\n        seps = 0",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import _percent_re\n```\n\n```python\n\n\n```\n\n```python\n_percent_re = re.compile(r'%(?:\\((?P<key>.*?)\\))?'\n                         r'(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')\ndef _format(percent, value, grouping=False, monetary=False, *additional):\n    if additional:\n        formatted = percent % ((value,) + additional)\n    else:\n        formatted = percent % value\n    # floats and decimal ints need special action!\n    if percent[-1] in 'eEfFgG':\n        seps = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_setlocale",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "_setlocale = setlocale\ndef _replace_encoding(code, encoding):\n    if '.' in code:\n        langname = code[:code.index('.')]\n    else:\n        langname = code\n    # Convert the encoding to a C lib compatible encoding string\n    norm_encoding = encodings.normalize_encoding(encoding)\n    #print('norm encoding: %r' % norm_encoding)\n    norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import _setlocale\n```\n\n```python\n\n\n```\n\n```python\n_setlocale = setlocale\ndef _replace_encoding(code, encoding):\n    if '.' in code:\n        langname = code[:code.index('.')]\n    else:\n        langname = code\n    # Convert the encoding to a C lib compatible encoding string\n    norm_encoding = encodings.normalize_encoding(encoding)\n    #print('norm encoding: %r' % norm_encoding)\n    norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "locale_encoding_alias",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "locale_encoding_alias = {\n    # Mappings for non-standard encoding names used in locale names\n    '437':                          'C',\n    'c':                            'C',\n    'en':                           'ISO8859-1',\n    'jis':                          'JIS7',\n    'jis7':                         'JIS7',\n    'ajec':                         'eucJP',\n    'koi8c':                        'KOI8-C',\n    'microsoftcp1251':              'CP1251',",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import locale_encoding_alias\n```\n\n```python\n\n\n```\n\n```python\nlocale_encoding_alias = {\n    # Mappings for non-standard encoding names used in locale names\n    '437':                          'C',\n    'c':                            'C',\n    'en':                           'ISO8859-1',\n    'jis':                          'JIS7',\n    'jis7':                         'JIS7',\n    'ajec':                         'eucJP',\n    'koi8c':                        'KOI8-C',\n    'microsoftcp1251':              'CP1251',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "locale_alias",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "locale_alias = {\n    'a3':                                   'az_AZ.KOI8-C',\n    'a3_az':                                'az_AZ.KOI8-C',\n    'a3_az.koic':                           'az_AZ.KOI8-C',\n    'aa_dj':                                'aa_DJ.ISO8859-1',\n    'aa_er':                                'aa_ER.UTF-8',\n    'aa_et':                                'aa_ET.UTF-8',\n    'af':                                   'af_ZA.ISO8859-1',\n    'af_za':                                'af_ZA.ISO8859-1',\n    'agr_pe':                               'agr_PE.UTF-8',",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import locale_alias\n```\n\n```python\n\n\n```\n\n```python\nlocale_alias = {\n    'a3':                                   'az_AZ.KOI8-C',\n    'a3_az':                                'az_AZ.KOI8-C',\n    'a3_az.koic':                           'az_AZ.KOI8-C',\n    'aa_dj':                                'aa_DJ.ISO8859-1',\n    'aa_er':                                'aa_ER.UTF-8',\n    'aa_et':                                'aa_ET.UTF-8',\n    'af':                                   'af_ZA.ISO8859-1',\n    'af_za':                                'af_ZA.ISO8859-1',\n    'agr_pe':                               'agr_PE.UTF-8',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "windows_locale",
        "kind": 5,
        "importPath": "venv.lib.python3.8.locale",
        "description": "venv.lib.python3.8.locale",
        "peekOfCode": "windows_locale = {\n    0x0436: \"af_ZA\", # Afrikaans\n    0x041c: \"sq_AL\", # Albanian\n    0x0484: \"gsw_FR\",# Alsatian - France\n    0x045e: \"am_ET\", # Amharic - Ethiopia\n    0x0401: \"ar_SA\", # Arabic - Saudi Arabia\n    0x0801: \"ar_IQ\", # Arabic - Iraq\n    0x0c01: \"ar_EG\", # Arabic - Egypt\n    0x1001: \"ar_LY\", # Arabic - Libya\n    0x1401: \"ar_DZ\", # Arabic - Algeria",
        "detail": "venv.lib.python3.8.locale",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.locale import windows_locale\n```\n\n```python\n\n\n```\n\n```python\nwindows_locale = {\n    0x0436: \"af_ZA\", # Afrikaans\n    0x041c: \"sq_AL\", # Albanian\n    0x0484: \"gsw_FR\",# Alsatian - France\n    0x045e: \"am_ET\", # Amharic - Ethiopia\n    0x0401: \"ar_SA\", # Arabic - Saudi Arabia\n    0x0801: \"ar_IQ\", # Arabic - Iraq\n    0x0c01: \"ar_EG\", # Arabic - Egypt\n    0x1001: \"ar_LY\", # Arabic - Libya\n    0x1401: \"ar_DZ\", # Arabic - Algeria\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normcase",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def normcase(s):\n    \"\"\"Normalize case of pathname.\n    Makes all characters lowercase and all slashes into backslashes.\"\"\"\n    s = os.fspath(s)\n    if isinstance(s, bytes):\n        return s.replace(b'/', b'\\\\').lower()\n    else:\n        return s.replace('/', '\\\\').lower()\n# Return whether a path is absolute.\n# Trivial in Posix, harder on Windows.",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import normcase\n```\n\n```python\n\n\n```\n\n```python\ndef normcase(s):\n    \"\"\"Normalize case of pathname.\n    Makes all characters lowercase and all slashes into backslashes.\"\"\"\n    s = os.fspath(s)\n    if isinstance(s, bytes):\n        return s.replace(b'/', b'\\\\').lower()\n    else:\n        return s.replace('/', '\\\\').lower()\n# Return whether a path is absolute.\n# Trivial in Posix, harder on Windows.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isabs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    s = splitdrive(s)[1]\n    return len(s) > 0 and s[0] in _get_bothseps(s)\n# Join two (or more) paths.\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import isabs\n```\n\n```python\n\n\n```\n\n```python\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    s = splitdrive(s)[1]\n    return len(s) > 0 and s[0] in _get_bothseps(s)\n# Join two (or more) paths.\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "join",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        seps = b'\\\\/'\n        colon = b':'\n    else:\n        sep = '\\\\'\n        seps = '\\\\/'\n        colon = ':'",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import join\n```\n\n```python\n\n\n```\n\n```python\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        seps = b'\\\\/'\n        colon = b':'\n    else:\n        sep = '\\\\'\n        seps = '\\\\/'\n        colon = ':'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitdrive",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def splitdrive(p):\n    \"\"\"Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n    If the path contained a UNC path, the drive_or_unc will contain the host name",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import splitdrive\n```\n\n```python\n\n\n```\n\n```python\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n    If the path contained a UNC path, the drive_or_unc will contain the host name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def split(p):\n    \"\"\"Split a pathname.\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    seps = _get_bothseps(p)\n    d, p = splitdrive(p)\n    # set i to index beyond p's last slash\n    i = len(p)\n    while i and p[i-1] not in seps:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import split\n```\n\n```python\n\n\n```\n\n```python\ndef split(p):\n    \"\"\"Split a pathname.\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    seps = _get_bothseps(p)\n    d, p = splitdrive(p)\n    # set i to index beyond p's last slash\n    i = len(p)\n    while i and p[i-1] not in seps:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitext",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        return genericpath._splitext(p, b'\\\\', b'/', b'.')\n    else:\n        return genericpath._splitext(p, '\\\\', '/', '.')\nsplitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import splitext\n```\n\n```python\n\n\n```\n\n```python\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        return genericpath._splitext(p, b'\\\\', b'/', b'.')\n    else:\n        return genericpath._splitext(p, '\\\\', '/', '.')\nsplitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "basename",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import basename\n```\n\n```python\n\n\n```\n\n```python\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dirname",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import dirname\n```\n\n```python\n\n\n```\n\n```python\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "islink",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import islink\n```\n\n```python\n\n\n```\n\n```python\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lexists",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# Is a path a mount point?\n# Any drive letter root (eg c:\\)\n# Any share UNC (eg \\\\server\\share)",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import lexists\n```\n\n```python\n\n\n```\n\n```python\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# Is a path a mount point?\n# Any drive letter root (eg c:\\)\n# Any share UNC (eg \\\\server\\share)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ismount",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def ismount(path):\n    \"\"\"Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)\"\"\"\n    path = os.fspath(path)\n    seps = _get_bothseps(path)\n    path = abspath(path)\n    root, rest = splitdrive(path)\n    if root and root[0] in seps:\n        return (not rest) or (rest in seps)\n    if rest in seps:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import ismount\n```\n\n```python\n\n\n```\n\n```python\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)\"\"\"\n    path = os.fspath(path)\n    seps = _get_bothseps(path)\n    path = abspath(path)\n    root, rest = splitdrive(path)\n    if root and root[0] in seps:\n        return (not rest) or (rest in seps)\n    if rest in seps:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expanduser",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def expanduser(path):\n    \"\"\"Expand ~ and ~user constructs.\n    If user or $HOME is unknown, do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import expanduser\n```\n\n```python\n\n\n```\n\n```python\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructs.\n    If user or $HOME is unknown, do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expandvars",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def expandvars(path):\n    \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n    Unknown variables are left unchanged.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        if b'$' not in path and b'%' not in path:\n            return path\n        import string\n        varchars = bytes(string.ascii_letters + string.digits + '_-', 'ascii')\n        quote = b'\\''",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import expandvars\n```\n\n```python\n\n\n```\n\n```python\ndef expandvars(path):\n    \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n    Unknown variables are left unchanged.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        if b'$' not in path and b'%' not in path:\n            return path\n        import string\n        varchars = bytes(string.ascii_letters + string.digits + '_-', 'ascii')\n        quote = b'\\''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n        special_prefixes = (b'\\\\\\\\.\\\\', b'\\\\\\\\?\\\\')\n    else:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import normpath\n```\n\n```python\n\n\n```\n\n```python\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n        special_prefixes = (b'\\\\\\\\.\\\\', b'\\\\\\\\?\\\\')\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "relpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '\\\\'\n        curdir = '.'",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import relpath\n```\n\n```python\n\n\n```\n\n```python\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '\\\\'\n        curdir = '.'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "commonpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "def commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n    else:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import commonpath\n```\n\n```python\n\n\n```\n\n```python\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "curdir",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "curdir = '.'\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import curdir\n```\n\n```python\n\n\n```\n\n```python\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pardir",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "pardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import pardir\n```\n\n```python\n\n\n```\n\n```python\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "extsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import extsep\n```\n\n```python\n\n\n```\n\n```python\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "sep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import sep\n```\n\n```python\n\n\n```\n\n```python\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pathsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "pathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import pathsep\n```\n\n```python\n\n\n```\n\n```python\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "altsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "altsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import altsep\n```\n\n```python\n\n\n```\n\n```python\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "defpath",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "defpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import defpath\n```\n\n```python\n\n\n```\n\n```python\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "devnull",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "devnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import devnull\n```\n\n```python\n\n\n```\n\n```python\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\n           \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]\ndef _get_bothseps(path):\n    if isinstance(path, bytes):\n        return b'\\\\/'",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\n           \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]\ndef _get_bothseps(path):\n    if isinstance(path, bytes):\n        return b'\\\\/'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitext.__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "splitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import splitext.__doc__\n```\n\n```python\n\n\n```\n\n```python\nsplitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "supports_unicode_filenames",
        "kind": 5,
        "importPath": "venv.lib.python3.8.ntpath",
        "description": "venv.lib.python3.8.ntpath",
        "peekOfCode": "supports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:",
        "detail": "venv.lib.python3.8.ntpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.ntpath import supports_unicode_filenames\n```\n\n```python\n\n\n```\n\n```python\nsupports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "attrgetter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "class attrgetter:\n    \"\"\"\n    Return a callable object that fetches the given attribute(s) from its operand.\n    After f = attrgetter('name'), the call f(r) returns r.name.\n    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\n    After h = attrgetter('name.first', 'name.last'), the call h(r) returns\n    (r.name.first, r.name.last).\n    \"\"\"\n    __slots__ = ('_attrs', '_call')\n    def __init__(self, attr, *attrs):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import attrgetter\n```\n\n```python\n\n\n```\n\n```python\nclass attrgetter:\n    \"\"\"\n    Return a callable object that fetches the given attribute(s) from its operand.\n    After f = attrgetter('name'), the call f(r) returns r.name.\n    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\n    After h = attrgetter('name.first', 'name.last'), the call h(r) returns\n    (r.name.first, r.name.last).\n    \"\"\"\n    __slots__ = ('_attrs', '_call')\n    def __init__(self, attr, *attrs):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itemgetter",
        "kind": 6,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "class itemgetter:\n    \"\"\"\n    Return a callable object that fetches the given item(s) from its operand.\n    After f = itemgetter(2), the call f(r) returns r[2].\n    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])\n    \"\"\"\n    __slots__ = ('_items', '_call')\n    def __init__(self, item, *items):\n        if not items:\n            self._items = (item,)",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import itemgetter\n```\n\n```python\n\n\n```\n\n```python\nclass itemgetter:\n    \"\"\"\n    Return a callable object that fetches the given item(s) from its operand.\n    After f = itemgetter(2), the call f(r) returns r[2].\n    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])\n    \"\"\"\n    __slots__ = ('_items', '_call')\n    def __init__(self, item, *items):\n        if not items:\n            self._items = (item,)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "methodcaller",
        "kind": 6,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "class methodcaller:\n    \"\"\"\n    Return a callable object that calls the given method on its operand.\n    After f = methodcaller('name'), the call f(r) returns r.name().\n    After g = methodcaller('name', 'date', foo=1), the call g(r) returns\n    r.name('date', foo=1).\n    \"\"\"\n    __slots__ = ('_name', '_args', '_kwargs')\n    def __init__(self, name, /, *args, **kwargs):\n        self._name = name",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import methodcaller\n```\n\n```python\n\n\n```\n\n```python\nclass methodcaller:\n    \"\"\"\n    Return a callable object that calls the given method on its operand.\n    After f = methodcaller('name'), the call f(r) returns r.name().\n    After g = methodcaller('name', 'date', foo=1), the call g(r) returns\n    r.name('date', foo=1).\n    \"\"\"\n    __slots__ = ('_name', '_args', '_kwargs')\n    def __init__(self, name, /, *args, **kwargs):\n        self._name = name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lt",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def lt(a, b):\n    \"Same as a < b.\"\n    return a < b\ndef le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import lt\n```\n\n```python\n\n\n```\n\n```python\ndef lt(a, b):\n    \"Same as a < b.\"\n    return a < b\ndef le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "le",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import le\n```\n\n```python\n\n\n```\n\n```python\ndef le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "eq",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import eq\n```\n\n```python\n\n\n```\n\n```python\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ne",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ne\n```\n\n```python\n\n\n```\n\n```python\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ge",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ge\n```\n\n```python\n\n\n```\n\n```python\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gt",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import gt\n```\n\n```python\n\n\n```\n\n```python\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "not_",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import not_\n```\n\n```python\n\n\n```\n\n```python\ndef not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "truth",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import truth\n```\n\n```python\n\n\n```\n\n```python\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import is_\n```\n\n```python\n\n\n```\n\n```python\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_not",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import is_not\n```\n\n```python\n\n\n```\n\n```python\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import abs\n```\n\n```python\n\n\n```\n\n```python\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import add\n```\n\n```python\n\n\n```\n\n```python\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "and_",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import and_\n```\n\n```python\n\n\n```\n\n```python\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "floordiv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import floordiv\n```\n\n```python\n\n\n```\n\n```python\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import index\n```\n\n```python\n\n\n```\n\n```python\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "inv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import inv\n```\n\n```python\n\n\n```\n\n```python\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lshift",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import lshift\n```\n\n```python\n\n\n```\n\n```python\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mod",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import mod\n```\n\n```python\n\n\n```\n\n```python\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import mul\n```\n\n```python\n\n\n```\n\n```python\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "matmul",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import matmul\n```\n\n```python\n\n\n```\n\n```python\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "neg",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import neg\n```\n\n```python\n\n\n```\n\n```python\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "or_",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import or_\n```\n\n```python\n\n\n```\n\n```python\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pos",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import pos\n```\n\n```python\n\n\n```\n\n```python\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pow",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import pow\n```\n\n```python\n\n\n```\n\n```python\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rshift",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import rshift\n```\n\n```python\n\n\n```\n\n```python\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import sub\n```\n\n```python\n\n\n```\n\n```python\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "truediv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import truediv\n```\n\n```python\n\n\n```\n\n```python\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xor",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import xor\n```\n\n```python\n\n\n```\n\n```python\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b\ndef contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import concat\n```\n\n```python\n\n\n```\n\n```python\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b\ndef contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "contains",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import contains\n```\n\n```python\n\n\n```\n\n```python\ndef contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "countOf",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count\ndef delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import countOf\n```\n\n```python\n\n\n```\n\n```python\ndef countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count\ndef delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "delitem",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]\ndef getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import delitem\n```\n\n```python\n\n\n```\n\n```python\ndef delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]\ndef getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getitem",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import getitem\n```\n\n```python\n\n\n```\n\n```python\ndef getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "indexOf",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')\ndef setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import indexOf\n```\n\n```python\n\n\n```\n\n```python\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')\ndef setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setitem",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c\ndef length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import setitem\n```\n\n```python\n\n\n```\n\n```python\ndef setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c\ndef length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "length_hint",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.\n    \"\"\"\n    if not isinstance(default, int):\n        msg = (\"'%s' object cannot be interpreted as an integer\" %",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import length_hint\n```\n\n```python\n\n\n```\n\n```python\ndef length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.\n    \"\"\"\n    if not isinstance(default, int):\n        msg = (\"'%s' object cannot be interpreted as an integer\" %\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iadd",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def iadd(a, b):\n    \"Same as a += b.\"\n    a += b\n    return a\ndef iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import iadd\n```\n\n```python\n\n\n```\n\n```python\ndef iadd(a, b):\n    \"Same as a += b.\"\n    a += b\n    return a\ndef iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iand",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import iand\n```\n\n```python\n\n\n```\n\n```python\ndef iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "iconcat",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b\n    return a\ndef ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import iconcat\n```\n\n```python\n\n\n```\n\n```python\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b\n    return a\ndef ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ifloordiv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b\n    return a\ndef ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ifloordiv\n```\n\n```python\n\n\n```\n\n```python\ndef ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b\n    return a\ndef ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ilshift",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ilshift\n```\n\n```python\n\n\n```\n\n```python\ndef ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "imod",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import imod\n```\n\n```python\n\n\n```\n\n```python\ndef imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "imul",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import imul\n```\n\n```python\n\n\n```\n\n```python\ndef imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "imatmul",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import imatmul\n```\n\n```python\n\n\n```\n\n```python\ndef imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ior",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ior\n```\n\n```python\n\n\n```\n\n```python\ndef ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ipow",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ipow\n```\n\n```python\n\n\n```\n\n```python\ndef ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "irshift",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import irshift\n```\n\n```python\n\n\n```\n\n```python\ndef irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isub",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import isub\n```\n\n```python\n\n\n```\n\n```python\ndef isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itruediv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import itruediv\n```\n\n```python\n\n\n```\n\n```python\ndef itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ixor",
        "kind": 2,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "def ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *\nexcept ImportError:\n    pass\nelse:\n    from _operator import __doc__",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import ixor\n```\n\n```python\n\n\n```\n\n```python\ndef ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *\nexcept ImportError:\n    pass\nelse:\n    from _operator import __doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__all__ = ['abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf',\n           'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand',\n           'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul',\n           'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift',\n           'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le',\n           'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod',\n           'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift',\n           'setitem', 'sub', 'truediv', 'truth', 'xor']\nfrom builtins import abs as _abs\n# Comparison Operations *******************************************************#",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf',\n           'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand',\n           'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul',\n           'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift',\n           'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le',\n           'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod',\n           'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift',\n           'setitem', 'sub', 'truediv', 'truth', 'xor']\nfrom builtins import abs as _abs\n# Comparison Operations *******************************************************#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "invert",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "invert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import invert\n```\n\n```python\n\n\n```\n\n```python\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__lt__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__lt__ = lt\n__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __lt__\n```\n\n```python\n\n\n```\n\n```python\n__lt__ = lt\n__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__le__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __le__\n```\n\n```python\n\n\n```\n\n```python\n__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__eq__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __eq__\n```\n\n```python\n\n\n```\n\n```python\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ne__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ne__\n```\n\n```python\n\n\n```\n\n```python\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ge__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ge__\n```\n\n```python\n\n\n```\n\n```python\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__gt__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __gt__\n```\n\n```python\n\n\n```\n\n```python\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__not__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __not__\n```\n\n```python\n\n\n```\n\n```python\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__abs__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __abs__\n```\n\n```python\n\n\n```\n\n```python\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__add__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __add__\n```\n\n```python\n\n\n```\n\n```python\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__and__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __and__\n```\n\n```python\n\n\n```\n\n```python\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__floordiv__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __floordiv__\n```\n\n```python\n\n\n```\n\n```python\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__index__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __index__\n```\n\n```python\n\n\n```\n\n```python\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__inv__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __inv__\n```\n\n```python\n\n\n```\n\n```python\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__invert__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __invert__\n```\n\n```python\n\n\n```\n\n```python\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__lshift__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __lshift__\n```\n\n```python\n\n\n```\n\n```python\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__mod__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __mod__\n```\n\n```python\n\n\n```\n\n```python\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__mul__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __mul__\n```\n\n```python\n\n\n```\n\n```python\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__matmul__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __matmul__\n```\n\n```python\n\n\n```\n\n```python\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__neg__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __neg__\n```\n\n```python\n\n\n```\n\n```python\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__or__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __or__\n```\n\n```python\n\n\n```\n\n```python\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__pos__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __pos__\n```\n\n```python\n\n\n```\n\n```python\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__pow__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __pow__\n```\n\n```python\n\n\n```\n\n```python\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__rshift__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __rshift__\n```\n\n```python\n\n\n```\n\n```python\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__sub__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __sub__\n```\n\n```python\n\n\n```\n\n```python\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__truediv__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __truediv__\n```\n\n```python\n\n\n```\n\n```python\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__xor__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __xor__\n```\n\n```python\n\n\n```\n\n```python\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__concat__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __concat__\n```\n\n```python\n\n\n```\n\n```python\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__contains__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __contains__\n```\n\n```python\n\n\n```\n\n```python\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__delitem__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __delitem__\n```\n\n```python\n\n\n```\n\n```python\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__getitem__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __getitem__\n```\n\n```python\n\n\n```\n\n```python\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__setitem__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __setitem__\n```\n\n```python\n\n\n```\n\n```python\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__iadd__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __iadd__\n```\n\n```python\n\n\n```\n\n```python\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__iand__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __iand__\n```\n\n```python\n\n\n```\n\n```python\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__iconcat__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __iconcat__\n```\n\n```python\n\n\n```\n\n```python\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ifloordiv__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ifloordiv__\n```\n\n```python\n\n\n```\n\n```python\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ilshift__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ilshift__\n```\n\n```python\n\n\n```\n\n```python\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__imod__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __imod__\n```\n\n```python\n\n\n```\n\n```python\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__imul__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __imul__\n```\n\n```python\n\n\n```\n\n```python\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__imatmul__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __imatmul__\n```\n\n```python\n\n\n```\n\n```python\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ior__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ior__\n```\n\n```python\n\n\n```\n\n```python\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ipow__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ipow__\n```\n\n```python\n\n\n```\n\n```python\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__irshift__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __irshift__\n```\n\n```python\n\n\n```\n\n```python\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__isub__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __isub__\n```\n\n```python\n\n\n```\n\n```python\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__itruediv__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __itruediv__\n```\n\n```python\n\n\n```\n\n```python\n__itruediv__ = itruediv\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__ixor__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.operator",
        "description": "venv.lib.python3.8.operator",
        "peekOfCode": "__ixor__ = ixor",
        "detail": "venv.lib.python3.8.operator",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.operator import __ixor__\n```\n\n```python\n\n\n```\n\n```python\n__ixor__ = ixor\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Environ",
        "kind": 6,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "class _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n    def __getitem__(self, key):",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import _Environ\n```\n\n```python\n\n\n```\n\n```python\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n    def __getitem__(self, key):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_wrap_close",
        "kind": 6,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "class _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import _wrap_close\n```\n\n```python\n\n\n```\n\n```python\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PathLike",
        "kind": 6,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "class PathLike(abc.ABC):\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return hasattr(subclass, '__fspath__')\nif name == 'nt':",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import PathLike\n```\n\n```python\n\n\n```\n\n```python\nclass PathLike(abc.ABC):\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return hasattr(subclass, '__fspath__')\nif name == 'nt':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "makedirs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import makedirs\n```\n\n```python\n\n\n```\n\n```python\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removedirs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def removedirs(name):\n    \"\"\"removedirs(name)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import removedirs\n```\n\n```python\n\n\n```\n\n```python\ndef removedirs(name):\n    \"\"\"removedirs(name)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "renames",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import renames\n```\n\n```python\n\n\n```\n\n```python\ndef renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import walk\n```\n\n```python\n\n\n```\n\n```python\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execl",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execl\n```\n\n```python\n\n\n```\n\n```python\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execle",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execle\n```\n\n```python\n\n\n```\n\n```python\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execlp",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execlp\n```\n\n```python\n\n\n```\n\n```python\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execlpe",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execlpe\n```\n\n```python\n\n\n```\n\n```python\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execvp",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execvp\n```\n\n```python\n\n\n```\n\n```python\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execvpe",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import execvpe\n```\n\n```python\n\n\n```\n\n```python\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_exec_path",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import get_exec_path\n```\n\n```python\n\n\n```\n\n```python\ndef get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getenv",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import getenv\n```\n\n```python\n\n\n```\n\n```python\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "popen",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import popen\n```\n\n```python\n\n\n```\n\n```python\ndef popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fdopen",
        "kind": 2,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "def fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n    If str or bytes is passed in, it is returned unchanged. Otherwise the",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import fdopen\n```\n\n```python\n\n\n```\n\n```python\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n    If str or bytes is passed in, it is returned unchanged. Otherwise the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_names",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import _names\n```\n\n```python\n\n\n```\n\n```python\n_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.modules['os.path']",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "sys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n    _set = set()",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import sys.modules['os.path']\n```\n\n```python\n\n\n```\n\n```python\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n    _set = set()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import SEEK_SET\n```\n\n```python\n\n\n```\n\n```python\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import SEEK_CUR\n```\n\n```python\n\n\n```\n\n```python\nSEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "SEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import SEEK_END\n```\n\n```python\n\n\n```\n\n```python\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "environ = _createenviron()\ndel _createenviron\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import environ\n```\n\n```python\n\n\n```\n\n```python\nenviron = _createenviron()\ndel _createenviron\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "supports_bytes_environ",
        "kind": 5,
        "importPath": "venv.lib.python3.8.os",
        "description": "venv.lib.python3.8.os",
        "peekOfCode": "supports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,",
        "detail": "venv.lib.python3.8.os",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.os import supports_bytes_environ\n```\n\n```python\n\n\n```\n\n```python\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normcase",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    return os.fspath(s)\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import normcase\n```\n\n```python\n\n\n```\n\n```python\ndef normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    return os.fspath(s)\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isabs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import isabs\n```\n\n```python\n\n\n```\n\n```python\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "join",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import join\n```\n\n```python\n\n\n```\n\n```python\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import split\n```\n\n```python\n\n\n```\n\n```python\ndef split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitext",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import splitext\n```\n\n```python\n\n\n```\n\n```python\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitdrive",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import splitdrive\n```\n\n```python\n\n\n```\n\n```python\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "basename",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n# Return the head (dirname) part of a path, same as split(path)[0].\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import basename\n```\n\n```python\n\n\n```\n\n```python\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n# Return the head (dirname) part of a path, same as split(path)[0].\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dirname",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n# Is a path a symbolic link?",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import dirname\n```\n\n```python\n\n\n```\n\n```python\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n# Is a path a symbolic link?\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "islink",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import islink\n```\n\n```python\n\n\n```\n\n```python\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lexists",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\ndef ismount(path):",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import lexists\n```\n\n```python\n\n\n```\n\n```python\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\ndef ismount(path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ismount",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except (OSError, ValueError):\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import ismount\n```\n\n```python\n\n\n```\n\n```python\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except (OSError, ValueError):\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expanduser",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import expanduser\n```\n\n```python\n\n\n```\n\n```python\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expandvars",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import expandvars\n```\n\n```python\n\n\n```\n\n```python\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import normpath\n```\n\n```python\n\n\n```\n\n```python\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abspath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import abspath\n```\n\n```python\n\n\n```\n\n```python\ndef abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "realpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import realpath\n```\n\n```python\n\n\n```\n\n```python\ndef realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "relpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import relpath\n```\n\n```python\n\n\n```\n\n```python\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "commonpath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "def commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import commonpath\n```\n\n```python\n\n\n```\n\n```python\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "curdir",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "curdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import curdir\n```\n\n```python\n\n\n```\n\n```python\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pardir",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "pardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import pardir\n```\n\n```python\n\n\n```\n\n```python\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "extsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import extsep\n```\n\n```python\n\n\n```\n\n```python\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "sep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import sep\n```\n\n```python\n\n\n```\n\n```python\nsep = '/'\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pathsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "pathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import pathsep\n```\n\n```python\n\n\n```\n\n```python\npathsep = ':'\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "defpath",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "defpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import defpath\n```\n\n```python\n\n\n```\n\n```python\ndefpath = '/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "altsep",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "altsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import altsep\n```\n\n```python\n\n\n```\n\n```python\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "devnull",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "devnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import devnull\n```\n\n```python\n\n\n```\n\n```python\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\ndef _get_sep(path):\n    if isinstance(path, bytes):",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\ndef _get_sep(path):\n    if isinstance(path, bytes):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "splitext.__doc__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "splitext.__doc__ = genericpath._splitext.__doc__\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import splitext.__doc__\n```\n\n```python\n\n\n```\n\n```python\nsplitext.__doc__ = genericpath._splitext.__doc__\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_varprog",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "_varprog = None\n_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import _varprog\n```\n\n```python\n\n\n```\n\n```python\n_varprog = None\n_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_varprogb",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import _varprogb\n```\n\n```python\n\n\n```\n\n```python\n_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "supports_unicode_filenames",
        "kind": 5,
        "importPath": "venv.lib.python3.8.posixpath",
        "description": "venv.lib.python3.8.posixpath",
        "peekOfCode": "supports_unicode_filenames = (sys.platform == 'darwin')\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'",
        "detail": "venv.lib.python3.8.posixpath",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.posixpath import supports_unicode_filenames\n```\n\n```python\n\n\n```\n\n```python\nsupports_unicode_filenames = (sys.platform == 'darwin')\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Random",
        "kind": 6,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "class Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n    \"\"\"",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import Random\n```\n\n```python\n\n\n```\n\n```python\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SystemRandom",
        "kind": 6,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "class SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n    def getrandbits(self, k):",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import SystemRandom\n```\n\n```python\n\n\n```\n\n```python\nclass SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n    def getrandbits(self, k):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n           \"SystemRandom\"]\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n           \"SystemRandom\"]\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NV_MAGICCONST",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import NV_MAGICCONST\n```\n\n```python\n\n\n```\n\n```python\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TWOPI",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "TWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import TWOPI\n```\n\n```python\n\n\n```\n\n```python\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LOG4",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "LOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import LOG4\n```\n\n```python\n\n\n```\n\n```python\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SG_MAGICCONST",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "SG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import SG_MAGICCONST\n```\n\n```python\n\n\n```\n\n```python\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BPF",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "BPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import BPF\n```\n\n```python\n\n\n```\n\n```python\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RECIP_BPF",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "RECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import RECIP_BPF\n```\n\n```python\n\n\n```\n\n```python\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_inst",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import _inst\n```\n\n```python\n\n\n```\n\n```python\n_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "seed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import seed\n```\n\n```python\n\n\n```\n\n```python\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "random",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "random = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import random\n```\n\n```python\n\n\n```\n\n```python\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uniform",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "uniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import uniform\n```\n\n```python\n\n\n```\n\n```python\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "triangular",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "triangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import triangular\n```\n\n```python\n\n\n```\n\n```python\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "randint",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "randint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import randint\n```\n\n```python\n\n\n```\n\n```python\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "choice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import choice\n```\n\n```python\n\n\n```\n\n```python\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "randrange",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "randrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import randrange\n```\n\n```python\n\n\n```\n\n```python\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "sample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import sample\n```\n\n```python\n\n\n```\n\n```python\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "shuffle",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "shuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import shuffle\n```\n\n```python\n\n\n```\n\n```python\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "choices",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "choices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import choices\n```\n\n```python\n\n\n```\n\n```python\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "normalvariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "normalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import normalvariate\n```\n\n```python\n\n\n```\n\n```python\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "lognormvariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "lognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import lognormvariate\n```\n\n```python\n\n\n```\n\n```python\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expovariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "expovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import expovariate\n```\n\n```python\n\n\n```\n\n```python\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vonmisesvariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "vonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import vonmisesvariate\n```\n\n```python\n\n\n```\n\n```python\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gammavariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "gammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import gammavariate\n```\n\n```python\n\n\n```\n\n```python\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gauss",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "gauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import gauss\n```\n\n```python\n\n\n```\n\n```python\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "betavariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "betavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import betavariate\n```\n\n```python\n\n\n```\n\n```python\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "paretovariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "paretovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import paretovariate\n```\n\n```python\n\n\n```\n\n```python\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "weibullvariate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "weibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import weibullvariate\n```\n\n```python\n\n\n```\n\n```python\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getstate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "getstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import getstate\n```\n\n```python\n\n\n```\n\n```python\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setstate",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "setstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import setstate\n```\n\n```python\n\n\n```\n\n```python\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getrandbits",
        "kind": 5,
        "importPath": "venv.lib.python3.8.random",
        "description": "venv.lib.python3.8.random",
        "peekOfCode": "getrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "venv.lib.python3.8.random",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.random import getrandbits\n```\n\n```python\n\n\n```\n\n```python\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RegexFlag",
        "kind": 6,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "class RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = T = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import RegexFlag\n```\n\n```python\n\n\n```\n\n```python\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = T = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Scanner",
        "kind": 6,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "class Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.State()\n        s.flags = flags",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import Scanner\n```\n\n```python\n\n\n```\n\n```python\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.State()\n        s.flags = flags\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "match",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import match\n```\n\n```python\n\n\n```\n\n```python\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fullmatch",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import fullmatch\n```\n\n```python\n\n\n```\n\n```python\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import search\n```\n\n```python\n\n\n```\n\n```python\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import sub\n```\n\n```python\n\n\n```\n\n```python\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "subn",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import subn\n```\n\n```python\n\n\n```\n\n```python\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\ndef findall(pattern, string, flags=0):",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import split\n```\n\n```python\n\n\n```\n\n```python\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\ndef findall(pattern, string, flags=0):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "findall",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import findall\n```\n\n```python\n\n\n```\n\n```python\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "finditer",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import finditer\n```\n\n```python\n\n\n```\n\n```python\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import compile\n```\n\n```python\n\n\n```\n\n```python\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "purge",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import purge\n```\n\n```python\n\n\n```\n\n```python\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import template\n```\n\n```python\n\n\n```\n\n```python\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape",
        "kind": 2,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "def escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\nPattern = type(sre_compile.compile('', 0))",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import escape\n```\n\n```python\n\n\n```\n\n```python\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\nPattern = type(sre_compile.compile('', 0))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import __version__\n```\n\n```python\n\n\n```\n\n```python\n__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "error = sre_compile.error\n# --------------------------------------------------------------------\n# public interface\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import error\n```\n\n```python\n\n\n```\n\n```python\nerror = sre_compile.error\n# --------------------------------------------------------------------\n# public interface\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_special_chars_map",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import _special_chars_map\n```\n\n```python\n\n\n```\n\n```python\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pattern",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "Pattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import Pattern\n```\n\n```python\n\n\n```\n\n```python\nPattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Match",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "Match = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import Match\n```\n\n```python\n\n\n```\n\n```python\nMatch = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_cache",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import _cache\n```\n\n```python\n\n\n```\n\n```python\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_MAXCACHE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.re",
        "description": "venv.lib.python3.8.re",
        "peekOfCode": "_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):",
        "detail": "venv.lib.python3.8.re",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.re import _MAXCACHE\n```\n\n```python\n\n\n```\n\n```python\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Repr",
        "kind": 6,
        "importPath": "venv.lib.python3.8.reprlib",
        "description": "venv.lib.python3.8.reprlib",
        "peekOfCode": "class Repr:\n    def __init__(self):\n        self.maxlevel = 6\n        self.maxtuple = 6\n        self.maxlist = 6\n        self.maxarray = 5\n        self.maxdict = 4\n        self.maxset = 6\n        self.maxfrozenset = 6\n        self.maxdeque = 6",
        "detail": "venv.lib.python3.8.reprlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.reprlib import Repr\n```\n\n```python\n\n\n```\n\n```python\nclass Repr:\n    def __init__(self):\n        self.maxlevel = 6\n        self.maxtuple = 6\n        self.maxlist = 6\n        self.maxarray = 5\n        self.maxdict = 4\n        self.maxset = 6\n        self.maxfrozenset = 6\n        self.maxdeque = 6\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "recursive_repr",
        "kind": 2,
        "importPath": "venv.lib.python3.8.reprlib",
        "description": "venv.lib.python3.8.reprlib",
        "peekOfCode": "def recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()\n            if key in repr_running:\n                return fillvalue\n            repr_running.add(key)\n            try:",
        "detail": "venv.lib.python3.8.reprlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.reprlib import recursive_repr\n```\n\n```python\n\n\n```\n\n```python\ndef recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()\n            if key in repr_running:\n                return fillvalue\n            repr_running.add(key)\n            try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.reprlib",
        "description": "venv.lib.python3.8.reprlib",
        "peekOfCode": "__all__ = [\"Repr\", \"repr\", \"recursive_repr\"]\nimport builtins\nfrom itertools import islice\nfrom _thread import get_ident\ndef recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()",
        "detail": "venv.lib.python3.8.reprlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.reprlib import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Repr\", \"repr\", \"recursive_repr\"]\nimport builtins\nfrom itertools import islice\nfrom _thread import get_ident\ndef recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "aRepr",
        "kind": 5,
        "importPath": "venv.lib.python3.8.reprlib",
        "description": "venv.lib.python3.8.reprlib",
        "peekOfCode": "aRepr = Repr()\nrepr = aRepr.repr",
        "detail": "venv.lib.python3.8.reprlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.reprlib import aRepr\n```\n\n```python\n\n\n```\n\n```python\naRepr = Repr()\nrepr = aRepr.repr\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "repr",
        "kind": 5,
        "importPath": "venv.lib.python3.8.reprlib",
        "description": "venv.lib.python3.8.reprlib",
        "peekOfCode": "repr = aRepr.repr",
        "detail": "venv.lib.python3.8.reprlib",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.reprlib import repr\n```\n\n```python\n\n\n```\n\n```python\nrepr = aRepr.repr\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Completer",
        "kind": 6,
        "importPath": "venv.lib.python3.8.rlcompleter",
        "description": "venv.lib.python3.8.rlcompleter",
        "peekOfCode": "class Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:\n        readline.set_completer(Completer(my_namespace).complete)",
        "detail": "venv.lib.python3.8.rlcompleter",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.rlcompleter import Completer\n```\n\n```python\n\n\n```\n\n```python\nclass Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:\n        readline.set_completer(Completer(my_namespace).complete)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_class_members",
        "kind": 2,
        "importPath": "venv.lib.python3.8.rlcompleter",
        "description": "venv.lib.python3.8.rlcompleter",
        "peekOfCode": "def get_class_members(klass):\n    ret = dir(klass)\n    if hasattr(klass,'__bases__'):\n        for base in klass.__bases__:\n            ret = ret + get_class_members(base)\n    return ret\ntry:\n    import readline\nexcept ImportError:\n    _readline_available = False",
        "detail": "venv.lib.python3.8.rlcompleter",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.rlcompleter import get_class_members\n```\n\n```python\n\n\n```\n\n```python\ndef get_class_members(klass):\n    ret = dir(klass)\n    if hasattr(klass,'__bases__'):\n        for base in klass.__bases__:\n            ret = ret + get_class_members(base)\n    return ret\ntry:\n    import readline\nexcept ImportError:\n    _readline_available = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.rlcompleter",
        "description": "venv.lib.python3.8.rlcompleter",
        "peekOfCode": "__all__ = [\"Completer\"]\nclass Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:",
        "detail": "venv.lib.python3.8.rlcompleter",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.rlcompleter import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Completer\"]\nclass Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class Error(OSError):\n    pass\nclass SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import Error\n```\n\n```python\n\n\n```\n\n```python\nclass Error(OSError):\n    pass\nclass SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SameFileError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import SameFileError\n```\n\n```python\n\n\n```\n\n```python\nclass SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SpecialFileError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import SpecialFileError\n```\n\n```python\n\n\n```\n\n```python\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExecError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import ExecError\n```\n\n```python\n\n\n```\n\n```python\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ReadError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import ReadError\n```\n\n```python\n\n\n```\n\n```python\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RegistryError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n    \"\"\"Copy a regular file content or metadata by using high-performance\n    fcopyfile(3) syscall (macOS).",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import RegistryError\n```\n\n```python\n\n\n```\n\n```python\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n    \"\"\"Copy a regular file content or metadata by using high-performance\n    fcopyfile(3) syscall (macOS).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_GiveupOnFastCopy",
        "kind": 6,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "class _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n    \"\"\"Copy a regular file content or metadata by using high-performance\n    fcopyfile(3) syscall (macOS).\n    \"\"\"\n    try:\n        infd = fsrc.fileno()",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _GiveupOnFastCopy\n```\n\n```python\n\n\n```\n\n```python\nclass _GiveupOnFastCopy(Exception):\n    \"\"\"Raised as a signal to fallback on using raw read()/write()\n    file copy when fast-copy functions fail to do so.\n    \"\"\"\ndef _fastcopy_fcopyfile(fsrc, fdst, flags):\n    \"\"\"Copy a regular file content or metadata by using high-performance\n    fcopyfile(3) syscall (macOS).\n    \"\"\"\n    try:\n        infd = fsrc.fileno()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyfileobj",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copyfileobj(fsrc, fdst, length=0):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    # Localize variable access to minimize overhead.\n    if not length:\n        length = COPY_BUFSIZE\n    fsrc_read = fsrc.read\n    fdst_write = fdst.write\n    while True:\n        buf = fsrc_read(length)\n        if not buf:",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copyfileobj\n```\n\n```python\n\n\n```\n\n```python\ndef copyfileobj(fsrc, fdst, length=0):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    # Localize variable access to minimize overhead.\n    if not length:\n        length = COPY_BUFSIZE\n    fsrc_read = fsrc.read\n    fdst_write = fdst.write\n    while True:\n        buf = fsrc_read(length)\n        if not buf:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyfile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copyfile(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data from src to dst in the most efficient way possible.\n    If follow_symlinks is not set and src is a symbolic link, a new\n    symlink will be created instead of copying the file it points to.\n    \"\"\"\n    if _samefile(src, dst):\n        raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    file_size = 0\n    for i, fn in enumerate([src, dst]):\n        try:",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copyfile\n```\n\n```python\n\n\n```\n\n```python\ndef copyfile(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data from src to dst in the most efficient way possible.\n    If follow_symlinks is not set and src is a symbolic link, a new\n    symlink will be created instead of copying the file it points to.\n    \"\"\"\n    if _samefile(src, dst):\n        raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    file_size = 0\n    for i, fn in enumerate([src, dst]):\n        try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copymode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copymode(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy mode bits from src to dst.\n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n    \"\"\"\n    if not follow_symlinks and _islink(src) and os.path.islink(dst):\n        if hasattr(os, 'lchmod'):\n            stat_func, chmod_func = os.lstat, os.lchmod\n        else:",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copymode\n```\n\n```python\n\n\n```\n\n```python\ndef copymode(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy mode bits from src to dst.\n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n    \"\"\"\n    if not follow_symlinks and _islink(src) and os.path.islink(dst):\n        if hasattr(os, 'lchmod'):\n            stat_func, chmod_func = os.lstat, os.lchmod\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copystat",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copystat(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy file metadata\n    Copy the permission bits, last access time, last modification time, and\n    flags from `src` to `dst`. On Linux, copystat() also copies the \"extended\n    attributes\" where possible. The file contents, owner, and group are\n    unaffected. `src` and `dst` are path-like objects or path names given as\n    strings.\n    If the optional flag `follow_symlinks` is not set, symlinks aren't\n    followed if and only if both `src` and `dst` are symlinks.\n    \"\"\"",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copystat\n```\n\n```python\n\n\n```\n\n```python\ndef copystat(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy file metadata\n    Copy the permission bits, last access time, last modification time, and\n    flags from `src` to `dst`. On Linux, copystat() also copies the \"extended\n    attributes\" where possible. The file contents, owner, and group are\n    unaffected. `src` and `dst` are path-like objects or path names given as\n    strings.\n    If the optional flag `follow_symlinks` is not set, symlinks aren't\n    followed if and only if both `src` and `dst` are symlinks.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copy(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    If source and destination are the same file, a SameFileError will be\n    raised.\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copy\n```\n\n```python\n\n\n```\n\n```python\ndef copy(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    If source and destination are the same file, a SameFileError will be\n    raised.\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy2",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copy2(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and metadata. Return the file's destination.\n    Metadata is copied with copystat(). Please see the copystat function\n    for more information.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copy2\n```\n\n```python\n\n\n```\n\n```python\ndef copy2(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and metadata. Return the file's destination.\n    Metadata is copied with copystat(). Please see the copystat function\n    for more information.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ignore_patterns",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def ignore_patterns(*patterns):\n    \"\"\"Function that can be used as copytree() ignore parameter.\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files\"\"\"\n    def _ignore_patterns(path, names):\n        ignored_names = []\n        for pattern in patterns:\n            ignored_names.extend(fnmatch.filter(names, pattern))\n        return set(ignored_names)\n    return _ignore_patterns",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import ignore_patterns\n```\n\n```python\n\n\n```\n\n```python\ndef ignore_patterns(*patterns):\n    \"\"\"Function that can be used as copytree() ignore parameter.\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files\"\"\"\n    def _ignore_patterns(path, names):\n        ignored_names = []\n        for pattern in patterns:\n            ignored_names.extend(fnmatch.filter(names, pattern))\n        return set(ignored_names)\n    return _ignore_patterns\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copytree",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n             ignore_dangling_symlinks=False, dirs_exist_ok=False):\n    \"\"\"Recursively copy a directory tree and return the destination directory.\n    dirs_exist_ok dictates whether to raise an exception in case dst or any\n    missing parent directory already exists.\n    If exception(s) occur, an Error is raised with a list of reasons.\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import copytree\n```\n\n```python\n\n\n```\n\n```python\ndef copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n             ignore_dangling_symlinks=False, dirs_exist_ok=False):\n    \"\"\"Recursively copy a directory tree and return the destination directory.\n    dirs_exist_ok dictates whether to raise an exception in case dst or any\n    missing parent directory already exists.\n    If exception(s) occur, an Error is raised with a list of reasons.\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rmtree",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n    \"\"\"\n    sys.audit(\"shutil.rmtree\", path)",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import rmtree\n```\n\n```python\n\n\n```\n\n```python\ndef rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n    \"\"\"\n    sys.audit(\"shutil.rmtree\", path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n    If the destination is on our current filesystem, then rename() is used.",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import move\n```\n\n```python\n\n\n```\n\n```python\ndef move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n    If the destination is on our current filesystem, then rename() is used.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_archive_formats",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def get_archive_formats():\n    \"\"\"Returns a list of supported formats for archiving and unarchiving.\n    Each element of the returned sequence is a tuple (name, description)\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import get_archive_formats\n```\n\n```python\n\n\n```\n\n```python\ndef get_archive_formats():\n    \"\"\"Returns a list of supported formats for archiving and unarchiving.\n    Each element of the returned sequence is a tuple (name, description)\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "register_archive_format",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import register_archive_format\n```\n\n```python\n\n\n```\n\n```python\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unregister_archive_format",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def unregister_archive_format(name):\n    del _ARCHIVE_FORMATS[name]\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import unregister_archive_format\n```\n\n```python\n\n\n```\n\n```python\ndef unregister_archive_format(name):\n    del _ARCHIVE_FORMATS[name]\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "make_archive",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import make_archive\n```\n\n```python\n\n\n```\n\n```python\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_unpack_formats",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def get_unpack_formats():\n    \"\"\"Returns a list of supported formats for unpacking.\n    Each element of the returned sequence is a tuple\n    (name, extensions, description)\n    \"\"\"\n    formats = [(name, info[0], info[3]) for name, info in\n               _UNPACK_FORMATS.items()]\n    formats.sort()\n    return formats\ndef _check_unpack_options(extensions, function, extra_args):",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import get_unpack_formats\n```\n\n```python\n\n\n```\n\n```python\ndef get_unpack_formats():\n    \"\"\"Returns a list of supported formats for unpacking.\n    Each element of the returned sequence is a tuple\n    (name, extensions, description)\n    \"\"\"\n    formats = [(name, info[0], info[3]) for name, info in\n               _UNPACK_FORMATS.items()]\n    formats.sort()\n    return formats\ndef _check_unpack_options(extensions, function, extra_args):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "register_unpack_format",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def register_unpack_format(name, extensions, function, extra_args=None,\n                           description=''):\n    \"\"\"Registers an unpack format.\n    `name` is the name of the format. `extensions` is a list of extensions\n    corresponding to the format.\n    `function` is the callable that will be\n    used to unpack archives. The callable will receive archives to unpack.\n    If it's unable to handle an archive, it needs to raise a ReadError\n    exception.\n    If provided, `extra_args` is a sequence of",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import register_unpack_format\n```\n\n```python\n\n\n```\n\n```python\ndef register_unpack_format(name, extensions, function, extra_args=None,\n                           description=''):\n    \"\"\"Registers an unpack format.\n    `name` is the name of the format. `extensions` is a list of extensions\n    corresponding to the format.\n    `function` is the callable that will be\n    used to unpack archives. The callable will receive archives to unpack.\n    If it's unable to handle an archive, it needs to raise a ReadError\n    exception.\n    If provided, `extra_args` is a sequence of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unregister_unpack_format",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def unregister_unpack_format(name):\n    \"\"\"Removes the pack format from the registry.\"\"\"\n    del _UNPACK_FORMATS[name]\ndef _ensure_directory(path):\n    \"\"\"Ensure that the parent directory of `path` exists\"\"\"\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\ndef _unpack_zipfile(filename, extract_dir):\n    \"\"\"Unpack zip `filename` to `extract_dir`",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import unregister_unpack_format\n```\n\n```python\n\n\n```\n\n```python\ndef unregister_unpack_format(name):\n    \"\"\"Removes the pack format from the registry.\"\"\"\n    del _UNPACK_FORMATS[name]\ndef _ensure_directory(path):\n    \"\"\"Ensure that the parent directory of `path` exists\"\"\"\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\ndef _unpack_zipfile(filename, extract_dir):\n    \"\"\"Unpack zip `filename` to `extract_dir`\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unpack_archive",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def unpack_archive(filename, extract_dir=None, format=None):\n    \"\"\"Unpack an archive.\n    `filename` is the name of the archive.\n    `extract_dir` is the name of the target directory, where the archive\n    is unpacked. If not provided, the current working directory is used.\n    `format` is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar\",\n    or \"xztar\".  Or any other registered format.  If not provided,\n    unpack_archive will use the filename extension and see if an unpacker\n    was registered for that extension.\n    In case none is found, a ValueError is raised.",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import unpack_archive\n```\n\n```python\n\n\n```\n\n```python\ndef unpack_archive(filename, extract_dir=None, format=None):\n    \"\"\"Unpack an archive.\n    `filename` is the name of the archive.\n    `extract_dir` is the name of the target directory, where the archive\n    is unpacked. If not provided, the current working directory is used.\n    `format` is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar\",\n    or \"xztar\".  Or any other registered format.  If not provided,\n    unpack_archive will use the filename extension and see if an unpacker\n    was registered for that extension.\n    In case none is found, a ValueError is raised.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "chown",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def chown(path, user=None, group=None):\n    \"\"\"Change owner user and group of the given path.\n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n    \"\"\"\n    if user is None and group is None:\n        raise ValueError(\"user and/or group must be set\")\n    _user = user\n    _group = group\n    # -1 means don't change it",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import chown\n```\n\n```python\n\n\n```\n\n```python\ndef chown(path, user=None, group=None):\n    \"\"\"Change owner user and group of the given path.\n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n    \"\"\"\n    if user is None and group is None:\n        raise ValueError(\"user and/or group must be set\")\n    _user = user\n    _group = group\n    # -1 means don't change it\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_terminal_size",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def get_terminal_size(fallback=(80, 24)):\n    \"\"\"Get the size of the terminal window.\n    For each of the two dimensions, the environment variable, COLUMNS\n    and LINES respectively, is checked. If the variable is defined and\n    the value is a positive integer, it is used.\n    When COLUMNS or LINES is not defined, which is the common case,\n    the terminal connected to sys.__stdout__ is queried\n    by invoking os.get_terminal_size.\n    If the terminal size cannot be successfully queried, either because\n    the system doesn't support querying, or because we are not",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import get_terminal_size\n```\n\n```python\n\n\n```\n\n```python\ndef get_terminal_size(fallback=(80, 24)):\n    \"\"\"Get the size of the terminal window.\n    For each of the two dimensions, the environment variable, COLUMNS\n    and LINES respectively, is checked. If the variable is defined and\n    the value is a positive integer, it is used.\n    When COLUMNS or LINES is not defined, which is the common case,\n    the terminal connected to sys.__stdout__ is queried\n    by invoking os.get_terminal_size.\n    If the terminal size cannot be successfully queried, either because\n    the system doesn't support querying, or because we are not\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "which",
        "kind": 2,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    \"\"\"Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(\"PATH\"), or can be overridden with a custom search\n    path.\n    \"\"\"\n    # If we're given a path with a directory part, look it up directly rather\n    # than referring to PATH directories. This includes checking relative to the",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import which\n```\n\n```python\n\n\n```\n\n```python\ndef which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    \"\"\"Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(\"PATH\"), or can be overridden with a custom search\n    path.\n    \"\"\"\n    # If we're given a path with a directory part, look it up directly rather\n    # than referring to PATH directories. This includes checking relative to the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_WINDOWS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_WINDOWS = os.name == 'nt'\nposix = nt = None\nif os.name == 'posix':\n    import posix\nelif _WINDOWS:\n    import nt\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _WINDOWS\n```\n\n```python\n\n\n```\n\n```python\n_WINDOWS = os.name == 'nt'\nposix = nt = None\nif os.name == 'posix':\n    import posix\nelif _WINDOWS:\n    import nt\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "posix",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "posix = nt = None\nif os.name == 'posix':\n    import posix\nelif _WINDOWS:\n    import nt\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import posix\n```\n\n```python\n\n\n```\n\n```python\nposix = nt = None\nif os.name == 'posix':\n    import posix\nelif _WINDOWS:\n    import nt\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COPY_BUFSIZE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "COPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import COPY_BUFSIZE\n```\n\n```python\n\n\n```\n\n```python\nCOPY_BUFSIZE = 1024 * 1024 if _WINDOWS else 64 * 1024\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_USE_CP_SENDFILE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _USE_CP_SENDFILE\n```\n\n```python\n\n\n```\n\n```python\n_USE_CP_SENDFILE = hasattr(os, \"sendfile\") and sys.platform.startswith(\"linux\")\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_HAS_FCOPYFILE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _HAS_FCOPYFILE\n```\n\n```python\n\n\n```\n\n```python\n_HAS_FCOPYFILE = posix and hasattr(posix, \"_fcopyfile\")  # macOS\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform\nclass Error(OSError):",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform\nclass Error(OSError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_use_fd_functions",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=\n                     os.supports_dir_fd and\n                     os.scandir in os.supports_fd and\n                     os.stat in os.supports_follow_symlinks)\ndef rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _use_fd_functions\n```\n\n```python\n\n\n```\n\n```python\n_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=\n                     os.supports_dir_fd and\n                     os.scandir in os.supports_fd and\n                     os.stat in os.supports_follow_symlinks)\ndef rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rmtree.avoids_symlink_attacks",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "rmtree.avoids_symlink_attacks = _use_fd_functions\ndef _basename(path):\n    # A basename() variant which first strips the trailing slash, if present.\n    # Thus we always get the last component of the path, even for directories.\n    sep = os.path.sep + (os.path.altsep or '')\n    return os.path.basename(path.rstrip(sep))\ndef move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import rmtree.avoids_symlink_attacks\n```\n\n```python\n\n\n```\n\n```python\nrmtree.avoids_symlink_attacks = _use_fd_functions\ndef _basename(path):\n    # A basename() variant which first strips the trailing slash, if present.\n    # Thus we always get the last component of the path, even for directories.\n    sep = os.path.sep + (os.path.altsep or '')\n    return os.path.basename(path.rstrip(sep))\ndef move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ARCHIVE_FORMATS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_ARCHIVE_FORMATS = {\n    'tar':   (_make_tarball, [('compress', None)], \"uncompressed tar file\"),\n}\nif _ZLIB_SUPPORTED:\n    _ARCHIVE_FORMATS['gztar'] = (_make_tarball, [('compress', 'gzip')],\n                                \"gzip'ed tar-file\")\n    _ARCHIVE_FORMATS['zip'] = (_make_zipfile, [], \"ZIP file\")\nif _BZ2_SUPPORTED:\n    _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],\n                                \"bzip2'ed tar-file\")",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _ARCHIVE_FORMATS\n```\n\n```python\n\n\n```\n\n```python\n_ARCHIVE_FORMATS = {\n    'tar':   (_make_tarball, [('compress', None)], \"uncompressed tar file\"),\n}\nif _ZLIB_SUPPORTED:\n    _ARCHIVE_FORMATS['gztar'] = (_make_tarball, [('compress', 'gzip')],\n                                \"gzip'ed tar-file\")\n    _ARCHIVE_FORMATS['zip'] = (_make_zipfile, [], \"ZIP file\")\nif _BZ2_SUPPORTED:\n    _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],\n                                \"bzip2'ed tar-file\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_UNPACK_FORMATS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.shutil",
        "description": "venv.lib.python3.8.shutil",
        "peekOfCode": "_UNPACK_FORMATS = {\n    'tar':   (['.tar'], _unpack_tarfile, [], \"uncompressed tar file\"),\n    'zip':   (['.zip'], _unpack_zipfile, [], \"ZIP file\"),\n}\nif _ZLIB_SUPPORTED:\n    _UNPACK_FORMATS['gztar'] = (['.tar.gz', '.tgz'], _unpack_tarfile, [],\n                                \"gzip'ed tar-file\")\nif _BZ2_SUPPORTED:\n    _UNPACK_FORMATS['bztar'] = (['.tar.bz2', '.tbz2'], _unpack_tarfile, [],\n                                \"bzip2'ed tar-file\")",
        "detail": "venv.lib.python3.8.shutil",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.shutil import _UNPACK_FORMATS\n```\n\n```python\n\n\n```\n\n```python\n_UNPACK_FORMATS = {\n    'tar':   (['.tar'], _unpack_tarfile, [], \"uncompressed tar file\"),\n    'zip':   (['.zip'], _unpack_zipfile, [], \"ZIP file\"),\n}\nif _ZLIB_SUPPORTED:\n    _UNPACK_FORMATS['gztar'] = (['.tar.gz', '.tgz'], _unpack_tarfile, [],\n                                \"gzip'ed tar-file\")\nif _BZ2_SUPPORTED:\n    _UNPACK_FORMATS['bztar'] = (['.tar.bz2', '.tbz2'], _unpack_tarfile, [],\n                                \"bzip2'ed tar-file\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Printer",
        "kind": 6,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "class _Printer(object):\n    \"\"\"interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.\"\"\"\n    MAXLINES = 23\n    def __init__(self, name, data, files=(), dirs=()):\n        self.__name = name\n        self.__data = data\n        self.__files = files\n        self.__dirs = dirs\n        self.__lines = None",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import _Printer\n```\n\n```python\n\n\n```\n\n```python\nclass _Printer(object):\n    \"\"\"interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.\"\"\"\n    MAXLINES = 23\n    def __init__(self, name, data, files=(), dirs=()):\n        self.__name = name\n        self.__data = data\n        self.__files = files\n        self.__dirs = dirs\n        self.__lines = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Helper",
        "kind": 6,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "class _Helper(object):\n    \"\"\"Define the built-in 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n    \"\"\"\n    def __repr__(self):\n        return \"Type help() for interactive help, \" \"or help(object) for help about object.\"\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\ndef sethelper():",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import _Helper\n```\n\n```python\n\n\n```\n\n```python\nclass _Helper(object):\n    \"\"\"Define the built-in 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n    \"\"\"\n    def __repr__(self):\n        return \"Type help() for interactive help, \" \"or help(object) for help about object.\"\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\ndef sethelper():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "makepath",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import makepath\n```\n\n```python\n\n\n```\n\n```python\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abs__file__",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue\n        m.__file__ = os.path.abspath(f)\ndef removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import abs__file__\n```\n\n```python\n\n\n```\n\n```python\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue\n        m.__file__ = os.path.abspath(f)\ndef removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removeduppaths",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we're running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import removeduppaths\n```\n\n```python\n\n\n```\n\n```python\ndef removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we're running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addbuilddir",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def addbuilddir():\n    \"\"\"Append ./build/lib.<platform> in case we're running in the build dir\n    (especially for Guido :-)\"\"\"\n    from distutils.util import get_platform\n    s = \"build/lib.{}-{}.{}\".format(get_platform(), *sys.version_info)\n    if hasattr(sys, \"gettotalrefcount\"):\n        s += \"-pydebug\"\n    s = os.path.join(os.path.dirname(sys.path[-1]), s)\n    sys.path.append(s)\ndef _init_pathinfo():",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import addbuilddir\n```\n\n```python\n\n\n```\n\n```python\ndef addbuilddir():\n    \"\"\"Append ./build/lib.<platform> in case we're running in the build dir\n    (especially for Guido :-)\"\"\"\n    from distutils.util import get_platform\n    s = \"build/lib.{}-{}.{}\".format(get_platform(), *sys.version_info)\n    if hasattr(sys, \"gettotalrefcount\"):\n        s += \"-pydebug\"\n    s = os.path.join(os.path.dirname(sys.path[-1]), s)\n    sys.path.append(s)\ndef _init_pathinfo():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addpackage",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def addpackage(sitedir, name, known_paths):\n    \"\"\"Add a new path to known_paths by combining sitedir and 'name' or execute\n    sitedir if it starts with 'import'\"\"\"\n    if known_paths is None:\n        _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import addpackage\n```\n\n```python\n\n\n```\n\n```python\ndef addpackage(sitedir, name, known_paths):\n    \"\"\"Add a new path to known_paths by combining sitedir and 'name' or execute\n    sitedir if it starts with 'import'\"\"\"\n    if known_paths is None:\n        _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addsitedir",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def addsitedir(sitedir, known_paths=None):\n    \"\"\"Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'\"\"\"\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import addsitedir\n```\n\n```python\n\n\n```\n\n```python\ndef addsitedir(sitedir, known_paths=None):\n    \"\"\"Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'\"\"\"\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addsitepackages",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):\n    \"\"\"Add site-packages (and possibly site-python) to sys.path\"\"\"\n    prefixes = [os.path.join(sys_prefix, \"local\"), sys_prefix]\n    if exec_prefix != sys_prefix:\n        prefixes.append(os.path.join(exec_prefix, \"local\"))\n    for prefix in prefixes:\n        if prefix:\n            if sys.platform in (\"os2emx\", \"riscos\"):\n                sitedirs = [os.path.join(prefix, \"Lib\", \"site-packages\")]\n            elif _is_pypy:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import addsitepackages\n```\n\n```python\n\n\n```\n\n```python\ndef addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):\n    \"\"\"Add site-packages (and possibly site-python) to sys.path\"\"\"\n    prefixes = [os.path.join(sys_prefix, \"local\"), sys_prefix]\n    if exec_prefix != sys_prefix:\n        prefixes.append(os.path.join(exec_prefix, \"local\"))\n    for prefix in prefixes:\n        if prefix:\n            if sys.platform in (\"os2emx\", \"riscos\"):\n                sitedirs = [os.path.join(prefix, \"Lib\", \"site-packages\")]\n            elif _is_pypy:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "check_enableusersite",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def check_enableusersite():\n    \"\"\"Check if user site directory is safe for inclusion\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    \"\"\"\n    if hasattr(sys, \"flags\") and getattr(sys.flags, \"no_user_site\", False):\n        return False",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import check_enableusersite\n```\n\n```python\n\n\n```\n\n```python\ndef check_enableusersite():\n    \"\"\"Check if user site directory is safe for inclusion\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    \"\"\"\n    if hasattr(sys, \"flags\") and getattr(sys.flags, \"no_user_site\", False):\n        return False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "addusersitepackages",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def addusersitepackages(known_paths):\n    \"\"\"Add a per user site-package to sys.path\n    Each user has its own python directory with site-packages in the\n    home directory.\n    USER_BASE is the root directory for all Python versions\n    USER_SITE is the user specific site-packages directory\n    USER_SITE/.. can be used for data.\n    \"\"\"\n    global USER_BASE, USER_SITE, ENABLE_USER_SITE\n    env_base = os.environ.get(\"PYTHONUSERBASE\", None)",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import addusersitepackages\n```\n\n```python\n\n\n```\n\n```python\ndef addusersitepackages(known_paths):\n    \"\"\"Add a per user site-package to sys.path\n    Each user has its own python directory with site-packages in the\n    home directory.\n    USER_BASE is the root directory for all Python versions\n    USER_SITE is the user specific site-packages directory\n    USER_SITE/.. can be used for data.\n    \"\"\"\n    global USER_BASE, USER_SITE, ENABLE_USER_SITE\n    env_base = os.environ.get(\"PYTHONUSERBASE\", None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setBEGINLIBPATH",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def setBEGINLIBPATH():\n    \"\"\"The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n    \"\"\"\n    dllpath = os.path.join(sys.prefix, \"Lib\", \"lib-dynload\")\n    libpath = os.environ[\"BEGINLIBPATH\"].split(\";\")\n    if libpath[-1]:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import setBEGINLIBPATH\n```\n\n```python\n\n\n```\n\n```python\ndef setBEGINLIBPATH():\n    \"\"\"The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n    \"\"\"\n    dllpath = os.path.join(sys.prefix, \"Lib\", \"lib-dynload\")\n    libpath = os.environ[\"BEGINLIBPATH\"].split(\";\")\n    if libpath[-1]:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setquit",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def setquit():\n    \"\"\"Define new built-ins 'quit' and 'exit'.\n    These are simply strings that display a hint on how to exit.\n    \"\"\"\n    if os.sep == \":\":\n        eof = \"Cmd-Q\"\n    elif os.sep == \"\\\\\":\n        eof = \"Ctrl-Z plus Return\"\n    else:\n        eof = \"Ctrl-D (i.e. EOF)\"",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import setquit\n```\n\n```python\n\n\n```\n\n```python\ndef setquit():\n    \"\"\"Define new built-ins 'quit' and 'exit'.\n    These are simply strings that display a hint on how to exit.\n    \"\"\"\n    if os.sep == \":\":\n        eof = \"Cmd-Q\"\n    elif os.sep == \"\\\\\":\n        eof = \"Ctrl-Z plus Return\"\n    else:\n        eof = \"Ctrl-D (i.e. EOF)\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setcopyright",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def setcopyright():\n    \"\"\"Set 'copyright' and 'credits' in __builtin__\"\"\"\n    builtins.copyright = _Printer(\"copyright\", sys.copyright)\n    if _is_pypy:\n        builtins.credits = _Printer(\"credits\", \"PyPy is maintained by the PyPy developers: http://pypy.org/\")\n    else:\n        builtins.credits = _Printer(\n            \"credits\",\n            \"\"\"\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import setcopyright\n```\n\n```python\n\n\n```\n\n```python\ndef setcopyright():\n    \"\"\"Set 'copyright' and 'credits' in __builtin__\"\"\"\n    builtins.copyright = _Printer(\"copyright\", sys.copyright)\n    if _is_pypy:\n        builtins.credits = _Printer(\"credits\", \"PyPy is maintained by the PyPy developers: http://pypy.org/\")\n    else:\n        builtins.credits = _Printer(\n            \"credits\",\n            \"\"\"\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sethelper",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def sethelper():\n    builtins.help = _Helper()\ndef aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import sethelper\n```\n\n```python\n\n\n```\n\n```python\ndef sethelper():\n    builtins.help = _Helper()\ndef aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "aliasmbcs",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?\n            try:\n                codecs.lookup(enc)",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import aliasmbcs\n```\n\n```python\n\n\n```\n\n```python\ndef aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?\n            try:\n                codecs.lookup(enc)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setencoding",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def setencoding():\n    \"\"\"Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this.\"\"\"\n    encoding = \"ascii\"  # Default value set by _PyUnicode_Init()\n    if 0:\n        # Enable to support locale aware default string encodings.\n        import locale\n        loc = locale.getdefaultlocale()\n        if loc[1]:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import setencoding\n```\n\n```python\n\n\n```\n\n```python\ndef setencoding():\n    \"\"\"Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this.\"\"\"\n    encoding = \"ascii\"  # Default value set by _PyUnicode_Init()\n    if 0:\n        # Enable to support locale aware default string encodings.\n        import locale\n        loc = locale.getdefaultlocale()\n        if loc[1]:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execsitecustomize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def execsitecustomize():\n    \"\"\"Run custom site specific code, if available.\"\"\"\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\ndef virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import execsitecustomize\n```\n\n```python\n\n\n```\n\n```python\ndef execsitecustomize():\n    \"\"\"Run custom site specific code, if available.\"\"\"\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\ndef virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "virtual_install_main_packages",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()\n    pos = 2\n    hardcoded_relative_dirs = []\n    if sys.path[0] == \"\":\n        pos += 1\n    if _is_pypy:\n        if sys.version_info > (3, 2):",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import virtual_install_main_packages\n```\n\n```python\n\n\n```\n\n```python\ndef virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()\n    pos = 2\n    hardcoded_relative_dirs = []\n    if sys.path[0] == \"\":\n        pos += 1\n    if _is_pypy:\n        if sys.version_info > (3, 2):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "force_global_eggs_after_local_site_packages",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def force_global_eggs_after_local_site_packages():\n    \"\"\"\n    Force easy_installed eggs in the global environment to get placed\n    in sys.path after all packages inside the virtualenv.  This\n    maintains the \"least surprise\" result that packages in the\n    virtualenv always mask global packages, never the other way\n    around.\n    \"\"\"\n    egginsert = getattr(sys, \"__egginsert\", 0)\n    for i, path in enumerate(sys.path):",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import force_global_eggs_after_local_site_packages\n```\n\n```python\n\n\n```\n\n```python\ndef force_global_eggs_after_local_site_packages():\n    \"\"\"\n    Force easy_installed eggs in the global environment to get placed\n    in sys.path after all packages inside the virtualenv.  This\n    maintains the \"least surprise\" result that packages in the\n    virtualenv always mask global packages, never the other way\n    around.\n    \"\"\"\n    egginsert = getattr(sys, \"__egginsert\", 0)\n    for i, path in enumerate(sys.path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "virtual_addsitepackages",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def virtual_addsitepackages(known_paths):\n    force_global_eggs_after_local_site_packages()\n    return addsitepackages(known_paths, sys_prefix=sys.real_prefix)\ndef execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import virtual_addsitepackages\n```\n\n```python\n\n\n```\n\n```python\ndef virtual_addsitepackages(known_paths):\n    force_global_eggs_after_local_site_packages()\n    return addsitepackages(known_paths, sys_prefix=sys.real_prefix)\ndef execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execusercustomize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import execusercustomize\n```\n\n```python\n\n\n```\n\n```python\ndef execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "enablerlcompleter",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    \"\"\"\n    def register_readline():\n        import atexit",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import enablerlcompleter\n```\n\n```python\n\n\n```\n\n```python\ndef enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    \"\"\"\n    def register_readline():\n        import atexit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "def main():\n    global ENABLE_USER_SITE\n    virtual_install_main_packages()\n    if _is_pypy:\n        import_builtin_stuff()\n    abs__file__()\n    paths_in_sys = removeduppaths()\n    if os.name == \"posix\" and sys.path and os.path.basename(sys.path[-1]) == \"Modules\":\n        addbuilddir()\n    GLOBAL_SITE_PACKAGES = not os.path.exists(os.path.join(os.path.dirname(__file__), \"no-global-site-packages.txt\"))",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    global ENABLE_USER_SITE\n    virtual_install_main_packages()\n    if _is_pypy:\n        import_builtin_stuff()\n    abs__file__()\n    paths_in_sys = removeduppaths()\n    if os.name == \"posix\" and sys.path and os.path.basename(sys.path[-1]) == \"Modules\":\n        addbuilddir()\n    GLOBAL_SITE_PACKAGES = not os.path.exists(os.path.join(os.path.dirname(__file__), \"no-global-site-packages.txt\"))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PREFIXES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "PREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import PREFIXES\n```\n\n```python\n\n\n```\n\n```python\nPREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ENABLE_USER_SITE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "ENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import ENABLE_USER_SITE\n```\n\n```python\n\n\n```\n\n```python\nENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "USER_SITE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "USER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import USER_SITE\n```\n\n```python\n\n\n```\n\n```python\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "USER_BASE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "USER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import USER_BASE\n```\n\n```python\n\n\n```\n\n```python\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_is_64bit",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import _is_64bit\n```\n\n```python\n\n\n```\n\n```python\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_is_pypy",
        "kind": 5,
        "importPath": "venv.lib.python3.8.site",
        "description": "venv.lib.python3.8.site",
        "peekOfCode": "_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:",
        "detail": "venv.lib.python3.8.site",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.site import _is_pypy\n```\n\n```python\n\n\n```\n\n```python\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "isstring",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "def isstring(obj):\n    return isinstance(obj, (str, bytes))\ndef _code(p, flags):\n    flags = p.state.flags | flags\n    code = []\n    # compile info block\n    _compile_info(code, p, flags)\n    # compile the pattern\n    _compile(code, p.data, flags)\n    code.append(SUCCESS)",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import isstring\n```\n\n```python\n\n\n```\n\n```python\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\ndef _code(p, flags):\n    flags = p.state.flags | flags\n    code = []\n    # compile info block\n    _compile_info(code, p, flags)\n    # compile the pattern\n    _compile(code, p.data, flags)\n    code.append(SUCCESS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dis",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "def dis(code):\n    import sys\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import dis\n```\n\n```python\n\n\n```\n\n```python\ndef dis(code):\n    import sys\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "def compile(p, flags=0):\n    # internal: convert pattern list to internal format\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n    code = _code(p, flags)\n    if flags & SRE_FLAG_DEBUG:\n        print()",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import compile\n```\n\n```python\n\n\n```\n\n```python\ndef compile(p, flags=0):\n    # internal: convert pattern list to internal format\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n    code = _code(p, flags)\n    if flags & SRE_FLAG_DEBUG:\n        print()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LITERAL_CODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _LITERAL_CODES\n```\n\n```python\n\n\n```\n\n```python\n_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_REPEATING_CODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _REPEATING_CODES\n```\n\n```python\n\n\n```\n\n```python\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_SUCCESS_CODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _SUCCESS_CODES\n```\n\n```python\n\n\n```\n\n```python\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ASSERT_CODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _ASSERT_CODES\n```\n\n```python\n\n\n```\n\n```python\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_UNIT_CODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _UNIT_CODES\n```\n\n```python\n\n\n```\n\n```python\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_equivalences",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345ιι\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _equivalences\n```\n\n```python\n\n\n```\n\n```python\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345ιι\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ignorecase_fixes",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _ignorecase_fixes\n```\n\n```python\n\n\n```\n\n```python\n_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_CODEBITS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _CODEBITS\n```\n\n```python\n\n\n```\n\n```python\n_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXCODE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "MAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import MAXCODE\n```\n\n```python\n\n\n```\n\n```python\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_BITS_TRANS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_compile",
        "description": "venv.lib.python3.8.sre_compile",
        "peekOfCode": "_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)",
        "detail": "venv.lib.python3.8.sre_compile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_compile import _BITS_TRANS\n```\n\n```python\n\n\n```\n\n```python\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "error",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "class error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)\n        lineno: The line corresponding to pos (may be None)\n        colno: The column corresponding to pos (may be None)\n    \"\"\"\n    __module__ = 're'",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import error\n```\n\n```python\n\n\n```\n\n```python\nclass error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)\n        lineno: The line corresponding to pos (may be None)\n        colno: The column corresponding to pos (may be None)\n    \"\"\"\n    __module__ = 're'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_NamedIntConstant",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "class _NamedIntConstant(int):\n    def __new__(cls, value, name):\n        self = super(_NamedIntConstant, cls).__new__(cls, value)\n        self.name = name\n        return self\n    def __repr__(self):\n        return self.name\nMAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):\n    names = names.strip().split()",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import _NamedIntConstant\n```\n\n```python\n\n\n```\n\n```python\nclass _NamedIntConstant(int):\n    def __new__(cls, value, name):\n        self = super(_NamedIntConstant, cls).__new__(cls, value)\n        self.name = name\n        return self\n    def __repr__(self):\n        return self.name\nMAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):\n    names = names.strip().split()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAGIC",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "MAGIC = 20171005\nfrom _sre import MAXREPEAT, MAXGROUPS\n# SRE standard exception (access as sre.error)\n# should this really be here?\nclass error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import MAGIC\n```\n\n```python\n\n\n```\n\n```python\nMAGIC = 20171005\nfrom _sre import MAXREPEAT, MAXGROUPS\n# SRE standard exception (access as sre.error)\n# should this really be here?\nclass error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MAXREPEAT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "MAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):\n    names = names.strip().split()\n    items = [_NamedIntConstant(i, name) for i, name in enumerate(names)]\n    globals().update({item.name: item for item in items})\n    return items\n# operators\n# failure=0 success=1 (just because it looks better that way :-)\nOPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import MAXREPEAT\n```\n\n```python\n\n\n```\n\n```python\nMAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):\n    names = names.strip().split()\n    items = [_NamedIntConstant(i, name) for i, name in enumerate(names)]\n    globals().update({item.name: item for item in items})\n    return items\n# operators\n# failure=0 success=1 (just because it looks better that way :-)\nOPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OPCODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "OPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS\n    ANY ANY_ALL\n    ASSERT ASSERT_NOT\n    AT\n    BRANCH\n    CALL\n    CATEGORY\n    CHARSET BIGCHARSET\n    GROUPREF GROUPREF_EXISTS",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import OPCODES\n```\n\n```python\n\n\n```\n\n```python\nOPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS\n    ANY ANY_ALL\n    ASSERT ASSERT_NOT\n    AT\n    BRANCH\n    CALL\n    CATEGORY\n    CHARSET BIGCHARSET\n    GROUPREF GROUPREF_EXISTS\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ATCODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "ATCODES = _makecodes(\"\"\"\n    AT_BEGINNING AT_BEGINNING_LINE AT_BEGINNING_STRING\n    AT_BOUNDARY AT_NON_BOUNDARY\n    AT_END AT_END_LINE AT_END_STRING\n    AT_LOC_BOUNDARY AT_LOC_NON_BOUNDARY\n    AT_UNI_BOUNDARY AT_UNI_NON_BOUNDARY\n\"\"\")\n# categories\nCHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import ATCODES\n```\n\n```python\n\n\n```\n\n```python\nATCODES = _makecodes(\"\"\"\n    AT_BEGINNING AT_BEGINNING_LINE AT_BEGINNING_STRING\n    AT_BOUNDARY AT_NON_BOUNDARY\n    AT_END AT_END_LINE AT_END_STRING\n    AT_LOC_BOUNDARY AT_LOC_NON_BOUNDARY\n    AT_UNI_BOUNDARY AT_UNI_NON_BOUNDARY\n\"\"\")\n# categories\nCHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CHCODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "CHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT\n    CATEGORY_SPACE CATEGORY_NOT_SPACE\n    CATEGORY_WORD CATEGORY_NOT_WORD\n    CATEGORY_LINEBREAK CATEGORY_NOT_LINEBREAK\n    CATEGORY_LOC_WORD CATEGORY_LOC_NOT_WORD\n    CATEGORY_UNI_DIGIT CATEGORY_UNI_NOT_DIGIT\n    CATEGORY_UNI_SPACE CATEGORY_UNI_NOT_SPACE\n    CATEGORY_UNI_WORD CATEGORY_UNI_NOT_WORD\n    CATEGORY_UNI_LINEBREAK CATEGORY_UNI_NOT_LINEBREAK",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import CHCODES\n```\n\n```python\n\n\n```\n\n```python\nCHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT\n    CATEGORY_SPACE CATEGORY_NOT_SPACE\n    CATEGORY_WORD CATEGORY_NOT_WORD\n    CATEGORY_LINEBREAK CATEGORY_NOT_LINEBREAK\n    CATEGORY_LOC_WORD CATEGORY_LOC_NOT_WORD\n    CATEGORY_UNI_DIGIT CATEGORY_UNI_NOT_DIGIT\n    CATEGORY_UNI_SPACE CATEGORY_UNI_NOT_SPACE\n    CATEGORY_UNI_WORD CATEGORY_UNI_NOT_WORD\n    CATEGORY_UNI_LINEBREAK CATEGORY_UNI_NOT_LINEBREAK\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OP_IGNORE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "OP_IGNORE = {\n    LITERAL: LITERAL_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_IGNORE,\n}\nOP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import OP_IGNORE\n```\n\n```python\n\n\n```\n\n```python\nOP_IGNORE = {\n    LITERAL: LITERAL_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_IGNORE,\n}\nOP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OP_LOCALE_IGNORE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "OP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import OP_LOCALE_IGNORE\n```\n\n```python\n\n\n```\n\n```python\nOP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OP_UNICODE_IGNORE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "OP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import OP_UNICODE_IGNORE\n```\n\n```python\n\n\n```\n\n```python\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AT_MULTILINE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "AT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import AT_MULTILINE\n```\n\n```python\n\n\n```\n\n```python\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AT_LOCALE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "AT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import AT_LOCALE\n```\n\n```python\n\n\n```\n\n```python\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AT_UNICODE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "AT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import AT_UNICODE\n```\n\n```python\n\n\n```\n\n```python\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CH_LOCALE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "CH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_LOC_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_NOT_LINEBREAK\n}",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import CH_LOCALE\n```\n\n```python\n\n\n```\n\n```python\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_LOC_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_NOT_LINEBREAK\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CH_UNICODE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "CH_UNICODE = {\n    CATEGORY_DIGIT: CATEGORY_UNI_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_UNI_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_UNI_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_UNI_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_UNI_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_UNI_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_UNI_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_UNI_NOT_LINEBREAK\n}",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import CH_UNICODE\n```\n\n```python\n\n\n```\n\n```python\nCH_UNICODE = {\n    CATEGORY_DIGIT: CATEGORY_UNI_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_UNI_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_UNI_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_UNI_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_UNI_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_UNI_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_UNI_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_UNI_NOT_LINEBREAK\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_TEMPLATE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_TEMPLATE = 1 # template mode (disable backtracking)\nSRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_TEMPLATE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_TEMPLATE = 1 # template mode (disable backtracking)\nSRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_IGNORECASE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_IGNORECASE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_LOCALE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_LOCALE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_MULTILINE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_MULTILINE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_DOTALL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_DOTALL\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_UNICODE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_UNICODE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_VERBOSE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_VERBOSE\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_DEBUG",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_DEBUG\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_FLAG_ASCII",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_FLAG_ASCII\n```\n\n```python\n\n\n```\n\n```python\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_INFO_PREFIX",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_INFO_PREFIX\n```\n\n```python\n\n\n```\n\n```python\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_INFO_LITERAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_INFO_LITERAL\n```\n\n```python\n\n\n```\n\n```python\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SRE_INFO_CHARSET",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_constants",
        "description": "venv.lib.python3.8.sre_constants",
        "peekOfCode": "SRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*\n * Secret Labs' Regular Expression Engine",
        "detail": "venv.lib.python3.8.sre_constants",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_constants import SRE_INFO_CHARSET\n```\n\n```python\n\n\n```\n\n```python\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*\n * Secret Labs' Regular Expression Engine\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Verbose",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "class Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import Verbose\n```\n\n```python\n\n\n```\n\n```python\nclass Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "class State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import State\n```\n\n```python\n\n\n```\n\n```python\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SubPattern",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "class SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, state, data=None):\n        self.state = state\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n    def dump(self, level=0):\n        nl = True",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import SubPattern\n```\n\n```python\n\n\n```\n\n```python\nclass SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, state, data=None):\n        self.state = state\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n    def dump(self, level=0):\n        nl = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tokenizer",
        "kind": 6,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "class Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import Tokenizer\n```\n\n```python\n\n\n```\n\n```python\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fix_flags",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "def fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import fix_flags\n```\n\n```python\n\n\n```\n\n```python\ndef fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "def parse(str, flags=0, state=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n    source = Tokenizer(str)\n    if state is None:\n        state = State()\n    state.flags = flags\n    state.str = str\n    try:\n        p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import parse\n```\n\n```python\n\n\n```\n\n```python\ndef parse(str, flags=0, state=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n    source = Tokenizer(str)\n    if state is None:\n        state = State()\n    state.flags = flags\n    state.str = str\n    try:\n        p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "parse_template",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "def parse_template(source, state):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import parse_template\n```\n\n```python\n\n\n```\n\n```python\ndef parse_template(source, state):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "expand_template",
        "kind": 2,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "def expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import expand_template\n```\n\n```python\n\n\n```\n\n```python\ndef expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SPECIAL_CHARS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "SPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import SPECIAL_CHARS\n```\n\n```python\n\n\n```\n\n```python\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "REPEAT_CHARS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "REPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import REPEAT_CHARS\n```\n\n```python\n\n\n```\n\n```python\nREPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DIGITS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "DIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import DIGITS\n```\n\n```python\n\n\n```\n\n```python\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OCTDIGITS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "OCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import OCTDIGITS\n```\n\n```python\n\n\n```\n\n```python\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "HEXDIGITS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "HEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import HEXDIGITS\n```\n\n```python\n\n\n```\n\n```python\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ASCIILETTERS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "ASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import ASCIILETTERS\n```\n\n```python\n\n\n```\n\n```python\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WHITESPACE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "WHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import WHITESPACE\n```\n\n```python\n\n\n```\n\n```python\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_REPEATCODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import _REPEATCODES\n```\n\n```python\n\n\n```\n\n```python\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_UNITCODES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import _UNITCODES\n```\n\n```python\n\n\n```\n\n```python\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ESCAPES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "ESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import ESCAPES\n```\n\n```python\n\n\n```\n\n```python\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CATEGORIES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "CATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import CATEGORIES\n```\n\n```python\n\n\n```\n\n```python\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "FLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import FLAGS\n```\n\n```python\n\n\n```\n\n```python\nFLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TYPE_FLAGS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "TYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import TYPE_FLAGS\n```\n\n```python\n\n\n```\n\n```python\nTYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GLOBAL_FLAGS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.sre_parse",
        "description": "venv.lib.python3.8.sre_parse",
        "peekOfCode": "GLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None",
        "detail": "venv.lib.python3.8.sre_parse",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.sre_parse import GLOBAL_FLAGS\n```\n\n```python\n\n\n```\n\n```python\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IMODE",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IMODE\n```\n\n```python\n\n\n```\n\n```python\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IFMT",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IFMT\n```\n\n```python\n\n\n```\n\n```python\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISDIR",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISDIR\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISCHR",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISCHR\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISBLK",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISBLK\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISREG",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISREG\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISFIFO",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISFIFO\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISLNK",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISLNK\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISSOCK",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISSOCK\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\ndef S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISDOOR",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISDOOR\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISDOOR(mode):\n    \"\"\"Return True if mode is from a door.\"\"\"\n    return False\ndef S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISPORT",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISPORT\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISPORT(mode):\n    \"\"\"Return True if mode is from an event port.\"\"\"\n    return False\ndef S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISWHT",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISWHT\n```\n\n```python\n\n\n```\n\n```python\ndef S_ISWHT(mode):\n    \"\"\"Return True if mode is from a whiteout.\"\"\"\n    return False\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filemode",
        "kind": 2,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "def filemode(mode):\n    \"\"\"Convert a file's mode to a string of the form '-rwxrwxrwx'.\"\"\"\n    perm = []\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(\"-\")",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import filemode\n```\n\n```python\n\n\n```\n\n```python\ndef filemode(mode):\n    \"\"\"Convert a file's mode to a string of the form '-rwxrwxrwx'.\"\"\"\n    perm = []\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(\"-\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ST_NLINK",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "ST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import ST_NLINK\n```\n\n```python\n\n\n```\n\n```python\nST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ST_ATIME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "ST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import ST_ATIME\n```\n\n```python\n\n\n```\n\n```python\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ST_MTIME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "ST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import ST_MTIME\n```\n\n```python\n\n\n```\n\n```python\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ST_CTIME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "ST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import ST_CTIME\n```\n\n```python\n\n\n```\n\n```python\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IFSOCK",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IFSOCK = 0o140000  # socket file\n# Fallbacks for uncommon platform-specific constants\nS_IFDOOR = 0\nS_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IFSOCK\n```\n\n```python\n\n\n```\n\n```python\nS_IFSOCK = 0o140000  # socket file\n# Fallbacks for uncommon platform-specific constants\nS_IFDOOR = 0\nS_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IFDOOR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IFDOOR = 0\nS_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IFDOOR\n```\n\n```python\n\n\n```\n\n```python\nS_IFDOOR = 0\nS_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IFPORT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IFPORT\n```\n\n```python\n\n\n```\n\n```python\nS_IFPORT = 0\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IFWHT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IFWHT\n```\n\n```python\n\n\n```\n\n```python\nS_IFWHT = 0\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISUID",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISUID\n```\n\n```python\n\n\n```\n\n```python\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISGID",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISGID\n```\n\n```python\n\n\n```\n\n```python\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ENFMT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ENFMT\n```\n\n```python\n\n\n```\n\n```python\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_ISVTX",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_ISVTX\n```\n\n```python\n\n\n```\n\n```python\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IREAD",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IREAD\n```\n\n```python\n\n\n```\n\n```python\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IWRITE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IWRITE\n```\n\n```python\n\n\n```\n\n```python\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IEXEC",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IEXEC\n```\n\n```python\n\n\n```\n\n```python\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IRWXU",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IRWXU\n```\n\n```python\n\n\n```\n\n```python\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IRUSR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IRUSR\n```\n\n```python\n\n\n```\n\n```python\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IWUSR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IWUSR\n```\n\n```python\n\n\n```\n\n```python\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IXUSR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IXUSR\n```\n\n```python\n\n\n```\n\n```python\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IRWXG",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IRWXG\n```\n\n```python\n\n\n```\n\n```python\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IRGRP",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IRGRP\n```\n\n```python\n\n\n```\n\n```python\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IWGRP",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IWGRP\n```\n\n```python\n\n\n```\n\n```python\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IXGRP",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IXGRP\n```\n\n```python\n\n\n```\n\n```python\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IRWXO",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IRWXO\n```\n\n```python\n\n\n```\n\n```python\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IROTH",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IROTH\n```\n\n```python\n\n\n```\n\n```python\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IWOTH",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IWOTH\n```\n\n```python\n\n\n```\n\n```python\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "S_IXOTH",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "S_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import S_IXOTH\n```\n\n```python\n\n\n```\n\n```python\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UF_IMMUTABLE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "UF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import UF_IMMUTABLE\n```\n\n```python\n\n\n```\n\n```python\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UF_COMPRESSED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "UF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import UF_COMPRESSED\n```\n\n```python\n\n\n```\n\n```python\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SF_IMMUTABLE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "SF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import SF_IMMUTABLE\n```\n\n```python\n\n\n```\n\n```python\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_filemode_table",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),\n     (S_IFCHR,         \"c\"),\n     (S_IFIFO,         \"p\")),\n    ((S_IRUSR,         \"r\"),),\n    ((S_IWUSR,         \"w\"),),",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import _filemode_table\n```\n\n```python\n\n\n```\n\n```python\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFSOCK,        \"s\"),  # Must appear before IFREG and IFDIR as IFSOCK == IFREG | IFDIR\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),\n     (S_IFCHR,         \"c\"),\n     (S_IFIFO,         \"p\")),\n    ((S_IRUSR,         \"r\"),),\n    ((S_IWUSR,         \"w\"),),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_ARCHIVE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_ARCHIVE\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_COMPRESSED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_COMPRESSED\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_DEVICE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_DEVICE\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_DIRECTORY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_DIRECTORY\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_ENCRYPTED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_ENCRYPTED\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_HIDDEN",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_HIDDEN\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_INTEGRITY_STREAM",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_INTEGRITY_STREAM\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_NORMAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_NORMAL\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_NO_SCRUB_DATA",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_NO_SCRUB_DATA\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_OFFLINE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_OFFLINE\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_READONLY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_READONLY\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_REPARSE_POINT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_REPARSE_POINT\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_SPARSE_FILE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_SPARSE_FILE\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_SYSTEM",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_SYSTEM\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_TEMPORARY",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_TEMPORARY\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FILE_ATTRIBUTE_VIRTUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.stat",
        "description": "venv.lib.python3.8.stat",
        "peekOfCode": "FILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "venv.lib.python3.8.stat",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.stat import FILE_ATTRIBUTE_VIRTUAL\n```\n\n```python\n\n\n```\n\n```python\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.struct",
        "description": "venv.lib.python3.8.struct",
        "peekOfCode": "__all__ = [\n    # Functions\n    'calcsize', 'pack', 'pack_into', 'unpack', 'unpack_from',\n    'iter_unpack',\n    # Classes\n    'Struct',\n    # Exceptions\n    'error'\n    ]\nfrom _struct import *",
        "detail": "venv.lib.python3.8.struct",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.struct import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    # Functions\n    'calcsize', 'pack', 'pack_into', 'unpack', 'unpack_from',\n    'iter_unpack',\n    # Classes\n    'Struct',\n    # Exceptions\n    'error'\n    ]\nfrom _struct import *\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TarError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class TarError(Exception):\n    \"\"\"Base exception.\"\"\"\n    pass\nclass ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import TarError\n```\n\n```python\n\n\n```\n\n```python\nclass TarError(Exception):\n    \"\"\"Base exception.\"\"\"\n    pass\nclass ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExtractError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import ExtractError\n```\n\n```python\n\n\n```\n\n```python\nclass ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ReadError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import ReadError\n```\n\n```python\n\n\n```\n\n```python\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CompressionError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import CompressionError\n```\n\n```python\n\n\n```\n\n```python\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StreamError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import StreamError\n```\n\n```python\n\n\n```\n\n```python\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "HeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import HeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmptyHeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import EmptyHeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TruncatedHeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import TruncatedHeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EOFHeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import EOFHeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "InvalidHeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import InvalidHeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SubsequentHeaderError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import SubsequentHeaderError\n```\n\n```python\n\n\n```\n\n```python\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LowLevelFile",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    \"\"\"\n    def __init__(self, name, mode):\n        mode = {\n            \"r\": os.O_RDONLY,\n            \"w\": os.O_WRONLY | os.O_CREAT | os.O_TRUNC,\n        }[mode]",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import _LowLevelFile\n```\n\n```python\n\n\n```\n\n```python\nclass _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    \"\"\"\n    def __init__(self, name, mode):\n        mode = {\n            \"r\": os.O_RDONLY,\n            \"w\": os.O_WRONLY | os.O_CREAT | os.O_TRUNC,\n        }[mode]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Stream",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class _Stream:\n    \"\"\"Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n       _Stream is intended to be used only internally.\n    \"\"\"\n    def __init__(self, name, mode, comptype, fileobj, bufsize):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import _Stream\n```\n\n```python\n\n\n```\n\n```python\nclass _Stream:\n    \"\"\"Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n       _Stream is intended to be used only internally.\n    \"\"\"\n    def __init__(self, name, mode, comptype, fileobj, bufsize):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_StreamProxy",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class _StreamProxy(object):\n    \"\"\"Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    \"\"\"\n    def __init__(self, fileobj):\n        self.fileobj = fileobj\n        self.buf = self.fileobj.read(BLOCKSIZE)\n    def read(self, size):\n        self.read = self.fileobj.read\n        return self.buf",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import _StreamProxy\n```\n\n```python\n\n\n```\n\n```python\nclass _StreamProxy(object):\n    \"\"\"Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    \"\"\"\n    def __init__(self, fileobj):\n        self.fileobj = fileobj\n        self.buf = self.fileobj.read(BLOCKSIZE)\n    def read(self, size):\n        self.read = self.fileobj.read\n        return self.buf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_FileInFile",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class _FileInFile(object):\n    \"\"\"A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    \"\"\"\n    def __init__(self, fileobj, offset, size, blockinfo=None):\n        self.fileobj = fileobj\n        self.offset = offset\n        self.size = size\n        self.position = 0",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import _FileInFile\n```\n\n```python\n\n\n```\n\n```python\nclass _FileInFile(object):\n    \"\"\"A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    \"\"\"\n    def __init__(self, fileobj, offset, size, blockinfo=None):\n        self.fileobj = fileobj\n        self.offset = offset\n        self.size = size\n        self.position = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExFileObject",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class ExFileObject(io.BufferedReader):\n    def __init__(self, tarfile, tarinfo):\n        fileobj = _FileInFile(tarfile.fileobj, tarinfo.offset_data,\n                tarinfo.size, tarinfo.sparse)\n        super().__init__(fileobj)\n#class ExFileObject\n#------------------\n# Exported Classes\n#------------------\nclass TarInfo(object):",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import ExFileObject\n```\n\n```python\n\n\n```\n\n```python\nclass ExFileObject(io.BufferedReader):\n    def __init__(self, tarfile, tarinfo):\n        fileobj = _FileInFile(tarfile.fileobj, tarinfo.offset_data,\n                tarinfo.size, tarinfo.sparse)\n        super().__init__(fileobj)\n#class ExFileObject\n#------------------\n# Exported Classes\n#------------------\nclass TarInfo(object):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TarInfo",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class TarInfo(object):\n    \"\"\"Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    \"\"\"\n    __slots__ = dict(\n        name = 'Name of the archive member.',\n        mode = 'Permission bits.',",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import TarInfo\n```\n\n```python\n\n\n```\n\n```python\nclass TarInfo(object):\n    \"\"\"Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    \"\"\"\n    __slots__ = dict(\n        name = 'Name of the archive member.',\n        mode = 'Permission bits.',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TarFile",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "class TarFile(object):\n    \"\"\"The TarFile Class provides an interface to tar archives.\n    \"\"\"\n    debug = 0                   # May be set from 0 (no msgs) to 3 (all msgs)\n    dereference = False         # If true, add content of linked file to the\n                                # tar file, else the link.\n    ignore_zeros = False        # If true, skips empty or invalid blocks and\n                                # continues processing.\n    errorlevel = 1              # If 0, fatal errors only appear in debug\n                                # messages (if debug >= 0). If > 0, errors",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import TarFile\n```\n\n```python\n\n\n```\n\n```python\nclass TarFile(object):\n    \"\"\"The TarFile Class provides an interface to tar archives.\n    \"\"\"\n    debug = 0                   # May be set from 0 (no msgs) to 3 (all msgs)\n    dereference = False         # If true, add content of linked file to the\n                                # tar file, else the link.\n    ignore_zeros = False        # If true, skips empty or invalid blocks and\n                                # continues processing.\n    errorlevel = 1              # If 0, fatal errors only appear in debug\n                                # messages (if debug >= 0). If > 0, errors\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "stn",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def stn(s, length, encoding, errors):\n    \"\"\"Convert a string to a null-terminated bytes object.\n    \"\"\"\n    s = s.encode(encoding, errors)\n    return s[:length] + (length - len(s)) * NUL\ndef nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import stn\n```\n\n```python\n\n\n```\n\n```python\ndef stn(s, length, encoding, errors):\n    \"\"\"Convert a string to a null-terminated bytes object.\n    \"\"\"\n    s = s.encode(encoding, errors)\n    return s[:length] + (length - len(s)) * NUL\ndef nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nts",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:\n        s = s[:p]\n    return s.decode(encoding, errors)\ndef nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import nts\n```\n\n```python\n\n\n```\n\n```python\ndef nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:\n        s = s[:p]\n    return s.decode(encoding, errors)\ndef nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nti",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"\n    # There are two possible encodings for a number field, see\n    # itn() below.\n    if s[0] in (0o200, 0o377):\n        n = 0\n        for i in range(len(s) - 1):\n            n <<= 8\n            n += s[i + 1]",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import nti\n```\n\n```python\n\n\n```\n\n```python\ndef nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"\n    # There are two possible encodings for a number field, see\n    # itn() below.\n    if s[0] in (0o200, 0o377):\n        n = 0\n        for i in range(len(s) - 1):\n            n <<= 8\n            n += s[i + 1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "itn",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def itn(n, digits=8, format=DEFAULT_FORMAT):\n    \"\"\"Convert a python number to a number field.\n    \"\"\"\n    # POSIX 1003.1-1988 requires numbers to be encoded as a string of\n    # octal digits followed by a null-byte, this allows values up to\n    # (8**(digits-1))-1. GNU tar allows storing numbers greater than\n    # that if necessary. A leading 0o200 or 0o377 byte indicate this\n    # particular encoding, the following digits-1 bytes are a big-endian\n    # base-256 representation. This allows values up to (256**(digits-1))-1.\n    # A 0o200 byte indicates a positive number, a 0o377 byte a negative",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import itn\n```\n\n```python\n\n\n```\n\n```python\ndef itn(n, digits=8, format=DEFAULT_FORMAT):\n    \"\"\"Convert a python number to a number field.\n    \"\"\"\n    # POSIX 1003.1-1988 requires numbers to be encoded as a string of\n    # octal digits followed by a null-byte, this allows values up to\n    # (8**(digits-1))-1. GNU tar allows storing numbers greater than\n    # that if necessary. A leading 0o200 or 0o377 byte indicate this\n    # particular encoding, the following digits-1 bytes are a big-endian\n    # base-256 representation. This allows values up to (256**(digits-1))-1.\n    # A 0o200 byte indicates a positive number, a 0o377 byte a negative\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "calc_chksums",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def calc_chksums(buf):\n    \"\"\"Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    \"\"\"\n    unsigned_chksum = 256 + sum(struct.unpack_from(\"148B8x356B\", buf))",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import calc_chksums\n```\n\n```python\n\n\n```\n\n```python\ndef calc_chksums(buf):\n    \"\"\"Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    \"\"\"\n    unsigned_chksum = 256 + sum(struct.unpack_from(\"148B8x356B\", buf))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyfileobj",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def copyfileobj(src, dst, length=None, exception=OSError, bufsize=None):\n    \"\"\"Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    \"\"\"\n    bufsize = bufsize or 16 * 1024\n    if length == 0:\n        return\n    if length is None:\n        shutil.copyfileobj(src, dst, bufsize)\n        return",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import copyfileobj\n```\n\n```python\n\n\n```\n\n```python\ndef copyfileobj(src, dst, length=None, exception=OSError, bufsize=None):\n    \"\"\"Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    \"\"\"\n    bufsize = bufsize or 16 * 1024\n    if length == 0:\n        return\n    if length is None:\n        shutil.copyfileobj(src, dst, bufsize)\n        return\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "is_tarfile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def is_tarfile(name):\n    \"\"\"Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    \"\"\"\n    try:\n        t = open(name)\n        t.close()\n        return True\n    except TarError:\n        return False",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import is_tarfile\n```\n\n```python\n\n\n```\n\n```python\ndef is_tarfile(name):\n    \"\"\"Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    \"\"\"\n    try:\n        t = open(name)\n        t.close()\n        return True\n    except TarError:\n        return False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "def main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')\n    group.add_argument('-e', '--extract', nargs='+',",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')\n    group.add_argument('-e', '--extract', nargs='+',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "__credits__ = \"Gustavo Niemeyer, Niels Gust\\u00e4bel, Richard Townsend.\"\n#---------\n# Imports\n#---------\nfrom builtins import open as bltn_open\nimport sys\nimport os\nimport io\nimport shutil\nimport stat",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import __credits__\n```\n\n```python\n\n\n```\n\n```python\n__credits__ = \"Gustavo Niemeyer, Niels Gust\\u00e4bel, Richard Townsend.\"\n#---------\n# Imports\n#---------\nfrom builtins import open as bltn_open\nimport sys\nimport os\nimport io\nimport shutil\nimport stat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "symlink_exception",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "symlink_exception = (AttributeError, NotImplementedError)\ntry:\n    # OSError (winerror=1314) will be raised if the caller does not hold the\n    # SeCreateSymbolicLinkPrivilege privilege\n    symlink_exception += (OSError,)\nexcept NameError:\n    pass\n# from tarfile import *\n__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import symlink_exception\n```\n\n```python\n\n\n```\n\n```python\nsymlink_exception = (AttributeError, NotImplementedError)\ntry:\n    # OSError (winerror=1314) will be raised if the caller does not hold the\n    # SeCreateSymbolicLinkPrivilege privilege\n    symlink_exception += (OSError,)\nexcept NameError:\n    pass\n# from tarfile import *\n__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",\n           \"ENCODING\", \"USTAR_FORMAT\", \"GNU_FORMAT\", \"PAX_FORMAT\",\n           \"DEFAULT_FORMAT\", \"open\"]\n#---------------------------------------------------------\n# tar constants\n#---------------------------------------------------------\nNUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",\n           \"ENCODING\", \"USTAR_FORMAT\", \"GNU_FORMAT\", \"PAX_FORMAT\",\n           \"DEFAULT_FORMAT\", \"open\"]\n#---------------------------------------------------------\n# tar constants\n#---------------------------------------------------------\nNUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NUL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "NUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import NUL\n```\n\n```python\n\n\n```\n\n```python\nNUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BLOCKSIZE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "BLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import BLOCKSIZE\n```\n\n```python\n\n\n```\n\n```python\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RECORDSIZE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "RECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import RECORDSIZE\n```\n\n```python\n\n\n```\n\n```python\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNU_MAGIC",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNU_MAGIC\n```\n\n```python\n\n\n```\n\n```python\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "POSIX_MAGIC",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "POSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import POSIX_MAGIC\n```\n\n```python\n\n\n```\n\n```python\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LENGTH_NAME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "LENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import LENGTH_NAME\n```\n\n```python\n\n\n```\n\n```python\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LENGTH_LINK",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "LENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import LENGTH_LINK\n```\n\n```python\n\n\n```\n\n```python\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LENGTH_PREFIX",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "LENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import LENGTH_PREFIX\n```\n\n```python\n\n\n```\n\n```python\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "REGTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "REGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import REGTYPE\n```\n\n```python\n\n\n```\n\n```python\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AREGTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "AREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import AREGTYPE\n```\n\n```python\n\n\n```\n\n```python\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LNKTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "LNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import LNKTYPE\n```\n\n```python\n\n\n```\n\n```python\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SYMTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "SYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import SYMTYPE\n```\n\n```python\n\n\n```\n\n```python\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CHRTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "CHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import CHRTYPE\n```\n\n```python\n\n\n```\n\n```python\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BLKTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "BLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import BLKTYPE\n```\n\n```python\n\n\n```\n\n```python\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DIRTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "DIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import DIRTYPE\n```\n\n```python\n\n\n```\n\n```python\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FIFOTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "FIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import FIFOTYPE\n```\n\n```python\n\n\n```\n\n```python\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CONTTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "CONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import CONTTYPE\n```\n\n```python\n\n\n```\n\n```python\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNUTYPE_LONGNAME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNUTYPE_LONGNAME\n```\n\n```python\n\n\n```\n\n```python\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNUTYPE_LONGLINK",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNUTYPE_LONGLINK\n```\n\n```python\n\n\n```\n\n```python\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNUTYPE_SPARSE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNUTYPE_SPARSE\n```\n\n```python\n\n\n```\n\n```python\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XHDTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "XHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import XHDTYPE\n```\n\n```python\n\n\n```\n\n```python\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XGLTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "XGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import XGLTYPE\n```\n\n```python\n\n\n```\n\n```python\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SOLARIS_XHDTYPE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "SOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import SOLARIS_XHDTYPE\n```\n\n```python\n\n\n```\n\n```python\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "USTAR_FORMAT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "USTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import USTAR_FORMAT\n```\n\n```python\n\n\n```\n\n```python\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNU_FORMAT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNU_FORMAT\n```\n\n```python\n\n\n```\n\n```python\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PAX_FORMAT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "PAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import PAX_FORMAT\n```\n\n```python\n\n\n```\n\n```python\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEFAULT_FORMAT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "DEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import DEFAULT_FORMAT\n```\n\n```python\n\n\n```\n\n```python\nDEFAULT_FORMAT = PAX_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SUPPORTED_TYPES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "SUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)\n# File types that will be treated as a regular file.\nREGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import SUPPORTED_TYPES\n```\n\n```python\n\n\n```\n\n```python\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)\n# File types that will be treated as a regular file.\nREGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "REGULAR_TYPES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "REGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import REGULAR_TYPES\n```\n\n```python\n\n\n```\n\n```python\nREGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GNU_TYPES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "GNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import GNU_TYPES\n```\n\n```python\n\n\n```\n\n```python\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PAX_FIELDS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "PAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import PAX_FIELDS\n```\n\n```python\n\n\n```\n\n```python\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PAX_NAME_FIELDS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "PAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import PAX_NAME_FIELDS\n```\n\n```python\n\n\n```\n\n```python\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PAX_NUMBER_FIELDS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "PAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int\n}\n#---------------------------------------------------------\n# initialization",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import PAX_NUMBER_FIELDS\n```\n\n```python\n\n\n```\n\n```python\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int\n}\n#---------------------------------------------------------\n# initialization\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tarfile",
        "description": "venv.lib.python3.8.tarfile",
        "peekOfCode": "open = TarFile.open\ndef main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')",
        "detail": "venv.lib.python3.8.tarfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tarfile import open\n```\n\n```python\n\n\n```\n\n```python\nopen = TarFile.open\ndef main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_RandomNameSequence",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "class _RandomNameSequence:\n    \"\"\"An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is eight characters long.  Multiple\n    threads can safely use the same instance at the same time.\n    _RandomNameSequence is an iterator.\"\"\"\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n    @property\n    def rng(self):\n        cur_pid = _os.getpid()",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _RandomNameSequence\n```\n\n```python\n\n\n```\n\n```python\nclass _RandomNameSequence:\n    \"\"\"An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is eight characters long.  Multiple\n    threads can safely use the same instance at the same time.\n    _RandomNameSequence is an iterator.\"\"\"\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n    @property\n    def rng(self):\n        cur_pid = _os.getpid()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_TemporaryFileCloser",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "class _TemporaryFileCloser:\n    \"\"\"A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.\"\"\"\n    file = None  # Set here since __del__ checks it\n    close_called = False\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _TemporaryFileCloser\n```\n\n```python\n\n\n```\n\n```python\nclass _TemporaryFileCloser:\n    \"\"\"A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.\"\"\"\n    file = None  # Set here since __del__ checks it\n    close_called = False\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_TemporaryFileWrapper",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "class _TemporaryFileWrapper:\n    \"\"\"Temporary file wrapper\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    \"\"\"\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _TemporaryFileWrapper\n```\n\n```python\n\n\n```\n\n```python\nclass _TemporaryFileWrapper:\n    \"\"\"Temporary file wrapper\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    \"\"\"\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SpooledTemporaryFile",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "class SpooledTemporaryFile:\n    \"\"\"Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    \"\"\"\n    _rolled = False\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\n                 encoding=None, newline=None,\n                 suffix=None, prefix=None, dir=None, *, errors=None):\n        if 'b' in mode:",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import SpooledTemporaryFile\n```\n\n```python\n\n\n```\n\n```python\nclass SpooledTemporaryFile:\n    \"\"\"Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    \"\"\"\n    _rolled = False\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\n                 encoding=None, newline=None,\n                 suffix=None, prefix=None, dir=None, *, errors=None):\n        if 'b' in mode:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TemporaryDirectory",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "class TemporaryDirectory(object):\n    \"\"\"Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n        with TemporaryDirectory() as tmpdir:\n            ...\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    \"\"\"\n    def __init__(self, suffix=None, prefix=None, dir=None):",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import TemporaryDirectory\n```\n\n```python\n\n\n```\n\n```python\nclass TemporaryDirectory(object):\n    \"\"\"Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n        with TemporaryDirectory() as tmpdir:\n            ...\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    \"\"\"\n    def __init__(self, suffix=None, prefix=None, dir=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gettempprefix",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def gettempprefix():\n    \"\"\"The default prefix for temporary directories.\"\"\"\n    return template\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import gettempprefix\n```\n\n```python\n\n\n```\n\n```python\ndef gettempprefix():\n    \"\"\"The default prefix for temporary directories.\"\"\"\n    return template\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gettempprefixb",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import gettempprefixb\n```\n\n```python\n\n\n```\n\n```python\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gettempdir",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n            _once_lock.release()",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import gettempdir\n```\n\n```python\n\n\n```\n\n```python\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n            _once_lock.release()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gettempdirb",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def gettempdirb():\n    \"\"\"A bytes version of tempfile.gettempdir().\"\"\"\n    return _os.fsencode(gettempdir())\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import gettempdirb\n```\n\n```python\n\n\n```\n\n```python\ndef gettempdirb():\n    \"\"\"A bytes version of tempfile.gettempdir().\"\"\"\n    return _os.fsencode(gettempdir())\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mkstemp",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n    If 'dir' is not None, the file will be created in that directory,\n    otherwise a default directory is used.",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import mkstemp\n```\n\n```python\n\n\n```\n\n```python\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n    If 'dir' is not None, the file will be created in that directory,\n    otherwise a default directory is used.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mkdtemp",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def mkdtemp(suffix=None, prefix=None, dir=None):\n    \"\"\"User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n    The directory is readable, writable, and searchable only by the\n    creating user.\n    Caller is responsible for deleting the directory when done with it.\n    \"\"\"\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import mkdtemp\n```\n\n```python\n\n\n```\n\n```python\ndef mkdtemp(suffix=None, prefix=None, dir=None):\n    \"\"\"User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n    The directory is readable, writable, and searchable only by the\n    creating user.\n    Caller is responsible for deleting the directory when done with it.\n    \"\"\"\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mktemp",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def mktemp(suffix=\"\", prefix=template, dir=None):\n    \"\"\"User-callable function to return a unique temporary file name.  The\n    file is not created.\n    Arguments are similar to mkstemp, except that the 'text' argument is\n    not accepted, and suffix=None, prefix=None and bytes file names are not\n    supported.\n    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may\n    refer to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import mktemp\n```\n\n```python\n\n\n```\n\n```python\ndef mktemp(suffix=\"\", prefix=template, dir=None):\n    \"\"\"User-callable function to return a unique temporary file name.  The\n    file is not created.\n    Arguments are similar to mkstemp, except that the 'text' argument is\n    not accepted, and suffix=None, prefix=None and bytes file names are not\n    supported.\n    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may\n    refer to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NamedTemporaryFile",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "def NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                       newline=None, suffix=None, prefix=None,\n                       dir=None, delete=True, *, errors=None):\n    \"\"\"Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import NamedTemporaryFile\n```\n\n```python\n\n\n```\n\n```python\ndef NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                       newline=None, suffix=None, prefix=None,\n                       dir=None, delete=True, *, errors=None):\n    \"\"\"Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "__all__ = [\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\n    \"mktemp\",                              # deprecated unsafe interface\n    \"TMP_MAX\", \"gettempprefix\",            # constants\n    \"tempdir\", \"gettempdir\",\n    \"gettempprefixb\", \"gettempdirb\",\n   ]\n# Imports.",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\n    \"mktemp\",                              # deprecated unsafe interface\n    \"TMP_MAX\", \"gettempprefix\",            # constants\n    \"tempdir\", \"gettempdir\",\n    \"gettempprefixb\", \"gettempdirb\",\n   ]\n# Imports.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_allocate_lock",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "_allocate_lock = _thread.allocate_lock\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _allocate_lock\n```\n\n```python\n\n\n```\n\n```python\n_allocate_lock = _thread.allocate_lock\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_text_openflags",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _text_openflags\n```\n\n```python\n\n\n```\n\n```python\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_bin_openflags",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n# This variable _was_ unused for legacy reasons, see issue 10354.\n# But as of 3.5 we actually use it at runtime so changing it would\n# have a possibly desirable side effect...  But we do not want to support",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _bin_openflags\n```\n\n```python\n\n\n```\n\n```python\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n# This variable _was_ unused for legacy reasons, see issue 10354.\n# But as of 3.5 we actually use it at runtime so changing it would\n# have a possibly desirable side effect...  But we do not want to support\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "template = \"tmp\"\n# Internal routines.\n_once_lock = _allocate_lock()\ndef _exists(fn):\n    try:\n        _os.lstat(fn)\n    except OSError:\n        return False\n    else:\n        return True",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import template\n```\n\n```python\n\n\n```\n\n```python\ntemplate = \"tmp\"\n# Internal routines.\n_once_lock = _allocate_lock()\ndef _exists(fn):\n    try:\n        _os.lstat(fn)\n    except OSError:\n        return False\n    else:\n        return True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_once_lock",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "_once_lock = _allocate_lock()\ndef _exists(fn):\n    try:\n        _os.lstat(fn)\n    except OSError:\n        return False\n    else:\n        return True\ndef _infer_return_type(*args):\n    \"\"\"Look at the type of all args and divine their implied return type.\"\"\"",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _once_lock\n```\n\n```python\n\n\n```\n\n```python\n_once_lock = _allocate_lock()\ndef _exists(fn):\n    try:\n        _os.lstat(fn)\n    except OSError:\n        return False\n    else:\n        return True\ndef _infer_return_type(*args):\n    \"\"\"Look at the type of all args and divine their implied return type.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_name_sequence",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "_name_sequence = None\ndef _get_candidate_names():\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n    global _name_sequence\n    if _name_sequence is None:\n        _once_lock.acquire()\n        try:\n            if _name_sequence is None:\n                _name_sequence = _RandomNameSequence()\n        finally:",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import _name_sequence\n```\n\n```python\n\n\n```\n\n```python\n_name_sequence = None\ndef _get_candidate_names():\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n    global _name_sequence\n    if _name_sequence is None:\n        _once_lock.acquire()\n        try:\n            if _name_sequence is None:\n                _name_sequence = _RandomNameSequence()\n        finally:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tempdir",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tempfile",
        "description": "venv.lib.python3.8.tempfile",
        "peekOfCode": "tempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:",
        "detail": "venv.lib.python3.8.tempfile",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tempfile import tempdir\n```\n\n```python\n\n\n```\n\n```python\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ISTERMINAL",
        "kind": 2,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "def ISTERMINAL(x):\n    return x < NT_OFFSET\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ISTERMINAL\n```\n\n```python\n\n\n```\n\n```python\ndef ISTERMINAL(x):\n    return x < NT_OFFSET\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ISNONTERMINAL",
        "kind": 2,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "def ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ISNONTERMINAL\n```\n\n```python\n\n\n```\n\n```python\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ISEOF",
        "kind": 2,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "def ISEOF(x):\n    return x == ENDMARKER",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ISEOF\n```\n\n```python\n\n\n```\n\n```python\ndef ISEOF(x):\n    return x == ENDMARKER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\nENDMARKER = 0\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\nENDMARKER = 0\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ENDMARKER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ENDMARKER = 0\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ENDMARKER\n```\n\n```python\n\n\n```\n\n```python\nENDMARKER = 0\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NAME\n```\n\n```python\n\n\n```\n\n```python\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NUMBER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NUMBER\n```\n\n```python\n\n\n```\n\n```python\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STRING",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "STRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import STRING\n```\n\n```python\n\n\n```\n\n```python\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NEWLINE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NEWLINE\n```\n\n```python\n\n\n```\n\n```python\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "INDENT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "INDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import INDENT\n```\n\n```python\n\n\n```\n\n```python\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEDENT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DEDENT\n```\n\n```python\n\n\n```\n\n```python\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LPAR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LPAR\n```\n\n```python\n\n\n```\n\n```python\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RPAR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RPAR\n```\n\n```python\n\n\n```\n\n```python\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LSQB",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LSQB\n```\n\n```python\n\n\n```\n\n```python\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RSQB",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RSQB\n```\n\n```python\n\n\n```\n\n```python\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COLON",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "COLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import COLON\n```\n\n```python\n\n\n```\n\n```python\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COMMA",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "COMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import COMMA\n```\n\n```python\n\n\n```\n\n```python\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEMI",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "SEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import SEMI\n```\n\n```python\n\n\n```\n\n```python\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PLUS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "PLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import PLUS\n```\n\n```python\n\n\n```\n\n```python\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MINUS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "MINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import MINUS\n```\n\n```python\n\n\n```\n\n```python\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STAR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "STAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import STAR\n```\n\n```python\n\n\n```\n\n```python\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SLASH",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "SLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import SLASH\n```\n\n```python\n\n\n```\n\n```python\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VBAR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "VBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import VBAR\n```\n\n```python\n\n\n```\n\n```python\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AMPER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "AMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import AMPER\n```\n\n```python\n\n\n```\n\n```python\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LESS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LESS\n```\n\n```python\n\n\n```\n\n```python\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GREATER",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "GREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import GREATER\n```\n\n```python\n\n\n```\n\n```python\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "EQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import EQUAL\n```\n\n```python\n\n\n```\n\n```python\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DOT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DOT\n```\n\n```python\n\n\n```\n\n```python\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PERCENT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "PERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import PERCENT\n```\n\n```python\n\n\n```\n\n```python\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LBRACE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LBRACE\n```\n\n```python\n\n\n```\n\n```python\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RBRACE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RBRACE\n```\n\n```python\n\n\n```\n\n```python\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EQEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "EQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import EQEQUAL\n```\n\n```python\n\n\n```\n\n```python\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NOTEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NOTEQUAL\n```\n\n```python\n\n\n```\n\n```python\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LESSEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LESSEQUAL\n```\n\n```python\n\n\n```\n\n```python\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GREATEREQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "GREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import GREATEREQUAL\n```\n\n```python\n\n\n```\n\n```python\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TILDE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "TILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import TILDE\n```\n\n```python\n\n\n```\n\n```python\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CIRCUMFLEX",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "CIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import CIRCUMFLEX\n```\n\n```python\n\n\n```\n\n```python\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LEFTSHIFT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LEFTSHIFT\n```\n\n```python\n\n\n```\n\n```python\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RIGHTSHIFT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RIGHTSHIFT\n```\n\n```python\n\n\n```\n\n```python\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DOUBLESTAR",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DOUBLESTAR\n```\n\n```python\n\n\n```\n\n```python\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PLUSEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "PLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import PLUSEQUAL\n```\n\n```python\n\n\n```\n\n```python\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MINEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "MINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import MINEQUAL\n```\n\n```python\n\n\n```\n\n```python\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STAREQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "STAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import STAREQUAL\n```\n\n```python\n\n\n```\n\n```python\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SLASHEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "SLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import SLASHEQUAL\n```\n\n```python\n\n\n```\n\n```python\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PERCENTEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "PERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import PERCENTEQUAL\n```\n\n```python\n\n\n```\n\n```python\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AMPEREQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "AMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import AMPEREQUAL\n```\n\n```python\n\n\n```\n\n```python\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VBAREQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "VBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import VBAREQUAL\n```\n\n```python\n\n\n```\n\n```python\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CIRCUMFLEXEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "CIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import CIRCUMFLEXEQUAL\n```\n\n```python\n\n\n```\n\n```python\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LEFTSHIFTEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "LEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import LEFTSHIFTEQUAL\n```\n\n```python\n\n\n```\n\n```python\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RIGHTSHIFTEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RIGHTSHIFTEQUAL\n```\n\n```python\n\n\n```\n\n```python\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DOUBLESTAREQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DOUBLESTAREQUAL\n```\n\n```python\n\n\n```\n\n```python\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DOUBLESLASH",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DOUBLESLASH\n```\n\n```python\n\n\n```\n\n```python\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DOUBLESLASHEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "DOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import DOUBLESLASHEQUAL\n```\n\n```python\n\n\n```\n\n```python\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "AT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import AT\n```\n\n```python\n\n\n```\n\n```python\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ATEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ATEQUAL\n```\n\n```python\n\n\n```\n\n```python\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RARROW",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "RARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import RARROW\n```\n\n```python\n\n\n```\n\n```python\nRARROW = 51\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ELLIPSIS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ELLIPSIS\n```\n\n```python\n\n\n```\n\n```python\nELLIPSIS = 52\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COLONEQUAL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "COLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import COLONEQUAL\n```\n\n```python\n\n\n```\n\n```python\nCOLONEQUAL = 53\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OP",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "OP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import OP\n```\n\n```python\n\n\n```\n\n```python\nOP = 54\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AWAIT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "AWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import AWAIT\n```\n\n```python\n\n\n```\n\n```python\nAWAIT = 55\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ASYNC",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ASYNC\n```\n\n```python\n\n\n```\n\n```python\nASYNC = 56\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TYPE_IGNORE",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "TYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import TYPE_IGNORE\n```\n\n```python\n\n\n```\n\n```python\nTYPE_IGNORE = 57\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TYPE_COMMENT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "TYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import TYPE_COMMENT\n```\n\n```python\n\n\n```\n\n```python\nTYPE_COMMENT = 58\n# These aren't used by the C tokenizer but are needed for tokenize.py\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ERRORTOKEN",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ERRORTOKEN\n```\n\n```python\n\n\n```\n\n```python\nERRORTOKEN = 59\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COMMENT",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "COMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import COMMENT\n```\n\n```python\n\n\n```\n\n```python\nCOMMENT = 60\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NL",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NL\n```\n\n```python\n\n\n```\n\n```python\nNL = 61\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ENCODING",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "ENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import ENCODING\n```\n\n```python\n\n\n```\n\n```python\nENCODING = 62\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "N_TOKENS",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "N_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import N_TOKENS\n```\n\n```python\n\n\n```\n\n```python\nN_TOKENS = 63\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NT_OFFSET",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "NT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import NT_OFFSET\n```\n\n```python\n\n\n```\n\n```python\nNT_OFFSET = 256\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tok_name",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "tok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,\n    '&=': AMPEREQUAL,",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import tok_name\n```\n\n```python\n\n\n```\n\n```python\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,\n    '&=': AMPEREQUAL,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EXACT_TOKEN_TYPES",
        "kind": 5,
        "importPath": "venv.lib.python3.8.token",
        "description": "venv.lib.python3.8.token",
        "peekOfCode": "EXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,\n    '&=': AMPEREQUAL,\n    '(': LPAR,\n    ')': RPAR,\n    '*': STAR,\n    '**': DOUBLESTAR,",
        "detail": "venv.lib.python3.8.token",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.token import EXACT_TOKEN_TYPES\n```\n\n```python\n\n\n```\n\n```python\nEXACT_TOKEN_TYPES = {\n    '!=': NOTEQUAL,\n    '%': PERCENT,\n    '%=': PERCENTEQUAL,\n    '&': AMPER,\n    '&=': AMPEREQUAL,\n    '(': LPAR,\n    ')': RPAR,\n    '*': STAR,\n    '**': DOUBLESTAR,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TokenInfo",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):\n        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n            return EXACT_TOKEN_TYPES[self.string]\n        else:",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import TokenInfo\n```\n\n```python\n\n\n```\n\n```python\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):\n        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n            return EXACT_TOKEN_TYPES[self.string]\n        else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TokenError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "class TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import TokenError\n```\n\n```python\n\n\n```\n\n```python\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StopTokenizing",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "class StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import StopTokenizing\n```\n\n```python\n\n\n```\n\n```python\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Untokenizer",
        "kind": 6,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "class Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Untokenizer\n```\n\n```python\n\n\n```\n\n```python\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "group",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def group(*choices): return '(' + '|'.join(choices) + ')'\ndef any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import group\n```\n\n```python\n\n\n```\n\n```python\ndef group(*choices): return '(' + '|'.join(choices) + ')'\ndef any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "any",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import any\n```\n\n```python\n\n\n```\n\n```python\ndef any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "maybe",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import maybe\n```\n\n```python\n\n\n```\n\n```python\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "untokenize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def untokenize(iterable):\n    \"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n    Round-trip invariant for limited input:",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import untokenize\n```\n\n```python\n\n\n```\n\n```python\ndef untokenize(iterable):\n    \"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n    Round-trip invariant for limited input:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "detect_encoding",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def detect_encoding(readline):\n    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import detect_encoding\n```\n\n```python\n\n\n```\n\n```python\ndef detect_encoding(readline):\n    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def open(filename):\n    \"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"\n    buffer = _builtin_open(filename, 'rb')\n    try:\n        encoding, lines = detect_encoding(buffer.readline)\n        buffer.seek(0)\n        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n        text.mode = 'r'",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import open\n```\n\n```python\n\n\n```\n\n```python\ndef open(filename):\n    \"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"\n    buffer = _builtin_open(filename, 'rb')\n    try:\n        encoding, lines = detect_encoding(buffer.readline)\n        buffer.seek(0)\n        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n        text.mode = 'r'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tokenize",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def tokenize(readline):\n    \"\"\"\n    The tokenize() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternatively, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import tokenize\n```\n\n```python\n\n\n```\n\n```python\ndef tokenize(readline):\n    \"\"\"\n    The tokenize() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternatively, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generate_tokens",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def generate_tokens(readline):\n    \"\"\"Tokenize a source reading Python code as unicode strings.\n    This has the same API as tokenize(), except that it expects the *readline*\n    callable to return str objects instead of bytes.\n    \"\"\"\n    return _tokenize(readline, None)\ndef main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import generate_tokens\n```\n\n```python\n\n\n```\n\n```python\ndef generate_tokens(readline):\n    \"\"\"Tokenize a source reading Python code as unicode strings.\n    This has the same API as tokenize(), except that it expects the *readline*\n    callable to return str objects instead of bytes.\n    \"\"\"\n    return _tokenize(readline, None)\ndef main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "def main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):\n        sys.stderr.write(message)\n        sys.stderr.write('\\n')\n    def error(message, filename=None, location=None):\n        if location:\n            args = (filename,) + location + (message,)\n            perror(\"%s:%d:%d: error: %s\" % args)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):\n        sys.stderr.write(message)\n        sys.stderr.write('\\n')\n    def error(message, filename=None, location=None):\n        if location:\n            args = (filename,) + location + (message,)\n            perror(\"%s:%d:%d: error: %s\" % args)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nimport itertools as _itertools\nimport re",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import __author__\n```\n\n```python\n\n\n```\n\n```python\n__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nimport itertools as _itertools\nimport re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nimport itertools as _itertools\nimport re\nimport sys",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import __credits__\n```\n\n```python\n\n\n```\n\n```python\n__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nimport itertools as _itertools\nimport re\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cookie_re",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\nblank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import cookie_re\n```\n\n```python\n\n\n```\n\n```python\ncookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\nblank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "blank_re",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import blank_re\n```\n\n```python\n\n\n```\n\n```python\nblank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Whitespace",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Whitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Whitespace\n```\n\n```python\n\n\n```\n\n```python\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Comment",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Comment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Comment\n```\n\n```python\n\n\n```\n\n```python\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Ignore",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Ignore\n```\n\n```python\n\n\n```\n\n```python\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Name = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Name\n```\n\n```python\n\n\n```\n\n```python\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Hexnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Hexnumber\n```\n\n```python\n\n\n```\n\n```python\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Binnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Binnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Binnumber\n```\n\n```python\n\n\n```\n\n```python\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Octnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Octnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Octnumber\n```\n\n```python\n\n\n```\n\n```python\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Decnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Decnumber\n```\n\n```python\n\n\n```\n\n```python\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Intnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Intnumber\n```\n\n```python\n\n\n```\n\n```python\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Exponent",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Exponent\n```\n\n```python\n\n\n```\n\n```python\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Pointfloat",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Pointfloat\n```\n\n```python\n\n\n```\n\n```python\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Expfloat",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Expfloat\n```\n\n```python\n\n\n```\n\n```python\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Floatnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Floatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Floatnumber\n```\n\n```python\n\n\n```\n\n```python\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Imagnumber",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Imagnumber\n```\n\n```python\n\n\n```\n\n```python\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Number",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Number = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}\n    for prefix in _valid_string_prefixes:",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Number\n```\n\n```python\n\n\n```\n\n```python\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permutations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}\n    for prefix in _valid_string_prefixes:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringPrefix",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "StringPrefix = group(*_all_string_prefixes())\n# Tail end of ' string.\nSingle = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import StringPrefix\n```\n\n```python\n\n\n```\n\n```python\nStringPrefix = group(*_all_string_prefixes())\n# Tail end of ' string.\nSingle = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Single",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Single\n```\n\n```python\n\n\n```\n\n```python\nSingle = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Double",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Double\n```\n\n```python\n\n\n```\n\n```python\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Single3",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Single3\n```\n\n```python\n\n\n```\n\n```python\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Double3",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Double3\n```\n\n```python\n\n\n```\n\n```python\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Triple",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Triple\n```\n\n```python\n\n\n```\n\n```python\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "String",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import String\n```\n\n```python\n\n\n```\n\n```python\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Sorting in reverse order puts the long operators before their prefixes.\n# Otherwise if = came before ==, == would get recognized as two instances\n# of =.\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Special",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Special\n```\n\n```python\n\n\n```\n\n```python\nSpecial = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Funny",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Funny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Funny\n```\n\n```python\n\n\n```\n\n```python\nFunny = group(r'\\r?\\n', Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PlainToken",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "PlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import PlainToken\n```\n\n```python\n\n\n```\n\n```python\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Token",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "Token = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import Token\n```\n\n```python\n\n\n```\n\n```python\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ContStr",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import ContStr\n```\n\n```python\n\n\n```\n\n```python\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PseudoExtras",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import PseudoExtras\n```\n\n```python\n\n\n```\n\n```python\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PseudoToken",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import PseudoToken\n```\n\n```python\n\n\n```\n\n```python\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "endpats",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "endpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3\n# A set of all of the single and triple quoted string prefixes,\n#  including the opening quotes.\nsingle_quoted = set()\ntriple_quoted = set()",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import endpats\n```\n\n```python\n\n\n```\n\n```python\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3\n# A set of all of the single and triple quoted string prefixes,\n#  including the opening quotes.\nsingle_quoted = set()\ntriple_quoted = set()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "single_quoted",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "single_quoted = set()\ntriple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import single_quoted\n```\n\n```python\n\n\n```\n\n```python\nsingle_quoted = set()\ntriple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "triple_quoted",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "triple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import triple_quoted\n```\n\n```python\n\n\n```\n\n```python\ntriple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tabsize",
        "kind": 5,
        "importPath": "venv.lib.python3.8.tokenize",
        "description": "venv.lib.python3.8.tokenize",
        "peekOfCode": "tabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):",
        "detail": "venv.lib.python3.8.tokenize",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.tokenize import tabsize\n```\n\n```python\n\n\n```\n\n```python\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_C",
        "kind": 6,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "class _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import _C\n```\n\n```python\n\n\n```\n\n```python\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DynamicClassAttribute",
        "kind": 6,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "class DynamicClassAttribute:\n    \"\"\"Route attribute access on a class to __getattr__.\n    This is a descriptor, used to define attributes that act differently when\n    accessed through an instance and through a class.  Instance access remains\n    normal, but access to an attribute through a class will be routed to the\n    class's __getattr__ method; this is done by raising AttributeError.\n    This allows one to have properties active on an instance, and have virtual\n    attributes on the class with the same name (see Enum for an example).\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import DynamicClassAttribute\n```\n\n```python\n\n\n```\n\n```python\nclass DynamicClassAttribute:\n    \"\"\"Route attribute access on a class to __getattr__.\n    This is a descriptor, used to define attributes that act differently when\n    accessed through an instance and through a class.  Instance access remains\n    normal, but access to an attribute through a class will be routed to the\n    class's __getattr__ method; this is done by raising AttributeError.\n    This allows one to have properties active on an instance, and have virtual\n    attributes on the class with the same name (see Enum for an example).\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_GeneratorWrapper",
        "kind": 6,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "class _GeneratorWrapper:\n    # TODO: Implement this in C.\n    def __init__(self, gen):\n        self.__wrapped = gen\n        self.__isgen = gen.__class__ is GeneratorType\n        self.__name__ = getattr(gen, '__name__', None)\n        self.__qualname__ = getattr(gen, '__qualname__', None)\n    def send(self, val):\n        return self.__wrapped.send(val)\n    def throw(self, tp, *rest):",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import _GeneratorWrapper\n```\n\n```python\n\n\n```\n\n```python\nclass _GeneratorWrapper:\n    # TODO: Implement this in C.\n    def __init__(self, gen):\n        self.__wrapped = gen\n        self.__isgen = gen.__class__ is GeneratorType\n        self.__name__ = getattr(gen, '__name__', None)\n        self.__qualname__ = getattr(gen, '__qualname__', None)\n    def send(self, val):\n        return self.__wrapped.send(val)\n    def throw(self, tp, *rest):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "new_class",
        "kind": 2,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "def new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:\n        ns['__orig_bases__'] = bases\n    return meta(name, resolved_bases, ns, **kwds)\ndef resolve_bases(bases):",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import new_class\n```\n\n```python\n\n\n```\n\n```python\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:\n        ns['__orig_bases__'] = bases\n    return meta(name, resolved_bases, ns, **kwds)\ndef resolve_bases(bases):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "resolve_bases",
        "kind": 2,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "def resolve_bases(bases):\n    \"\"\"Resolve MRO entries dynamically as specified by PEP 560.\"\"\"\n    new_bases = list(bases)\n    updated = False\n    shift = 0\n    for i, base in enumerate(bases):\n        if isinstance(base, type):\n            continue\n        if not hasattr(base, \"__mro_entries__\"):\n            continue",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import resolve_bases\n```\n\n```python\n\n\n```\n\n```python\ndef resolve_bases(bases):\n    \"\"\"Resolve MRO entries dynamically as specified by PEP 560.\"\"\"\n    new_bases = list(bases)\n    updated = False\n    shift = 0\n    for i, base in enumerate(bases):\n        if isinstance(base, type):\n            continue\n        if not hasattr(base, \"__mro_entries__\"):\n            continue\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prepare_class",
        "kind": 2,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "def prepare_class(name, bases=(), kwds=None):\n    \"\"\"Call the __prepare__ method of the appropriate metaclass.\n    Returns (metaclass, namespace, kwds) as a 3-tuple\n    *metaclass* is the appropriate metaclass\n    *namespace* is the prepared class namespace\n    *kwds* is an updated copy of the passed in kwds argument with any\n    'metaclass' entry removed. If no kwds argument is passed in, this will\n    be an empty dict.\n    \"\"\"\n    if kwds is None:",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import prepare_class\n```\n\n```python\n\n\n```\n\n```python\ndef prepare_class(name, bases=(), kwds=None):\n    \"\"\"Call the __prepare__ method of the appropriate metaclass.\n    Returns (metaclass, namespace, kwds) as a 3-tuple\n    *metaclass* is the appropriate metaclass\n    *namespace* is the prepared class namespace\n    *kwds* is an updated copy of the passed in kwds argument with any\n    'metaclass' entry removed. If no kwds argument is passed in, this will\n    be an empty dict.\n    \"\"\"\n    if kwds is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "coroutine",
        "kind": 2,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "def coroutine(func):\n    \"\"\"Convert regular generator function to a coroutine.\"\"\"\n    if not callable(func):\n        raise TypeError('types.coroutine() expects a callable')\n    if (func.__class__ is FunctionType and\n        getattr(func, '__code__', None).__class__ is CodeType):\n        co_flags = func.__code__.co_flags\n        # Check if 'func' is a coroutine function.\n        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)\n        if co_flags & 0x180:",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import coroutine\n```\n\n```python\n\n\n```\n\n```python\ndef coroutine(func):\n    \"\"\"Convert regular generator function to a coroutine.\"\"\"\n    if not callable(func):\n        raise TypeError('types.coroutine() expects a callable')\n    if (func.__class__ is FunctionType and\n        getattr(func, '__code__', None).__class__ is CodeType):\n        co_flags = func.__code__.co_flags\n        # Check if 'func' is a coroutine function.\n        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)\n        if co_flags & 0x180:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FunctionType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "FunctionType = type(_f)\nLambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import FunctionType\n```\n\n```python\n\n\n```\n\n```python\nFunctionType = type(_f)\nLambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LambdaType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "LambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import LambdaType\n```\n\n```python\n\n\n```\n\n```python\nLambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CodeType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "CodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import CodeType\n```\n\n```python\n\n\n```\n\n```python\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MappingProxyType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "MappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():\n    yield 1",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import MappingProxyType\n```\n\n```python\n\n\n```\n\n```python\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():\n    yield 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SimpleNamespace",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "SimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():\n    yield 1\nGeneratorType = type(_g())",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import SimpleNamespace\n```\n\n```python\n\n\n```\n\n```python\nSimpleNamespace = type(sys.implementation)\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\ndef _g():\n    yield 1\nGeneratorType = type(_g())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CellType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "CellType = type(_cell_factory())\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import CellType\n```\n\n```python\n\n\n```\n\n```python\nCellType = type(_cell_factory())\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GeneratorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "GeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import GeneratorType\n```\n\n```python\n\n\n```\n\n```python\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_c",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import _c\n```\n\n```python\n\n\n```\n\n```python\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CoroutineType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "CoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import CoroutineType\n```\n\n```python\n\n\n```\n\n```python\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_ag",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import _ag\n```\n\n```python\n\n\n```\n\n```python\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AsyncGeneratorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "AsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import AsyncGeneratorType\n```\n\n```python\n\n\n```\n\n```python\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MethodType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "MethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import MethodType\n```\n\n```python\n\n\n```\n\n```python\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuiltinFunctionType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "BuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import BuiltinFunctionType\n```\n\n```python\n\n\n```\n\n```python\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuiltinMethodType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "BuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import BuiltinMethodType\n```\n\n```python\n\n\n```\n\n```python\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WrapperDescriptorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "WrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import WrapperDescriptorType\n```\n\n```python\n\n\n```\n\n```python\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MethodWrapperType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "MethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import MethodWrapperType\n```\n\n```python\n\n\n```\n\n```python\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MethodDescriptorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "MethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import MethodDescriptorType\n```\n\n```python\n\n\n```\n\n```python\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ClassMethodDescriptorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "ClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import ClassMethodDescriptorType\n```\n\n```python\n\n\n```\n\n```python\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ModuleType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "ModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical\nGetSetDescriptorType = type(FunctionType.__code__)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import ModuleType\n```\n\n```python\n\n\n```\n\n```python\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical\nGetSetDescriptorType = type(FunctionType.__code__)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetSetDescriptorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "GetSetDescriptorType = type(FunctionType.__code__)\nMemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c, _ag  # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import GetSetDescriptorType\n```\n\n```python\n\n\n```\n\n```python\nGetSetDescriptorType = type(FunctionType.__code__)\nMemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c, _ag  # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MemberDescriptorType",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "MemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c, _ag  # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import MemberDescriptorType\n```\n\n```python\n\n\n```\n\n```python\nMemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c, _ag  # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.types",
        "description": "venv.lib.python3.8.types",
        "peekOfCode": "__all__ = [n for n in globals() if n[:1] != '_']",
        "detail": "venv.lib.python3.8.types",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.types import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [n for n in globals() if n[:1] != '_']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_OptionError",
        "kind": 6,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "class _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:\n        try:\n            _setoption(arg)\n        except _OptionError as msg:\n            print(\"Invalid -W option ignored:\", msg, file=sys.stderr)",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import _OptionError\n```\n\n```python\n\n\n```\n\n```python\nclass _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:\n        try:\n            _setoption(arg)\n        except _OptionError as msg:\n            print(\"Invalid -W option ignored:\", msg, file=sys.stderr)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WarningMessage",
        "kind": 6,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "class WarningMessage(object):\n    _WARNING_DETAILS = (\"message\", \"category\", \"filename\", \"lineno\", \"file\",\n                        \"line\", \"source\")\n    def __init__(self, message, category, filename, lineno, file=None,\n                 line=None, source=None):\n        self.message = message\n        self.category = category\n        self.filename = filename\n        self.lineno = lineno\n        self.file = file",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import WarningMessage\n```\n\n```python\n\n\n```\n\n```python\nclass WarningMessage(object):\n    _WARNING_DETAILS = (\"message\", \"category\", \"filename\", \"lineno\", \"file\",\n                        \"line\", \"source\")\n    def __init__(self, message, category, filename, lineno, file=None,\n                 line=None, source=None):\n        self.message = message\n        self.category = category\n        self.filename = filename\n        self.lineno = lineno\n        self.file = file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "catch_warnings",
        "kind": 6,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "class catch_warnings(object):\n    \"\"\"A context manager that copies and restores the warnings filter upon\n    exiting the context.\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import catch_warnings\n```\n\n```python\n\n\n```\n\n```python\nclass catch_warnings(object):\n    \"\"\"A context manager that copies and restores the warnings filter upon\n    exiting the context.\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "showwarning",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import showwarning\n```\n\n```python\n\n\n```\n\n```python\ndef showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "formatwarning",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file\n    if file is None:\n        file = sys.stderr\n        if file is None:\n            # sys.stderr is None when run with pythonw.exe:",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import formatwarning\n```\n\n```python\n\n\n```\n\n```python\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file\n    if file is None:\n        file = sys.stderr\n        if file is None:\n            # sys.stderr is None when run with pythonw.exe:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filterwarnings",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def filterwarnings(action, message=\"\", category=Warning, module=\"\", lineno=0,\n                   append=False):\n    \"\"\"Insert an entry into the list of warnings filters (at the front).\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'message' -- a regex that the warning message must match\n    'category' -- a class that the warning must be a subclass of\n    'module' -- a regex that the module name must match\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import filterwarnings\n```\n\n```python\n\n\n```\n\n```python\ndef filterwarnings(action, message=\"\", category=Warning, module=\"\", lineno=0,\n                   append=False):\n    \"\"\"Insert an entry into the list of warnings filters (at the front).\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'message' -- a regex that the warning message must match\n    'category' -- a class that the warning must be a subclass of\n    'module' -- a regex that the module name must match\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "simplefilter",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def simplefilter(action, category=Warning, lineno=0, append=False):\n    \"\"\"Insert a simple entry into the list of warnings filters (at the front).\n    A simple filter matches all modules and messages.\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'category' -- a class that the warning must be a subclass of\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    \"\"\"\n    assert action in (\"error\", \"ignore\", \"always\", \"default\", \"module\",",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import simplefilter\n```\n\n```python\n\n\n```\n\n```python\ndef simplefilter(action, category=Warning, lineno=0, append=False):\n    \"\"\"Insert a simple entry into the list of warnings filters (at the front).\n    A simple filter matches all modules and messages.\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'category' -- a class that the warning must be a subclass of\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    \"\"\"\n    assert action in (\"error\", \"ignore\", \"always\", \"default\", \"module\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "resetwarnings",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def resetwarnings():\n    \"\"\"Clear the list of warning filters, so that no filters are active.\"\"\"\n    filters[:] = []\n    _filters_mutated()\nclass _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import resetwarnings\n```\n\n```python\n\n\n```\n\n```python\ndef resetwarnings():\n    \"\"\"Clear the list of warning filters, so that no filters are active.\"\"\"\n    filters[:] = []\n    _filters_mutated()\nclass _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def warn(message, category=None, stacklevel=1, source=None):\n    \"\"\"Issue a warning, or maybe ignore it or raise an exception.\"\"\"\n    # Check if message is already a Warning object\n    if isinstance(message, Warning):\n        category = message.__class__\n    # Check category argument\n    if category is None:\n        category = UserWarning\n    if not (isinstance(category, type) and issubclass(category, Warning)):\n        raise TypeError(\"category must be a Warning subclass, \"",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import warn\n```\n\n```python\n\n\n```\n\n```python\ndef warn(message, category=None, stacklevel=1, source=None):\n    \"\"\"Issue a warning, or maybe ignore it or raise an exception.\"\"\"\n    # Check if message is already a Warning object\n    if isinstance(message, Warning):\n        category = message.__class__\n    # Check category argument\n    if category is None:\n        category = UserWarning\n    if not (isinstance(category, type) and issubclass(category, Warning)):\n        raise TypeError(\"category must be a Warning subclass, \"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "warn_explicit",
        "kind": 2,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "def warn_explicit(message, category, filename, lineno,\n                  module=None, registry=None, module_globals=None,\n                  source=None):\n    lineno = int(lineno)\n    if module is None:\n        module = filename or \"<unknown>\"\n        if module[-3:].lower() == \".py\":\n            module = module[:-3] # XXX What about leading pathname?\n    if registry is None:\n        registry = {}",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import warn_explicit\n```\n\n```python\n\n\n```\n\n```python\ndef warn_explicit(message, category, filename, lineno,\n                  module=None, registry=None, module_globals=None,\n                  source=None):\n    lineno = int(lineno)\n    if module is None:\n        module = filename or \"<unknown>\"\n        if module[-3:].lower() == \".py\":\n            module = module[:-3] # XXX What about leading pathname?\n    if registry is None:\n        registry = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "__all__ = [\"warn\", \"warn_explicit\", \"showwarning\",\n           \"formatwarning\", \"filterwarnings\", \"simplefilter\",\n           \"resetwarnings\", \"catch_warnings\"]\ndef showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"warn\", \"warn_explicit\", \"showwarning\",\n           \"formatwarning\", \"filterwarnings\", \"simplefilter\",\n           \"resetwarnings\", \"catch_warnings\"]\ndef showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_showwarning_orig",
        "kind": 5,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "_showwarning_orig = showwarning\ndef _showwarnmsg(msg):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    try:\n        sw = showwarning\n    except NameError:\n        pass\n    else:\n        if sw is not _showwarning_orig:\n            # warnings.showwarning() was replaced",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import _showwarning_orig\n```\n\n```python\n\n\n```\n\n```python\n_showwarning_orig = showwarning\ndef _showwarnmsg(msg):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    try:\n        sw = showwarning\n    except NameError:\n        pass\n    else:\n        if sw is not _showwarning_orig:\n            # warnings.showwarning() was replaced\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_formatwarning_orig",
        "kind": 5,
        "importPath": "venv.lib.python3.8.warnings",
        "description": "venv.lib.python3.8.warnings",
        "peekOfCode": "_formatwarning_orig = formatwarning\ndef _formatwarnmsg(msg):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    try:\n        fw = formatwarning\n    except NameError:\n        pass\n    else:\n        if fw is not _formatwarning_orig:\n            # warnings.formatwarning() was replaced",
        "detail": "venv.lib.python3.8.warnings",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.warnings import _formatwarning_orig\n```\n\n```python\n\n\n```\n\n```python\n_formatwarning_orig = formatwarning\ndef _formatwarnmsg(msg):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    try:\n        fw = formatwarning\n    except NameError:\n        pass\n    else:\n        if fw is not _formatwarning_orig:\n            # warnings.formatwarning() was replaced\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeakMethod",
        "kind": 6,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "class WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n    def __new__(cls, meth, callback=None):\n        try:\n            obj = meth.__self__\n            func = meth.__func__",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import WeakMethod\n```\n\n```python\n\n\n```\n\n```python\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n    def __new__(cls, meth, callback=None):\n        try:\n            obj = meth.__self__\n            func = meth.__func__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeakValueDictionary",
        "kind": 6,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "class WeakValueDictionary(_collections_abc.MutableMapping):\n    \"\"\"Mapping class that references values weakly.\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"\n    # We inherit the constructor without worrying about the input\n    # dictionary; since it uses our .update() method, we get the right\n    # checks (if the other dictionary is a WeakValueDictionary,\n    # objects are unwrapped on the way out, and we always wrap on the\n    # way in).",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import WeakValueDictionary\n```\n\n```python\n\n\n```\n\n```python\nclass WeakValueDictionary(_collections_abc.MutableMapping):\n    \"\"\"Mapping class that references values weakly.\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"\n    # We inherit the constructor without worrying about the input\n    # dictionary; since it uses our .update() method, we get the right\n    # checks (if the other dictionary is a WeakValueDictionary,\n    # objects are unwrapped on the way out, and we always wrap on the\n    # way in).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "KeyedRef",
        "kind": 6,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "class KeyedRef(ref):\n    \"\"\"Specialized reference that includes a key corresponding to the value.\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n    \"\"\"\n    __slots__ = \"key\",\n    def __new__(type, ob, callback, key):\n        self = ref.__new__(type, ob, callback)",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import KeyedRef\n```\n\n```python\n\n\n```\n\n```python\nclass KeyedRef(ref):\n    \"\"\"Specialized reference that includes a key corresponding to the value.\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n    \"\"\"\n    __slots__ = \"key\",\n    def __new__(type, ob, callback, key):\n        self = ref.__new__(type, ob, callback)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WeakKeyDictionary",
        "kind": 6,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "class WeakKeyDictionary(_collections_abc.MutableMapping):\n    \"\"\" Mapping class that references keys weakly.\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"\n    def __init__(self, dict=None):",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import WeakKeyDictionary\n```\n\n```python\n\n\n```\n\n```python\nclass WeakKeyDictionary(_collections_abc.MutableMapping):\n    \"\"\" Mapping class that references keys weakly.\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"\n    def __init__(self, dict=None):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "finalize",
        "kind": 6,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "class finalize:\n    \"\"\"Class for finalization of weakrefable objects\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import finalize\n```\n\n```python\n\n\n```\n\n```python\nclass finalize:\n    \"\"\"Class for finalization of weakrefable objects\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProxyTypes",
        "kind": 5,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "ProxyTypes = (ProxyType, CallableProxyType)\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import ProxyTypes\n```\n\n```python\n\n\n```\n\n```python\nProxyTypes = (ProxyType, CallableProxyType)\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "venv.lib.python3.8.weakref",
        "description": "venv.lib.python3.8.weakref",
        "peekOfCode": "__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"",
        "detail": "venv.lib.python3.8.weakref",
        "documentation": {
            "value": "\n```python\nfrom venv.lib.python3.8.weakref import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n```\n",
            "supportThemeIcons": false
        }
    }
]